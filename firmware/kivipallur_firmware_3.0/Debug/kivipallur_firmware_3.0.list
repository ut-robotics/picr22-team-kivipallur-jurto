
kivipallur_firmware_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800bec8  0800bec8  0001bec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf20  0800bf20  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf20  0800bf20  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf20  0800bf20  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf20  0800bf20  0001bf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf24  0800bf24  0001bf24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800bf28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  200001c8  0800c0f0  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0800c0f0  00021774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df23  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004282  00000000  00000000  0003e11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  000423a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024744  00000000  00000000  00045558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2da  00000000  00000000  00069c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2e6e  00000000  00000000  00087f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ade4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf4  00000000  00000000  0016ae34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c8 	.word	0x200001c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800beb0 	.word	0x0800beb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001cc 	.word	0x200001cc
 8000214:	0800beb0 	.word	0x0800beb0

08000218 <clamp>:
	      .speed2 = 0,
	      .speed3 = 0,
	      .delimiter = 0xAAAA
	  };;

int32_t clamp(int32_t value, int32_t minValue, int32_t maxValue) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	if (value > maxValue) {
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	dd01      	ble.n	8000230 <clamp+0x18>
		return maxValue;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	e006      	b.n	800023e <clamp+0x26>
	}

	if (value < minValue) {
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	429a      	cmp	r2, r3
 8000236:	da01      	bge.n	800023c <clamp+0x24>
		return minValue;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	e000      	b.n	800023e <clamp+0x26>
	}
	return value;
 800023c:	68fb      	ldr	r3, [r7, #12]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <CDC_On_Receive>:


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) { // (7)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	d116      	bne.n	800028c <CDC_On_Receive+0x40>
		memcpy(&command, buffer, sizeof(Command)); // (8)
 800025e:	220a      	movs	r2, #10
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <CDC_On_Receive+0x48>)
 8000264:	f00b fe0e 	bl	800be84 <memcpy>

		if (command.delimiter == 0xAAAA) { // (9)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <CDC_On_Receive+0x48>)
 800026a:	891b      	ldrh	r3, [r3, #8]
 800026c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000270:	4293      	cmp	r3, r2
 8000272:	d102      	bne.n	800027a <CDC_On_Receive+0x2e>
			isCommandReceived = 1;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <CDC_On_Receive+0x4c>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		}
		if (command.delimiter == 0xBBBB) { // (9)
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <CDC_On_Receive+0x48>)
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000282:	4293      	cmp	r3, r2
 8000284:	d102      	bne.n	800028c <CDC_On_Receive+0x40>
	  		driverReset = 1;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <CDC_On_Receive+0x50>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200005a8 	.word	0x200005a8
 8000298:	200005b2 	.word	0x200005b2
 800029c:	200005b3 	.word	0x200005b3

080002a0 <PIDcontrol>:

//Näite põhjal hiljem täpsusta
int32_t PIDcontrol(MotorControl* control, int16_t position){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	807b      	strh	r3, [r7, #2]
	control->positionChange = position - control->position;
 80002ac:	887a      	ldrh	r2, [r7, #2]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	821a      	strh	r2, [r3, #16]
	control->position = position;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	887a      	ldrh	r2, [r7, #2]
 80002c4:	805a      	strh	r2, [r3, #2]
	int32_t error = control->speed -control->positionChange;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002cc:	461a      	mov	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	control->integraal += error;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	441a      	add	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]

	return control->p_gain * error + control->i_gain * control->integraal;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	fb03 f202 	mul.w	r2, r3, r2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002f8:	4619      	mov	r1, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	fb01 f303 	mul.w	r3, r1, r3
 8000302:	4413      	add	r3, r2
}
 8000304:	4618      	mov	r0, r3
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <Thrower_Send>:


uint16_t pwmData[20];

void Thrower_Send (uint16_t command){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]
	if (command > 6000, command < 1) {
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	2b00      	cmp	r3, #0
		return 0;
	}
	return command;
 800031e:	bf00      	nop
		pwmData[i] = 0;
	}
	HAL_TIM_PWM_Start_DMA(&htim15, TIM_CHANNEL_1, (uint32_t *)pwmData, 20);
*/

}
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	if (enable_pid == 1){
 8000334:	4b50      	ldr	r3, [pc, #320]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	f040 8098 	bne.w	800046e <HAL_TIM_PeriodElapsedCallback+0x142>

		int16_t position;
		//Mootor1
		position = (int16_t)TIM3->CNT;
 800033e:	4b4f      	ldr	r3, [pc, #316]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000342:	82fb      	strh	r3, [r7, #22]
		int32_t MOT_1_pwmValue = PIDcontrol(&motor1Control, position);
 8000344:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000348:	4619      	mov	r1, r3
 800034a:	484d      	ldr	r0, [pc, #308]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800034c:	f7ff ffa8 	bl	80002a0 <PIDcontrol>
 8000350:	6138      	str	r0, [r7, #16]
		HAL_GPIO_WritePin(GPIOA, MOT1_suund_Pin, (MOT_1_pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	0fdb      	lsrs	r3, r3, #31
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f003 f86f 	bl	8003444 <HAL_GPIO_WritePin>
		TIM1->CCR2 = (uint16_t)clamp((MOT_1_pwmValue < 0) ? -MOT_1_pwmValue : MOT_1_pwmValue, 0, 65535);
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	2b00      	cmp	r3, #0
 800036a:	bfb8      	it	lt
 800036c:	425b      	neglt	r3, r3
 800036e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff4f 	bl	8000218 <clamp>
 800037a:	4603      	mov	r3, r0
 800037c:	b29a      	uxth	r2, r3
 800037e:	4b41      	ldr	r3, [pc, #260]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000380:	639a      	str	r2, [r3, #56]	; 0x38

		//Mootor2
		position = (int16_t)TIM4->CNT;
 8000382:	4b41      	ldr	r3, [pc, #260]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	82fb      	strh	r3, [r7, #22]
		int32_t MOT_2_pwmValue = PIDcontrol(&motor2Control, position);
 8000388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800038c:	4619      	mov	r1, r3
 800038e:	483f      	ldr	r0, [pc, #252]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000390:	f7ff ff86 	bl	80002a0 <PIDcontrol>
 8000394:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_WritePin(GPIOA, MOT2_suund_Pin, (MOT_2_pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	0fdb      	lsrs	r3, r3, #31
 800039a:	b2db      	uxtb	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	2102      	movs	r1, #2
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f003 f84e 	bl	8003444 <HAL_GPIO_WritePin>
		TIM2->CCR2 = (uint16_t)clamp((MOT_2_pwmValue < 0) ? -MOT_2_pwmValue : MOT_2_pwmValue, 0, 65535);
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	bfb8      	it	lt
 80003ae:	425b      	neglt	r3, r3
 80003b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff2e 	bl	8000218 <clamp>
 80003bc:	4603      	mov	r3, r0
 80003be:	b29a      	uxth	r2, r3
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c4:	639a      	str	r2, [r3, #56]	; 0x38

		//Mootor2
		position = (int16_t)TIM8->CNT;
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80003c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ca:	82fb      	strh	r3, [r7, #22]
		int32_t MOT_3_pwmValue = PIDcontrol(&motor3Control, position);
 80003cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4830      	ldr	r0, [pc, #192]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80003d4:	f7ff ff64 	bl	80002a0 <PIDcontrol>
 80003d8:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(GPIOA, MOT3_suund_Pin, (MOT_3_pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	0fdb      	lsrs	r3, r3, #31
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	2104      	movs	r1, #4
 80003e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e8:	f003 f82c 	bl	8003444 <HAL_GPIO_WritePin>
		TIM2->CCR4 = (uint16_t)clamp((MOT_3_pwmValue < 0) ? -MOT_3_pwmValue : MOT_3_pwmValue, 0, 65535);
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bfb8      	it	lt
 80003f2:	425b      	neglt	r3, r3
 80003f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff0c 	bl	8000218 <clamp>
 8000400:	4603      	mov	r3, r0
 8000402:	b29a      	uxth	r2, r3
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	641a      	str	r2, [r3, #64]	; 0x40

		timer+=1;
 800040a:	4b23      	ldr	r3, [pc, #140]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	3301      	adds	r3, #1
 8000410:	b29a      	uxth	r2, r3
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000414:	801a      	strh	r2, [r3, #0]
		if (timer == 50){
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	2b32      	cmp	r3, #50	; 0x32
 800041c:	d127      	bne.n	800046e <HAL_TIM_PeriodElapsedCallback+0x142>
			timer = 0;
 800041e:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000420:	2200      	movs	r2, #0
 8000422:	801a      	strh	r2, [r3, #0]
			enable_pid = 0;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000426:	2200      	movs	r2, #0
 8000428:	801a      	strh	r2, [r3, #0]
			motor1Control.speed = 0;
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800042c:	2200      	movs	r2, #0
 800042e:	801a      	strh	r2, [r3, #0]
			TIM1->CCR1 = 0;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000438:	2200      	movs	r2, #0
 800043a:	639a      	str	r2, [r3, #56]	; 0x38
			motor2Control.speed = 0;
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800043e:	2200      	movs	r2, #0
 8000440:	801a      	strh	r2, [r3, #0]
			TIM2->CCR1 = 0;
 8000442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000446:	2200      	movs	r2, #0
 8000448:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 800044a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044e:	2200      	movs	r2, #0
 8000450:	639a      	str	r2, [r3, #56]	; 0x38
			motor3Control.speed = 0;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000454:	2200      	movs	r2, #0
 8000456:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = 0;
 8000458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045c:	2200      	movs	r2, #0
 800045e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 0;
 8000460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000464:	2200      	movs	r2, #0
 8000466:	641a      	str	r2, [r3, #64]	; 0x40
			Thrower_Send(0);
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ff51 	bl	8000310 <Thrower_Send>
		}
	}
}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200005b6 	.word	0x200005b6
 800047c:	40000400 	.word	0x40000400
 8000480:	20000000 	.word	0x20000000
 8000484:	40012c00 	.word	0x40012c00
 8000488:	40000800 	.word	0x40000800
 800048c:	20000014 	.word	0x20000014
 8000490:	40013400 	.word	0x40013400
 8000494:	20000028 	.word	0x20000028
 8000498:	200005b4 	.word	0x200005b4

0800049c <wake_drivers_up>:

void wake_drivers_up() {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOT_SLEEP_GPIO_Port, MOT_SLEEP_Pin, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2101      	movs	r1, #1
 80004a6:	480b      	ldr	r0, [pc, #44]	; (80004d4 <wake_drivers_up+0x38>)
 80004a8:	f002 ffcc 	bl	8003444 <HAL_GPIO_WritePin>
		for (int i = 0; i<300; i++) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	e003      	b.n	80004ba <wake_drivers_up+0x1e>
			__asm("nop");
 80004b2:	bf00      	nop
		for (int i = 0; i<300; i++) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3301      	adds	r3, #1
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80004c0:	dbf7      	blt.n	80004b2 <wake_drivers_up+0x16>
	  	  }
	HAL_GPIO_WritePin(MOT_SLEEP_GPIO_Port, MOT_SLEEP_Pin, 1);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2101      	movs	r1, #1
 80004c6:	4803      	ldr	r0, [pc, #12]	; (80004d4 <wake_drivers_up+0x38>)
 80004c8:	f002 ffbc 	bl	8003444 <HAL_GPIO_WritePin>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000400 	.word	0x48000400

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 f9cb 	bl	8001876 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f8ac 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fd96 	bl	8001014 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004e8:	f000 f9bc 	bl	8000864 <MX_TIM1_Init>
  MX_RTC_Init();
 80004ec:	f000 f98e 	bl	800080c <MX_RTC_Init>
  MX_TIM2_Init();
 80004f0:	f000 fa4c 	bl	800098c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f4:	f000 faae 	bl	8000a54 <MX_TIM3_Init>
  MX_TIM8_Init();
 80004f8:	f000 fb8e 	bl	8000c18 <MX_TIM8_Init>
  MX_TIM17_Init();
 80004fc:	f000 fce6 	bl	8000ecc <MX_TIM17_Init>
  MX_TIM16_Init();
 8000500:	f000 fc6a 	bl	8000dd8 <MX_TIM16_Init>
  MX_TIM4_Init();
 8000504:	f000 fafc 	bl	8000b00 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000508:	f000 fbe0 	bl	8000ccc <MX_TIM15_Init>
  MX_USB_Device_Init();
 800050c:	f00a ff86 	bl	800b41c <MX_USB_Device_Init>
  MX_DMA_Init();
 8000510:	f000 fd56 	bl	8000fc0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000514:	f000 f8e0 	bl	80006d8 <MX_ADC1_Init>
  MX_CRC_Init();
 8000518:	f000 f956 	bl	80007c8 <MX_CRC_Init>
  MX_TIM6_Init();
 800051c:	f000 fb46 	bl	8000bac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000520:	2104      	movs	r1, #4
 8000522:	4835      	ldr	r0, [pc, #212]	; (80005f8 <main+0x120>)
 8000524:	f005 fe5e 	bl	80061e4 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000528:	2104      	movs	r1, #4
 800052a:	4834      	ldr	r0, [pc, #208]	; (80005fc <main+0x124>)
 800052c:	f005 fe5a 	bl	80061e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4833      	ldr	r0, [pc, #204]	; (8000600 <main+0x128>)
 8000534:	f005 fe56 	bl	80061e4 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000538:	210c      	movs	r1, #12
 800053a:	4831      	ldr	r0, [pc, #196]	; (8000600 <main+0x128>)
 800053c:	f005 fe52 	bl	80061e4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000540:	2104      	movs	r1, #4
 8000542:	4830      	ldr	r0, [pc, #192]	; (8000604 <main+0x12c>)
 8000544:	f005 fff4 	bl	8006530 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000548:	2104      	movs	r1, #4
 800054a:	482f      	ldr	r0, [pc, #188]	; (8000608 <main+0x130>)
 800054c:	f005 fff0 	bl	8006530 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000550:	2104      	movs	r1, #4
 8000552:	482e      	ldr	r0, [pc, #184]	; (800060c <main+0x134>)
 8000554:	f005 ffec 	bl	8006530 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);


  TIM1->CCR2 = 0;
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <main+0x138>)
 800055a:	2200      	movs	r2, #0
 800055c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR1 = 0;
 800055e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000562:	2200      	movs	r2, #0
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR4 = 0;
 8000566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056a:	2200      	movs	r2, #0
 800056c:	641a      	str	r2, [r3, #64]	; 0x40

  TIM15->CCR2 = 3000;
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <main+0x13c>)
 8000570:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000574:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
  TIM2->CCR4 = 0;
*/


  Thrower_Send(0);
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff feca 	bl	8000310 <Thrower_Send>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (driverReset) {
 800057c:	4b26      	ldr	r3, [pc, #152]	; (8000618 <main+0x140>)
 800057e:	781b      	ldrb	r3, [r3, #0]
	  	   	  TIM15->CCR2 = 65535;
		*/

	  	  }

	  	  if (isCommandReceived) { // (2)
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <main+0x144>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d031      	beq.n	80005ee <main+0x116>
	  	        isCommandReceived = 0;
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <main+0x144>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	  	        wake_drivers_up();
 8000590:	f7ff ff84 	bl	800049c <wake_drivers_up>
	  	        motor1Control.speed = command.speed1;
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <main+0x148>)
 8000596:	f9b3 2000 	ldrsh.w	r2, [r3]
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <main+0x14c>)
 800059c:	801a      	strh	r2, [r3, #0]
	  	        motor2Control.speed = command.speed2;
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <main+0x148>)
 80005a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <main+0x150>)
 80005a6:	801a      	strh	r2, [r3, #0]
	  	        motor3Control.speed = command.speed3;
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <main+0x148>)
 80005aa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0x154>)
 80005b0:	801a      	strh	r2, [r3, #0]

	  	        Thrower_Send(command.throwerSpeed);
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <main+0x148>)
 80005b4:	88db      	ldrh	r3, [r3, #6]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff feaa 	bl	8000310 <Thrower_Send>
	    	        timer = 0;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <main+0x158>)
 80005be:	2200      	movs	r2, #0
 80005c0:	801a      	strh	r2, [r3, #0]
	    	        enable_pid = 1;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <main+0x15c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	801a      	strh	r2, [r3, #0]

	  	        feedback.speed1 = motor1Control.speed; // (4)
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <main+0x14c>)
 80005ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <main+0x160>)
 80005d0:	801a      	strh	r2, [r3, #0]
	  	        feedback.speed2 = motor2Control.speed;
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <main+0x150>)
 80005d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <main+0x160>)
 80005da:	805a      	strh	r2, [r3, #2]
	  	        feedback.speed3 = motor3Control.speed;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <main+0x154>)
 80005de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <main+0x160>)
 80005e4:	809a      	strh	r2, [r3, #4]

	  	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 80005e6:	2108      	movs	r1, #8
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <main+0x160>)
 80005ea:	f00a ffd9 	bl	800b5a0 <CDC_Transmit_FS>
	  	      }

	  	//wake_drivers_up();
	  	HAL_Delay(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f001 f9b2 	bl	8001958 <HAL_Delay>
	  if (driverReset) {
 80005f4:	e7c2      	b.n	800057c <main+0xa4>
 80005f6:	bf00      	nop
 80005f8:	200004c4 	.word	0x200004c4
 80005fc:	200002fc 	.word	0x200002fc
 8000600:	20000348 	.word	0x20000348
 8000604:	20000394 	.word	0x20000394
 8000608:	200003e0 	.word	0x200003e0
 800060c:	20000478 	.word	0x20000478
 8000610:	40012c00 	.word	0x40012c00
 8000614:	40014000 	.word	0x40014000
 8000618:	200005b3 	.word	0x200005b3
 800061c:	200005b2 	.word	0x200005b2
 8000620:	200005a8 	.word	0x200005a8
 8000624:	20000000 	.word	0x20000000
 8000628:	20000014 	.word	0x20000014
 800062c:	20000028 	.word	0x20000028
 8000630:	200005b4 	.word	0x200005b4
 8000634:	200005b6 	.word	0x200005b6
 8000638:	2000003c 	.word	0x2000003c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2238      	movs	r2, #56	; 0x38
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00b fc28 	bl	800bea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000662:	f004 fc5d 	bl	8004f20 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000666:	230a      	movs	r3, #10
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000680:	2301      	movs	r3, #1
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000684:	2312      	movs	r3, #18
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800068c:	2306      	movs	r3, #6
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fcf5 	bl	8005088 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006a4:	f000 fd42 	bl	800112c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2303      	movs	r3, #3
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2104      	movs	r1, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fff9 	bl	80056b8 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 fd2e 	bl	800112c <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00b fbd5 	bl	800bea0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <MX_ADC1_Init+0xe8>)
 80006f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000700:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_ADC1_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000720:	2204      	movs	r2, #4
 8000722:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_ADC1_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000732:	2201      	movs	r2, #1
 8000734:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000746:	2200      	movs	r2, #0
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ADC1_Init+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC1_Init+0xe8>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <MX_ADC1_Init+0xe8>)
 8000762:	f001 faf5 	bl	8001d50 <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800076c:	f000 fcde 	bl	800112c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_ADC1_Init+0xe8>)
 800077c:	f002 f888 	bl	8002890 <HAL_ADCEx_MultiModeConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000786:	f000 fcd1 	bl	800112c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_ADC1_Init+0xec>)
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2306      	movs	r3, #6
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000796:	237f      	movs	r3, #127	; 0x7f
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079a:	2304      	movs	r3, #4
 800079c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_ADC1_Init+0xe8>)
 80007a8:	f001 fc5c 	bl	8002064 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007b2:	f000 fcbb 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001e4 	.word	0x200001e4
 80007c4:	c3210000 	.word	0xc3210000

080007c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_CRC_Init+0x3c>)
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MX_CRC_Init+0x40>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_CRC_Init+0x3c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_CRC_Init+0x3c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_CRC_Init+0x3c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_CRC_Init+0x3c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_CRC_Init+0x3c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_CRC_Init+0x3c>)
 80007f2:	f002 fa01 	bl	8002bf8 <HAL_CRC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007fc:	f000 fc96 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200002b0 	.word	0x200002b0
 8000808:	40023000 	.word	0x40023000

0800080c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_RTC_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_RTC_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_RTC_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_RTC_Init+0x50>)
 800081e:	227f      	movs	r2, #127	; 0x7f
 8000820:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_RTC_Init+0x50>)
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_RTC_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_RTC_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_RTC_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_RTC_Init+0x50>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_RTC_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_RTC_Init+0x50>)
 800084a:	f005 fb09 	bl	8005e60 <HAL_RTC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 fc6a 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200002d4 	.word	0x200002d4
 8000860:	40002800 	.word	0x40002800

08000864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b098      	sub	sp, #96	; 0x60
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2234      	movs	r2, #52	; 0x34
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f00b fb05 	bl	800bea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <MX_TIM1_Init+0x120>)
 8000898:	4a3b      	ldr	r2, [pc, #236]	; (8000988 <MX_TIM1_Init+0x124>)
 800089a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <MX_TIM1_Init+0x120>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <MX_TIM1_Init+0x120>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <MX_TIM1_Init+0x120>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_TIM1_Init+0x120>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <MX_TIM1_Init+0x120>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_TIM1_Init+0x120>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c2:	4830      	ldr	r0, [pc, #192]	; (8000984 <MX_TIM1_Init+0x120>)
 80008c4:	f005 fc37 	bl	8006136 <HAL_TIM_PWM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 fc2d 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008e2:	4619      	mov	r1, r3
 80008e4:	4827      	ldr	r0, [pc, #156]	; (8000984 <MX_TIM1_Init+0x120>)
 80008e6:	f006 fd19 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fc1c 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2360      	movs	r3, #96	; 0x60
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000914:	2204      	movs	r2, #4
 8000916:	4619      	mov	r1, r3
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_TIM1_Init+0x120>)
 800091a:	f006 f817 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000924:	f000 fc02 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800094e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_TIM1_Init+0x120>)
 8000966:	f006 fd5b 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000970:	f000 fbdc 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <MX_TIM1_Init+0x120>)
 8000976:	f000 fe17 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 800097a:	bf00      	nop
 800097c:	3760      	adds	r7, #96	; 0x60
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200002fc 	.word	0x200002fc
 8000988:	40012c00 	.word	0x40012c00

0800098c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009d8:	481d      	ldr	r0, [pc, #116]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009da:	f005 fbac 	bl	8006136 <HAL_TIM_PWM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 fba2 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <MX_TIM2_Init+0xc4>)
 80009f8:	f006 fc90 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a02:	f000 fb93 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	; 0x60
 8000a08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_TIM2_Init+0xc4>)
 8000a1e:	f005 ff95 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a28:	f000 fb80 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	220c      	movs	r2, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM2_Init+0xc4>)
 8000a34:	f005 ff8a 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a3e:	f000 fb75 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM2_Init+0xc4>)
 8000a44:	f000 fdb0 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000348 	.word	0x20000348

08000a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2224      	movs	r2, #36	; 0x24
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00b fa1c 	bl	800bea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_TIM3_Init+0xa8>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000ac4:	f005 fc8e 	bl	80063e4 <HAL_TIM_Encoder_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ace:	f000 fb2d 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_TIM3_Init+0xa4>)
 8000ae0:	f006 fc1c 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000aea:	f000 fb1f 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000394 	.word	0x20000394
 8000afc:	40000400 	.word	0x40000400

08000b00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2224      	movs	r2, #36	; 0x24
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b f9c6 	bl	800bea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <MX_TIM4_Init+0xa8>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b70:	f005 fc38 	bl	80063e4 <HAL_TIM_Encoder_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b7a:	f000 fad7 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b8c:	f006 fbc6 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b96:	f000 fac9 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200003e0 	.word	0x200003e0
 8000ba8:	40000800 	.word	0x40000800

08000bac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MX_TIM6_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bc4:	2214      	movs	r2, #20
 8000bc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bde:	f005 fa53 	bl	8006088 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000be8:	f000 faa0 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bec:	2320      	movs	r3, #32
 8000bee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_TIM6_Init+0x64>)
 8000bfa:	f006 fb8f 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 fa92 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000042c 	.word	0x2000042c
 8000c14:	40001000 	.word	0x40001000

08000c18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2224      	movs	r2, #36	; 0x24
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00b f93a 	bl	800bea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c38:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <MX_TIM8_Init+0xb0>)
 8000c3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000c8e:	f005 fba9 	bl	80063e4 <HAL_TIM_Encoder_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c98:	f000 fa48 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM8_Init+0xac>)
 8000cae:	f006 fb35 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000cb8:	f000 fa38 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3730      	adds	r7, #48	; 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000478 	.word	0x20000478
 8000cc8:	40013400 	.word	0x40013400

08000ccc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b098      	sub	sp, #96	; 0x60
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2234      	movs	r2, #52	; 0x34
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00b f8d1 	bl	800bea0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfe:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d00:	4a34      	ldr	r2, [pc, #208]	; (8000dd4 <MX_TIM15_Init+0x108>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 45;
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d06:	222d      	movs	r2, #45	; 0x2d
 8000d08:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d2a:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d2c:	f005 fa03 	bl	8006136 <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 f9f9 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d46:	4619      	mov	r1, r3
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d4a:	f006 fae7 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f000 f9ea 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	; 0x60
 8000d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d64:	2300      	movs	r3, #0
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d78:	2204      	movs	r2, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000d7e:	f005 fde5 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000d88:	f000 f9d0 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000db4:	f006 fb34 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000dbe:	f000 f9b5 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM15_Init+0x104>)
 8000dc4:	f000 fbf0 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3760      	adds	r7, #96	; 0x60
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200004c4 	.word	0x200004c4
 8000dd4:	40014000 	.word	0x40014000

08000dd8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2234      	movs	r2, #52	; 0x34
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00b f851 	bl	800bea0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e00:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <MX_TIM16_Init+0xf0>)
 8000e02:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 45;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e06:	222d      	movs	r2, #45	; 0x2d
 8000e08:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e2a:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e2c:	f005 f92c 	bl	8006088 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000e36:	f000 f979 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e3a:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e3c:	f005 f97b 	bl	8006136 <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000e46:	f000 f971 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4a:	2360      	movs	r3, #96	; 0x60
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000e70:	f005 fd6c 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000e7a:	f000 f957 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000ea6:	f006 fabb 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000eb0:	f000 f93c 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_TIM16_Init+0xec>)
 8000eb6:	f000 fb77 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000510 	.word	0x20000510
 8000ec8:	40014400 	.word	0x40014400

08000ecc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	; 0x50
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2234      	movs	r2, #52	; 0x34
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00a ffd7 	bl	800bea0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000ef4:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <MX_TIM17_Init+0xf0>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 45;
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000efa:	222d      	movs	r2, #45	; 0x2d
 8000efc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f1e:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f20:	f005 f8b2 	bl	8006088 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000f2a:	f000 f8ff 	bl	800112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f2e:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f30:	f005 f901 	bl	8006136 <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000f3a:	f000 f8f7 	bl	800112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2360      	movs	r3, #96	; 0x60
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f64:	f005 fcf2 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000f6e:	f000 f8dd 	bl	800112c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000f9a:	f006 fa41 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000fa4:	f000 f8c2 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM17_Init+0xec>)
 8000faa:	f000 fafd 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000055c 	.word	0x2000055c
 8000fbc:	40014800 	.word	0x40014800

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_DMA_Init+0x50>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <MX_DMA_Init+0x50>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_DMA_Init+0x50>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x50>)
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x50>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6493      	str	r3, [r2, #72]	; 0x48
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x50>)
 8000fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200b      	movs	r0, #11
 8000ffc:	f001 fdc7 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001000:	200b      	movs	r0, #11
 8001002:	f001 fdde 	bl	8002bc2 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <MX_GPIO_Init+0x10c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a36      	ldr	r2, [pc, #216]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <MX_GPIO_Init+0x10c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a30      	ldr	r2, [pc, #192]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_GPIO_Init+0x10c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_B1_D3_Pin|LED_B2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2103      	movs	r1, #3
 8001076:	482b      	ldr	r0, [pc, #172]	; (8001124 <MX_GPIO_Init+0x110>)
 8001078:	f002 f9e4 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOT2_suund_Pin|MOT3_suund_Pin|LED_R1_D1_Pin|MOT1_suund_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f002 f9dd 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_SLEEP_Pin|MOT_OFF_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2109      	movs	r1, #9
 800108e:	4826      	ldr	r0, [pc, #152]	; (8001128 <MX_GPIO_Init+0x114>)
 8001090:	f002 f9d8 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_B1_D3_Pin LED_B2_Pin */
  GPIO_InitStruct.Pin = LED_B1_D3_Pin|LED_B2_Pin;
 8001094:	2303      	movs	r3, #3
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	481e      	ldr	r0, [pc, #120]	; (8001124 <MX_GPIO_Init+0x110>)
 80010ac:	f002 f848 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT2_suund_Pin MOT3_suund_Pin LED_R1_D1_Pin MOT1_suund_Pin */
  GPIO_InitStruct.Pin = MOT2_suund_Pin|MOT3_suund_Pin|LED_R1_D1_Pin|MOT1_suund_Pin;
 80010b0:	f44f 738b 	mov.w	r3, #278	; 0x116
 80010b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f002 f838 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R2_D2_Pin */
  GPIO_InitStruct.Pin = LED_R2_D2_Pin;
 80010d0:	2320      	movs	r3, #32
 80010d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_R2_D2_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f002 f82a 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_SLEEP_Pin MOT_OFF_Pin */
  GPIO_InitStruct.Pin = MOT_SLEEP_Pin|MOT_OFF_Pin;
 80010ec:	2309      	movs	r3, #9
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_GPIO_Init+0x114>)
 8001104:	f002 f81c 	bl	8003140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2017      	movs	r0, #23
 800110e:	f001 fd3e 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001112:	2017      	movs	r0, #23
 8001114:	f001 fd55 	bl	8002bc2 <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	48001400 	.word	0x48001400
 8001128:	48000400 	.word	0x48000400

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x44>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x44>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6613      	str	r3, [r2, #96]	; 0x60
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_MspInit+0x44>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_MspInit+0x44>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6593      	str	r3, [r2, #88]	; 0x58
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800116e:	f003 ff7b 	bl	8005068 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000

08001180 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2244      	movs	r2, #68	; 0x44
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00a fe85 	bl	800bea0 <memset>
  if(hadc->Instance==ADC1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d146      	bne.n	800122e <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fc65 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80011bc:	f7ff ffb6 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_ADC_MspInit+0xb8>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_ADC_MspInit+0xb8>)
 80011c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_ADC_MspInit+0xb8>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_ADC_MspInit+0xbc>)
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_ADC_MspInit+0xc0>)
 80011dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_ADC_MspInit+0xbc>)
 80011e0:	2205      	movs	r2, #5
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_ADC_MspInit+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_ADC_MspInit+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_ADC_MspInit+0xbc>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_ADC_MspInit+0xbc>)
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_ADC_MspInit+0xbc>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_ADC_MspInit+0xbc>)
 8001206:	2220      	movs	r2, #32
 8001208:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_ADC_MspInit+0xbc>)
 800120c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001212:	480a      	ldr	r0, [pc, #40]	; (800123c <HAL_ADC_MspInit+0xbc>)
 8001214:	f001 fdda 	bl	8002dcc <HAL_DMA_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800121e:	f7ff ff85 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <HAL_ADC_MspInit+0xbc>)
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_ADC_MspInit+0xbc>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3750      	adds	r7, #80	; 0x50
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	20000250 	.word	0x20000250
 8001240:	40020008 	.word	0x40020008

08001244 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_CRC_MspInit+0x38>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_CRC_MspInit+0x3c>)
 8001258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_CRC_MspInit+0x3c>)
 800125c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001260:	6493      	str	r3, [r2, #72]	; 0x48
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_CRC_MspInit+0x3c>)
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023000 	.word	0x40023000
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2244      	movs	r2, #68	; 0x44
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f00a fe03 	bl	800bea0 <memset>
  if(hrtc->Instance==RTC)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <HAL_RTC_MspInit+0x70>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d123      	bne.n	80012ec <HAL_RTC_MspInit+0x68>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fbe3 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012c0:	f7ff ff34 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_RTC_MspInit+0x74>)
 80012c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_RTC_MspInit+0x74>)
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_RTC_MspInit+0x74>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_RTC_MspInit+0x74>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6593      	str	r3, [r2, #88]	; 0x58
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RTC_MspInit+0x74>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	3750      	adds	r7, #80	; 0x50
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40002800 	.word	0x40002800
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_TIM_PWM_MspInit+0x80>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10c      	bne.n	8001328 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6613      	str	r3, [r2, #96]	; 0x60
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001326:	e022      	b.n	800136e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d10c      	bne.n	800134c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
}
 800134a:	e010      	b.n	800136e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <HAL_TIM_PWM_MspInit+0x88>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10b      	bne.n	800136e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6613      	str	r3, [r2, #96]	; 0x60
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_TIM_PWM_MspInit+0x84>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40012c00 	.word	0x40012c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40014000 	.word	0x40014000

08001388 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x170>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d128      	bne.n	80013fc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	4b54      	ldr	r3, [pc, #336]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a53      	ldr	r2, [pc, #332]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOT1_ENC_1_Pin|MOT1_ENC_2_Pin;
 80013da:	2330      	movs	r3, #48	; 0x30
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ea:	2302      	movs	r3, #2
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	4842      	ldr	r0, [pc, #264]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013f6:	f001 fea3 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80013fa:	e079      	b.n	80014f0 <HAL_TIM_Encoder_MspInit+0x168>
  else if(htim_encoder->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d128      	bne.n	8001458 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6593      	str	r3, [r2, #88]	; 0x58
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a36      	ldr	r2, [pc, #216]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOT2_ENC_1_Pin|MOT2_ENC_2_Pin;
 8001436:	23c0      	movs	r3, #192	; 0xc0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001446:	2302      	movs	r3, #2
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	482b      	ldr	r0, [pc, #172]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001452:	f001 fe75 	bl	8003140 <HAL_GPIO_Init>
}
 8001456:	e04b      	b.n	80014f0 <HAL_TIM_Encoder_MspInit+0x168>
  else if(htim_encoder->Instance==TIM8)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2a      	ldr	r2, [pc, #168]	; (8001508 <HAL_TIM_Encoder_MspInit+0x180>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d146      	bne.n	80014f0 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800146c:	6613      	str	r3, [r2, #96]	; 0x60
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOT3_ENC_1_Pin;
 80014aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80014bc:	2302      	movs	r3, #2
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOT3_ENC_1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f001 fe39 	bl	8003140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT3_ENC_2_Pin;
 80014ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80014e0:	230a      	movs	r3, #10
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOT3_ENC_2_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80014ec:	f001 fe28 	bl	8003140 <HAL_GPIO_Init>
}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000400 	.word	0x48000400
 8001504:	40000800 	.word	0x40000800
 8001508:	40013400 	.word	0x40013400

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <HAL_TIM_Base_MspInit+0x8c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d114      	bne.n	8001548 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2036      	movs	r0, #54	; 0x36
 800153c:	f001 fb27 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001540:	2036      	movs	r0, #54	; 0x36
 8001542:	f001 fb3e 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001546:	e022      	b.n	800158e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_TIM_Base_MspInit+0x94>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10c      	bne.n	800156c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
}
 800156a:	e010      	b.n	800158e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_TIM_Base_MspInit+0x98>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10b      	bne.n	800158e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6613      	str	r3, [r2, #96]	; 0x60
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_TIM_Base_MspInit+0x90>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40001000 	.word	0x40001000
 800159c:	40021000 	.word	0x40021000
 80015a0:	40014400 	.word	0x40014400
 80015a4:	40014800 	.word	0x40014800

080015a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a61      	ldr	r2, [pc, #388]	; (800174c <HAL_TIM_MspPostInit+0x1a4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d11e      	bne.n	8001608 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b61      	ldr	r3, [pc, #388]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a60      	ldr	r2, [pc, #384]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOT1_PWM_2_Pin;
 80015e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015f4:	2306      	movs	r3, #6
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOT1_PWM_2_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f001 fd9d 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001606:	e09c      	b.n	8001742 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d12f      	bne.n	8001672 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOT2_PWM_1_Pin;
 800162a:	2301      	movs	r3, #1
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800163a:	2301      	movs	r3, #1
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOT2_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fd7a 	bl	8003140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT3_PWM_2_Pin;
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800165e:	230a      	movs	r3, #10
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOT3_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166c:	f001 fd68 	bl	8003140 <HAL_GPIO_Init>
}
 8001670:	e067      	b.n	8001742 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a37      	ldr	r2, [pc, #220]	; (8001754 <HAL_TIM_MspPostInit+0x1ac>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d11d      	bne.n	80016b8 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	4a33      	ldr	r2, [pc, #204]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TRW_PWM_1_Pin;
 8001694:	2308      	movs	r3, #8
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80016a4:	2309      	movs	r3, #9
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRW_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f001 fd45 	bl	8003140 <HAL_GPIO_Init>
}
 80016b6:	e044      	b.n	8001742 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a26      	ldr	r2, [pc, #152]	; (8001758 <HAL_TIM_MspPostInit+0x1b0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d11d      	bne.n	80016fe <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HOLD_servo_PWM_Pin;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80016ea:	2301      	movs	r3, #1
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HOLD_servo_PWM_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f8:	f001 fd22 	bl	8003140 <HAL_GPIO_Init>
}
 80016fc:	e021      	b.n	8001742 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_TIM_MspPostInit+0x1b4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d11c      	bne.n	8001742 <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_TIM_MspPostInit+0x1a8>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AIM_servo_PWM_Pin;
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AIM_servo_PWM_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f001 fcff 	bl	8003140 <HAL_GPIO_Init>
}
 8001742:	bf00      	nop
 8001744:	3730      	adds	r7, #48	; 0x30
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40012c00 	.word	0x40012c00
 8001750:	40021000 	.word	0x40021000
 8001754:	40014000 	.word	0x40014000
 8001758:	40014400 	.word	0x40014400
 800175c:	40014800 	.word	0x40014800

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f8b6 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ba:	f001 fbaf 	bl	8002f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000250 	.word	0x20000250

080017c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USB_LP_IRQHandler+0x10>)
 80017ce:	f001 ff7b 	bl	80036c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20001260 	.word	0x20001260

080017dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LED_R2_D2_Pin);
 80017e0:	2020      	movs	r0, #32
 80017e2:	f001 fe47 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <TIM6_DAC_IRQHandler+0x10>)
 80017f2:	f004 ff2b 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000042c 	.word	0x2000042c

08001800 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001826:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopForever+0x6>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopForever+0xa>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopForever+0xe>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopForever+0x16>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f00a faf3 	bl	800be3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001856:	f7fe fe3f 	bl	80004d8 <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   r0, =_estack
 800185c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001868:	0800bf28 	.word	0x0800bf28
  ldr r2, =_sbss
 800186c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001870:	20001774 	.word	0x20001774

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>

08001876 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f001 f979 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f80e 	bl	80018a8 <HAL_InitTick>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e001      	b.n	800189c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001898:	f7ff fc4e 	bl	8001138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800189c:	79fb      	ldrb	r3, [r7, #7]

}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_InitTick+0x68>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d022      	beq.n	8001902 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_InitTick+0x6c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_InitTick+0x68>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 f984 	bl	8002bde <HAL_SYSTICK_Config>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10f      	bne.n	80018fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	d809      	bhi.n	80018f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e2:	2200      	movs	r2, #0
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	f001 f950 	bl	8002b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_InitTick+0x70>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e007      	b.n	8001906 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e004      	b.n	8001906 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000004c 	.word	0x2000004c
 8001914:	20000044 	.word	0x20000044
 8001918:	20000048 	.word	0x20000048

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4413      	add	r3, r2
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_IncTick+0x1c>)
 800192c:	6013      	str	r3, [r2, #0]
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	200005b8 	.word	0x200005b8
 800193c:	2000004c 	.word	0x2000004c

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200005b8 	.word	0x200005b8

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d004      	beq.n	800197c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_Delay+0x40>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197c:	bf00      	nop
 800197e:	f7ff ffdf 	bl	8001940 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	429a      	cmp	r2, r3
 800198c:	d8f7      	bhi.n	800197e <HAL_Delay+0x26>
  {
  }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000004c 	.word	0x2000004c

0800199c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <LL_ADC_SetOffset+0x44>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4313      	orrs	r3, r2
 8001a34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	03fff000 	.word	0x03fff000

08001a4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3360      	adds	r3, #96	; 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3360      	adds	r3, #96	; 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3360      	adds	r3, #96	; 0x60
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3360      	adds	r3, #96	; 0x60
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	615a      	str	r2, [r3, #20]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3330      	adds	r3, #48	; 0x30
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	211f      	movs	r1, #31
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 011f 	and.w	r1, r3, #31
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b8c:	bf00      	nop
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0e5b      	lsrs	r3, r3, #25
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	0d1b      	lsrs	r3, r3, #20
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	2107      	movs	r1, #7
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0d1b      	lsrs	r3, r3, #20
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d10a      	bne.n	8001c1a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001c18:	e00a      	b.n	8001c30 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	407f0000 	.word	0x407f0000

08001c40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6093      	str	r3, [r2, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c78:	d101      	bne.n	8001c7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_IsEnabled+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_IsEnabled+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d101      	bne.n	8001d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d101      	bne.n	8001d40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e177      	b.n	800205a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fa01 	bl	8001180 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff67 	bl	8001c64 <LL_ADC_IsDeepPowerDownEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff4d 	bl	8001c40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff82 	bl	8001cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff66 	bl	8001c8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc0:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <HAL_ADC_Init+0x2e4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	4a9c      	ldr	r2, [pc, #624]	; (8002038 <HAL_ADC_Init+0x2e8>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff64 	bl	8001cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	f043 0210 	orr.w	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff75 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 8001e18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8110 	bne.w	8002048 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 810c 	bne.w	8002048 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff49 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d111      	bne.n	8001e74 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e54:	f7ff ff42 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4878      	ldr	r0, [pc, #480]	; (800203c <HAL_ADC_Init+0x2ec>)
 8001e5c:	f7ff ff3e 	bl	8001cdc <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4323      	orrs	r3, r4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4874      	ldr	r0, [pc, #464]	; (8002040 <HAL_ADC_Init+0x2f0>)
 8001e70:	f7ff fd94 	bl	800199c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7f5b      	ldrb	r3, [r3, #29]
 8001e78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d106      	bne.n	8001eb0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	045b      	lsls	r3, r3, #17
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_ADC_Init+0x2f4>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff01 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 8001f00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff0e 	bl	8001d28 <LL_ADC_INJ_IsConversionOngoing>
 8001f0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d16d      	bne.n	8001ff0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d16a      	bne.n	8001ff0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f1e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6911      	ldr	r1, [r2, #16]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f7a:	e013      	b.n	8001fa4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d118      	bne.n	8001fe0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f023 010f 	bic.w	r1, r3, #15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	e007      	b.n	8002022 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020f 	bic.w	r2, r2, #15
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
 8002032:	e011      	b.n	8002058 <HAL_ADC_Init+0x308>
 8002034:	20000044 	.word	0x20000044
 8002038:	053e2d63 	.word	0x053e2d63
 800203c:	50000100 	.word	0x50000100
 8002040:	50000300 	.word	0x50000300
 8002044:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002058:	7ffb      	ldrb	r3, [r7, #31]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	bf00      	nop

08002064 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b6      	sub	sp, #216	; 0xd8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x22>
 8002082:	2302      	movs	r3, #2
 8002084:	e3c8      	b.n	8002818 <HAL_ADC_ConfigChannel+0x7b4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe35 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 83ad 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f7ff fd47 	bl	8001b40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fe23 	bl	8001d02 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe2f 	bl	8001d28 <LL_ADC_INJ_IsConversionOngoing>
 80020ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 81d9 	bne.w	800248a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 81d4 	bne.w	800248a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ea:	d10f      	bne.n	800210c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff fd4e 	bl	8001b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fd08 	bl	8001b1a <LL_ADC_SetSamplingTimeCommonConfig>
 800210a:	e00e      	b.n	800212a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	461a      	mov	r2, r3
 800211a:	f7ff fd3d 	bl	8001b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fcf8 	bl	8001b1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d022      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800215c:	f7ff fc52 	bl	8001a04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fc9e 	bl	8001aae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7f1b      	ldrb	r3, [r3, #28]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x124>
 8002182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002186:	e000      	b.n	800218a <HAL_ADC_ConfigChannel+0x126>
 8002188:	2300      	movs	r3, #0
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fcaa 	bl	8001ae4 <LL_ADC_SetOffsetSaturation>
 8002190:	e17b      	b.n	800248a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fc57 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_ADC_ConfigChannel+0x15a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fc4c 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	e01e      	b.n	80021fc <HAL_ADC_ConfigChannel+0x198>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fc41 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e004      	b.n	80021fa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80021f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1b0>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	e018      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1e2>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002230:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e004      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800223c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc10 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fbf4 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x220>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fbe9 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 021f 	and.w	r2, r3, #31
 8002282:	e01e      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x25e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fbde 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e004      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80022b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_ConfigChannel+0x276>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	e018      	b.n	800230c <HAL_ADC_ConfigChannel+0x2a8>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80022fe:	2320      	movs	r3, #32
 8002300:	e004      	b.n	800230c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fbad 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2102      	movs	r1, #2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb91 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2e6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb86 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	e01e      	b.n	8002388 <HAL_ADC_ConfigChannel+0x324>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb7b 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800236c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800237c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x33c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	e016      	b.n	80023ce <HAL_ADC_ConfigChannel+0x36a>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e004      	b.n	80023ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb4c 	bl	8001a78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2103      	movs	r1, #3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fb30 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x3a8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2103      	movs	r1, #3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb25 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	e017      	b.n	800243c <HAL_ADC_ConfigChannel+0x3d8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2103      	movs	r1, #3
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fb1a 	bl	8001a4c <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002426:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e003      	b.n	800243a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x3f0>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	e011      	b.n	8002478 <HAL_ADC_ConfigChannel+0x414>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff faf7 	bl	8001a78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fc24 	bl	8001cdc <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 8140 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f7ff fba1 	bl	8001bf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a8f      	ldr	r2, [pc, #572]	; (80026f0 <HAL_ADC_ConfigChannel+0x68c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	f040 8131 	bne.w	800271c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x47e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	bf94      	ite	ls
 80024da:	2301      	movls	r3, #1
 80024dc:	2300      	movhi	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e019      	b.n	8002516 <HAL_ADC_ConfigChannel+0x4b2>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80024fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b09      	cmp	r3, #9
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002516:	2b00      	cmp	r3, #0
 8002518:	d079      	beq.n	800260e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x4d2>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	069b      	lsls	r3, r3, #26
 8002530:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002534:	e015      	b.n	8002562 <HAL_ADC_ConfigChannel+0x4fe>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e003      	b.n	800255a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3301      	adds	r3, #1
 800255c:	069b      	lsls	r3, r3, #26
 800255e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x51e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	e017      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x54e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800259a:	2320      	movs	r3, #32
 800259c:	e003      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800259e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x574>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 021f 	and.w	r2, r3, #31
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	051b      	lsls	r3, r3, #20
 80025d6:	e018      	b.n	800260a <HAL_ADC_ConfigChannel+0x5a6>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260a:	430b      	orrs	r3, r1
 800260c:	e081      	b.n	8002712 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_ADC_ConfigChannel+0x5c6>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	3301      	adds	r3, #1
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002628:	e015      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5f2>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e003      	b.n	800264e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3301      	adds	r3, #1
 8002650:	069b      	lsls	r3, r3, #26
 8002652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x612>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	e017      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x642>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	61fb      	str	r3, [r7, #28]
  return result;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2101      	movs	r1, #1
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	ea42 0103 	orr.w	r1, r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x66e>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d0:	e01e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x6ac>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	613b      	str	r3, [r7, #16]
  return result;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e006      	b.n	80026fc <HAL_ADC_ConfigChannel+0x698>
 80026ee:	bf00      	nop
 80026f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	051b      	lsls	r3, r3, #20
 800270c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002710:	430b      	orrs	r3, r1
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	4619      	mov	r1, r3
 8002718:	f7ff fa3e 	bl	8001b98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_ADC_ConfigChannel+0x7bc>)
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d071      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	483e      	ldr	r0, [pc, #248]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 800272a:	f7ff f95d 	bl	80019e8 <LL_ADC_GetCommonPathInternalCh>
 800272e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <HAL_ADC_ConfigChannel+0x7c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x6e2>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a3a      	ldr	r2, [pc, #232]	; (800282c <HAL_ADC_ConfigChannel+0x7c8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d127      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800274a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d121      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275a:	d157      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002764:	4619      	mov	r1, r3
 8002766:	482f      	ldr	r0, [pc, #188]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 8002768:	f7ff f92b 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_ADC_ConfigChannel+0x7cc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_ADC_ConfigChannel+0x7d0>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002786:	e002      	b.n	800278e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	e03a      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_ADC_ConfigChannel+0x7d4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d113      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x764>
 80027a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02a      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	4619      	mov	r1, r3
 80027c0:	4818      	ldr	r0, [pc, #96]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 80027c2:	f7ff f8fe 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c6:	e021      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11c      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d011      	beq.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f0:	4619      	mov	r1, r3
 80027f2:	480c      	ldr	r0, [pc, #48]	; (8002824 <HAL_ADC_ConfigChannel+0x7c0>)
 80027f4:	f7ff f8e5 	bl	80019c2 <LL_ADC_SetCommonPathInternalCh>
 80027f8:	e008      	b.n	800280c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002814:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002818:	4618      	mov	r0, r3
 800281a:	37d8      	adds	r7, #216	; 0xd8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	80080000 	.word	0x80080000
 8002824:	50000300 	.word	0x50000300
 8002828:	c3210000 	.word	0xc3210000
 800282c:	90c00010 	.word	0x90c00010
 8002830:	20000044 	.word	0x20000044
 8002834:	053e2d63 	.word	0x053e2d63
 8002838:	c7520000 	.word	0xc7520000
 800283c:	50000100 	.word	0x50000100
 8002840:	cb840000 	.word	0xcb840000

08002844 <LL_ADC_IsEnabled>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <LL_ADC_IsEnabled+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_ADC_IsEnabled+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_IsConversionOngoing>:
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d101      	bne.n	8002882 <LL_ADC_REG_IsConversionOngoing+0x18>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b0a1      	sub	sp, #132	; 0x84
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e08b      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80028b6:	2300      	movs	r3, #0
 80028b8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80028ba:	2300      	movs	r3, #0
 80028bc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c6:	d102      	bne.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	e001      	b.n	80028d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e06a      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ffb9 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 80028f8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ffb3 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d14c      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800290a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290c:	2b00      	cmp	r3, #0
 800290e:	d149      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002912:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d028      	beq.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800291c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800292e:	035b      	lsls	r3, r3, #13
 8002930:	430b      	orrs	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002936:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800293c:	f7ff ff82 	bl	8002844 <LL_ADC_IsEnabled>
 8002940:	4604      	mov	r4, r0
 8002942:	4823      	ldr	r0, [pc, #140]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002944:	f7ff ff7e 	bl	8002844 <LL_ADC_IsEnabled>
 8002948:	4603      	mov	r3, r0
 800294a:	4323      	orrs	r3, r4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d133      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002958:	f023 030f 	bic.w	r3, r3, #15
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	6811      	ldr	r1, [r2, #0]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	430a      	orrs	r2, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296c:	e024      	b.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800296e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002978:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800297a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800297e:	f7ff ff61 	bl	8002844 <LL_ADC_IsEnabled>
 8002982:	4604      	mov	r4, r0
 8002984:	4812      	ldr	r0, [pc, #72]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002986:	f7ff ff5d 	bl	8002844 <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	4323      	orrs	r3, r4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d112      	bne.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800299a:	f023 030f 	bic.w	r3, r3, #15
 800299e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a2:	e009      	b.n	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029b6:	e000      	b.n	80029ba <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3784      	adds	r7, #132	; 0x84
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	50000100 	.word	0x50000100
 80029d4:	50000300 	.word	0x50000300

080029d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0a:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	60d3      	str	r3, [r2, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db0b      	blt.n	8002a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <__NVIC_EnableIRQ+0x38>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b44:	d301      	bcc.n	8002b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00f      	b.n	8002b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <SysTick_Config+0x40>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b52:	210f      	movs	r1, #15
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f7ff ff8e 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <SysTick_Config+0x40>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <SysTick_Config+0x40>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff29 	bl	80029d8 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9c:	f7ff ff40 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002ba0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff90 	bl	8002acc <NVIC_EncodePriority>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff5f 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff33 	bl	8002a3c <__NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffa4 	bl	8002b34 <SysTick_Config>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e054      	b.n	8002cb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7f5b      	ldrb	r3, [r3, #29]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fb12 	bl	8001244 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_CRC_Init+0xc4>)
 8002c34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0218 	bic.w	r2, r2, #24
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e00c      	b.n	8002c62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f834 	bl	8002cc0 <HAL_CRCEx_Polynomial_Set>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e028      	b.n	8002cb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	795b      	ldrb	r3, [r3, #5]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	e004      	b.n	8002c80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6912      	ldr	r2, [r2, #16]
 8002c7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	04c11db7 	.word	0x04c11db7

08002cc0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cd0:	231f      	movs	r3, #31
 8002cd2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002cd4:	bf00      	nop
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	613a      	str	r2, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b18      	cmp	r3, #24
 8002cf8:	d846      	bhi.n	8002d88 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d8f 	.word	0x08002d8f
 8002d04:	08002d89 	.word	0x08002d89
 8002d08:	08002d89 	.word	0x08002d89
 8002d0c:	08002d89 	.word	0x08002d89
 8002d10:	08002d89 	.word	0x08002d89
 8002d14:	08002d89 	.word	0x08002d89
 8002d18:	08002d89 	.word	0x08002d89
 8002d1c:	08002d89 	.word	0x08002d89
 8002d20:	08002d7d 	.word	0x08002d7d
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002d89 	.word	0x08002d89
 8002d2c:	08002d89 	.word	0x08002d89
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d89 	.word	0x08002d89
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002d89 	.word	0x08002d89
 8002d40:	08002d71 	.word	0x08002d71
 8002d44:	08002d89 	.word	0x08002d89
 8002d48:	08002d89 	.word	0x08002d89
 8002d4c:	08002d89 	.word	0x08002d89
 8002d50:	08002d89 	.word	0x08002d89
 8002d54:	08002d89 	.word	0x08002d89
 8002d58:	08002d89 	.word	0x08002d89
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08002d65 	.word	0x08002d65
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d913      	bls.n	8002d92 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d6e:	e010      	b.n	8002d92 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	d90f      	bls.n	8002d96 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d7a:	e00c      	b.n	8002d96 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	d90b      	bls.n	8002d9a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002d86:	e008      	b.n	8002d9a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8c:	e006      	b.n	8002d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d9a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 0118 	bic.w	r1, r3, #24
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e08d      	b.n	8002efa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_DMA_Init+0x138>)
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d80f      	bhi.n	8002e0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_DMA_Init+0x13c>)
 8002df2:	4413      	add	r3, r2
 8002df4:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <HAL_DMA_Init+0x140>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <HAL_DMA_Init+0x144>)
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
 8002e08:	e00e      	b.n	8002e28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <HAL_DMA_Init+0x148>)
 8002e12:	4413      	add	r3, r2
 8002e14:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <HAL_DMA_Init+0x140>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <HAL_DMA_Init+0x14c>)
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f8fe 	bl	800307c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e88:	d102      	bne.n	8002e90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ea4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_DMA_Init+0x104>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d80c      	bhi.n	8002ed0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f91e 	bl	80030f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	e008      	b.n	8002ee2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40020407 	.word	0x40020407
 8002f08:	bffdfff8 	.word	0xbffdfff8
 8002f0c:	cccccccd 	.word	0xcccccccd
 8002f10:	40020000 	.word	0x40020000
 8002f14:	bffdfbf8 	.word	0xbffdfbf8
 8002f18:	40020400 	.word	0x40020400

08002f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d026      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x7a>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d021      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d071      	beq.n	8003070 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f94:	e06c      	b.n	8003070 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02e      	beq.n	8003008 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d029      	beq.n	8003008 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 020a 	bic.w	r2, r2, #10
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d038      	beq.n	8003070 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003006:	e033      	b.n	8003070 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2208      	movs	r2, #8
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d02a      	beq.n	8003072 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d025      	beq.n	8003072 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 020e 	bic.w	r2, r2, #14
 8003034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f003 021f 	and.w	r2, r3, #31
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	2b00      	cmp	r3, #0
 8003066:	d004      	beq.n	8003072 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003070:	bf00      	nop
 8003072:	bf00      	nop
}
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d802      	bhi.n	8003096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e001      	b.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003098:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3b08      	subs	r3, #8
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2201      	movs	r2, #1
 80030d0:	409a      	lsls	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40020407 	.word	0x40020407
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020820 	.word	0x40020820
 80030f0:	cccccccd 	.word	0xcccccccd
 80030f4:	40020880 	.word	0x40020880

080030f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800311a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	1000823f 	.word	0x1000823f
 800313c:	40020940 	.word	0x40020940

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800314e:	e15a      	b.n	8003406 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 814c 	beq.w	8003400 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d005      	beq.n	8003180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800317c:	2b02      	cmp	r3, #2
 800317e:	d130      	bne.n	80031e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b6:	2201      	movs	r2, #1
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d017      	beq.n	800321e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d123      	bne.n	8003272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	6939      	ldr	r1, [r7, #16]
 800326e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0203 	and.w	r2, r3, #3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80a6 	beq.w	8003400 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b4:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <HAL_GPIO_Init+0x2e4>)
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_GPIO_Init+0x2e4>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6613      	str	r3, [r2, #96]	; 0x60
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_GPIO_Init+0x2e4>)
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <HAL_GPIO_Init+0x2e8>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	220f      	movs	r2, #15
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032f6:	d01f      	beq.n	8003338 <HAL_GPIO_Init+0x1f8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x2ec>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d019      	beq.n	8003334 <HAL_GPIO_Init+0x1f4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <HAL_GPIO_Init+0x2f0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_GPIO_Init+0x1f0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_GPIO_Init+0x2f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00d      	beq.n	800332c <HAL_GPIO_Init+0x1ec>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a49      	ldr	r2, [pc, #292]	; (8003438 <HAL_GPIO_Init+0x2f8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <HAL_GPIO_Init+0x1e8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a48      	ldr	r2, [pc, #288]	; (800343c <HAL_GPIO_Init+0x2fc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_GPIO_Init+0x1e4>
 8003320:	2305      	movs	r3, #5
 8003322:	e00a      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003324:	2306      	movs	r3, #6
 8003326:	e008      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003328:	2304      	movs	r3, #4
 800332a:	e006      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 800332c:	2303      	movs	r3, #3
 800332e:	e004      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003330:	2302      	movs	r3, #2
 8003332:	e002      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003338:	2300      	movs	r3, #0
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	f002 0203 	and.w	r2, r2, #3
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	4093      	lsls	r3, r2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800334a:	4937      	ldr	r1, [pc, #220]	; (8003428 <HAL_GPIO_Init+0x2e8>)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_GPIO_Init+0x300>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800337c:	4a30      	ldr	r2, [pc, #192]	; (8003440 <HAL_GPIO_Init+0x300>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_GPIO_Init+0x300>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a6:	4a26      	ldr	r2, [pc, #152]	; (8003440 <HAL_GPIO_Init+0x300>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_GPIO_Init+0x300>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033d0:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_GPIO_Init+0x300>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_GPIO_Init+0x300>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033fa:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_GPIO_Init+0x300>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f ae9d 	bne.w	8003150 <HAL_GPIO_Init+0x10>
  }
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40021000 	.word	0x40021000
 8003428:	40010000 	.word	0x40010000
 800342c:	48000400 	.word	0x48000400
 8003430:	48000800 	.word	0x48000800
 8003434:	48000c00 	.word	0x48000c00
 8003438:	48001000 	.word	0x48001000
 800343c:	48001400 	.word	0x48001400
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003460:	e002      	b.n	8003468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f806 	bl	80034a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	b08b      	sub	sp, #44	; 0x2c
 80034be:	af06      	add	r7, sp, #24
 80034c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0d7      	b.n	800367c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f008 f9a5 	bl	800b830 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 f891 	bl	800761a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e04c      	b.n	8003598 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3301      	adds	r3, #1
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	b298      	uxth	r0, r3
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	3336      	adds	r3, #54	; 0x36
 800353c:	4602      	mov	r2, r0
 800353e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	3303      	adds	r3, #3
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	3338      	adds	r3, #56	; 0x38
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	333c      	adds	r3, #60	; 0x3c
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	3340      	adds	r3, #64	; 0x40
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	3301      	adds	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3ad      	bcc.n	80034fe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e044      	b.n	8003632 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	3301      	adds	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d3b5      	bcc.n	80035a8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	687e      	ldr	r6, [r7, #4]
 8003644:	466d      	mov	r5, sp
 8003646:	f106 0410 	add.w	r4, r6, #16
 800364a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	602b      	str	r3, [r5, #0]
 8003652:	1d33      	adds	r3, r6, #4
 8003654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f003 fffa 	bl	8007650 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d102      	bne.n	800367a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f001 fc29 	bl	8004ecc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003684 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_PCD_Start+0x16>
 8003696:	2302      	movs	r3, #2
 8003698:	e012      	b.n	80036c0 <HAL_PCD_Start+0x3c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 ffa0 	bl	80075ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 f9b9 	bl	8009a28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f006 f9be 	bl	8009a56 <USB_ReadInterrupts>
 80036da:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fb26 	bl	8003d38 <PCD_EP_ISR_Handler>

    return;
 80036ec:	e110      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	b292      	uxth	r2, r2
 800370c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f008 f91e 	bl	800b952 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003716:	2100      	movs	r1, #0
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8fc 	bl	8003916 <HAL_PCD_SetAddress>

    return;
 800371e:	e0f7      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800373c:	b292      	uxth	r2, r2
 800373e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003742:	e0e5      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003760:	b292      	uxth	r2, r2
 8003762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003766:	e0d3      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d034      	beq.n	80037dc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0204 	bic.w	r2, r2, #4
 8003784:	b292      	uxth	r2, r2
 8003786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0208 	bic.w	r2, r2, #8
 800379c:	b292      	uxth	r2, r2
 800379e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037b4:	2100      	movs	r1, #0
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f008 fac0 	bl	800bd3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f008 f901 	bl	800b9c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d4:	b292      	uxth	r2, r2
 80037d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80037da:	e099      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d027      	beq.n	8003836 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0208 	orr.w	r2, r2, #8
 80037f8:	b292      	uxth	r2, r2
 80037fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003810:	b292      	uxth	r2, r2
 8003812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0204 	orr.w	r2, r2, #4
 8003828:	b292      	uxth	r2, r2
 800382a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f008 f8ae 	bl	800b990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003834:	e06c      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d040      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003852:	b292      	uxth	r2, r2
 8003854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d12b      	bne.n	80038ba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	b292      	uxth	r2, r2
 8003876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0208 	orr.w	r2, r2, #8
 800388c:	b292      	uxth	r2, r2
 800388e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038b0:	2101      	movs	r1, #1
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f008 fa42 	bl	800bd3c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80038b8:	e02a      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f008 f868 	bl	800b990 <HAL_PCD_SuspendCallback>
    return;
 80038c0:	e026      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00f      	beq.n	80038ec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038de:	b292      	uxth	r2, r2
 80038e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f008 f826 	bl	800b936 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038ea:	e011      	b.n	8003910 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	b292      	uxth	r2, r2
 800390a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800390e:	bf00      	nop
  }
}
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_PCD_SetAddress+0x1a>
 800392c:	2302      	movs	r3, #2
 800392e:	e013      	b.n	8003958 <HAL_PCD_SetAddress+0x42>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f006 f859 	bl	8009a00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	4608      	mov	r0, r1
 800396a:	4611      	mov	r1, r2
 800396c:	461a      	mov	r2, r3
 800396e:	4603      	mov	r3, r0
 8003970:	70fb      	strb	r3, [r7, #3]
 8003972:	460b      	mov	r3, r1
 8003974:	803b      	strh	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800397e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da0e      	bge.n	80039a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	705a      	strb	r2, [r3, #1]
 80039a2:	e00e      	b.n	80039c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ce:	883a      	ldrh	r2, [r7, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	78ba      	ldrb	r2, [r7, #2]
 80039d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039ec:	78bb      	ldrb	r3, [r7, #2]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_PCD_EP_Open+0xa6>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e00e      	b.n	8003a24 <HAL_PCD_EP_Open+0xc4>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 fe3d 	bl	8007694 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a22:	7afb      	ldrb	r3, [r7, #11]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0e      	bge.n	8003a5e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	705a      	strb	r2, [r3, #1]
 8003a5c:	e00e      	b.n	8003a7c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 0207 	and.w	r2, r3, #7
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_PCD_EP_Close+0x6a>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e00e      	b.n	8003ab4 <HAL_PCD_EP_Close+0x88>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 f989 	bl	8007dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003acc:	7afb      	ldrb	r3, [r7, #11]
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afc:	7afb      	ldrb	r3, [r7, #11]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6979      	ldr	r1, [r7, #20]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f004 fb3c 	bl	8008196 <USB_EPStartXfer>
 8003b1e:	e005      	b.n	8003b2c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6979      	ldr	r1, [r7, #20]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f004 fb35 	bl	8008196 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	f003 0207 	and.w	r2, r3, #7
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003b58:	681b      	ldr	r3, [r3, #0]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	460b      	mov	r3, r1
 8003b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb2:	7afb      	ldrb	r3, [r7, #11]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 fae1 	bl	8008196 <USB_EPStartXfer>
 8003bd4:	e005      	b.n	8003be2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f004 fada 	bl	8008196 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 0207 	and.w	r2, r3, #7
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d901      	bls.n	8003c0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e03e      	b.n	8003c88 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da0e      	bge.n	8003c30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	705a      	strb	r2, [r3, #1]
 8003c2e:	e00c      	b.n	8003c4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_PCD_EP_SetStall+0x7e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e00e      	b.n	8003c88 <HAL_PCD_EP_SetStall+0x9c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f005 fdc2 	bl	8009802 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d901      	bls.n	8003cae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e040      	b.n	8003d30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0e      	bge.n	8003cd4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	705a      	strb	r2, [r3, #1]
 8003cd2:	e00e      	b.n	8003cf2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 0207 	and.w	r2, r3, #7
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_PCD_EP_ClrStall+0x82>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e00e      	b.n	8003d30 <HAL_PCD_EP_ClrStall+0xa0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fdbf 	bl	80098a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b096      	sub	sp, #88	; 0x58
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d40:	e39c      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003d5c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 815e 	bne.w	8004022 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d150      	bne.n	8003e14 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	81fb      	strh	r3, [r7, #14]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	89fb      	ldrh	r3, [r7, #14]
 8003d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3328      	adds	r3, #40	; 0x28
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	441a      	add	r2, r3
 8003dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f007 fd94 	bl	800b902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 834a 	beq.w	800447c <PCD_EP_ISR_Handler+0x744>
 8003de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 8345 	bne.w	800447c <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b292      	uxth	r2, r2
 8003e06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e12:	e333      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d032      	beq.n	8003e98 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e58:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f005 fe44 	bl	8009afa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e7e:	4013      	ands	r3, r2
 8003e80:	823b      	strh	r3, [r7, #16]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	8a3a      	ldrh	r2, [r7, #16]
 8003e88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f007 fd09 	bl	800b8a8 <HAL_PCD_SetupStageCallback>
 8003e96:	e2f1      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e98:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f280 82ed 	bge.w	800447c <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003eae:	4013      	ands	r3, r2
 8003eb0:	83fb      	strh	r3, [r7, #30]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	8bfa      	ldrh	r2, [r7, #30]
 8003eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d019      	beq.n	8003f24 <PCD_EP_ISR_Handler+0x1ec>
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	6959      	ldr	r1, [r3, #20]
 8003f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f02:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f06:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f005 fdf6 	bl	8009afa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	441a      	add	r2, r3
 8003f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f007 fcd4 	bl	800b8cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 82a3 	bne.w	800447c <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f5c:	d918      	bls.n	8003f90 <PCD_EP_ISR_Handler+0x258>
 8003f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
 8003f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <PCD_EP_ISR_Handler+0x240>
 8003f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f74:	3b01      	subs	r3, #1
 8003f76:	647b      	str	r3, [r7, #68]	; 0x44
 8003f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	e029      	b.n	8003fe4 <PCD_EP_ISR_Handler+0x2ac>
 8003f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d112      	bne.n	8003fbe <PCD_EP_ISR_Handler+0x286>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	e012      	b.n	8003fe4 <PCD_EP_ISR_Handler+0x2ac>
 8003fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <PCD_EP_ISR_Handler+0x2a0>
 8003fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff4:	827b      	strh	r3, [r7, #18]
 8003ff6:	8a7b      	ldrh	r3, [r7, #18]
 8003ff8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ffc:	827b      	strh	r3, [r7, #18]
 8003ffe:	8a7b      	ldrh	r3, [r7, #18]
 8004000:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004004:	827b      	strh	r3, [r7, #18]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	8a7b      	ldrh	r3, [r7, #18]
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
 8004020:	e22c      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004036:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800403a:	2b00      	cmp	r3, #0
 800403c:	f280 80f6 	bge.w	800422c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29a      	uxth	r2, r3
 8004052:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004056:	4013      	ands	r3, r2
 8004058:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800406e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004072:	b292      	uxth	r2, r2
 8004074:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004076:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800408c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408e:	7b1b      	ldrb	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d123      	bne.n	80040dc <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80040bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 808e 	beq.w	80041e2 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040cc:	6959      	ldr	r1, [r3, #20]
 80040ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d0:	88da      	ldrh	r2, [r3, #6]
 80040d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040d6:	f005 fd10 	bl	8009afa <USB_ReadPMA>
 80040da:	e082      	b.n	80041e2 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040de:	78db      	ldrb	r3, [r3, #3]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d10a      	bne.n	80040fa <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80040e8:	461a      	mov	r2, r3
 80040ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f9d3 	bl	8004498 <HAL_PCD_EP_DB_Receive>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80040f8:	e073      	b.n	80041e2 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800412a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800413a:	b29b      	uxth	r3, r3
 800413c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004160:	b29b      	uxth	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	4413      	add	r3, r2
 8004172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800417c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004180:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02c      	beq.n	80041e2 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418e:	6959      	ldr	r1, [r3, #20]
 8004190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004192:	891a      	ldrh	r2, [r3, #8]
 8004194:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004198:	f005 fcaf 	bl	8009afa <USB_ReadPMA>
 800419c:	e021      	b.n	80041e2 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80041c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	6959      	ldr	r1, [r3, #20]
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	895a      	ldrh	r2, [r3, #10]
 80041da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041de:	f005 fc8c 	bl	8009afa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041ea:	441a      	add	r2, r3
 80041ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041f8:	441a      	add	r2, r3
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <PCD_EP_ISR_Handler+0x4da>
 8004206:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800420a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	429a      	cmp	r2, r3
 8004210:	d206      	bcs.n	8004220 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f007 fb57 	bl	800b8cc <HAL_PCD_DataOutStageCallback>
 800421e:	e005      	b.n	800422c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004226:	4618      	mov	r0, r3
 8004228:	f003 ffb5 	bl	8008196 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800422c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8121 	beq.w	800447c <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800423a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800428a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428c:	78db      	ldrb	r3, [r3, #3]
 800428e:	2b02      	cmp	r3, #2
 8004290:	f000 80a2 	beq.w	80043d8 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	7b1b      	ldrb	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8093 	beq.w	80043ca <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d046      	beq.n	800433e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d126      	bne.n	8004306 <PCD_EP_ISR_Handler+0x5ce>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	4413      	add	r3, r2
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00da      	lsls	r2, r3, #3
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	4413      	add	r3, r2
 80042da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	e061      	b.n	80043ca <PCD_EP_ISR_Handler+0x692>
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d15d      	bne.n	80043ca <PCD_EP_ISR_Handler+0x692>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	4413      	add	r3, r2
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	00da      	lsls	r2, r3, #3
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	4413      	add	r3, r2
 8004330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2200      	movs	r2, #0
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e045      	b.n	80043ca <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d126      	bne.n	800439a <PCD_EP_ISR_Handler+0x662>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	4413      	add	r3, r2
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
 8004364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	00da      	lsls	r2, r3, #3
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	4413      	add	r3, r2
 800436e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437e:	b29a      	uxth	r2, r3
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e017      	b.n	80043ca <PCD_EP_ISR_Handler+0x692>
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d113      	bne.n	80043ca <PCD_EP_ISR_Handler+0x692>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b0:	4413      	add	r3, r2
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	00da      	lsls	r2, r3, #3
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043bc:	4413      	add	r3, r2
 80043be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2200      	movs	r2, #0
 80043c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f007 fa96 	bl	800b902 <HAL_PCD_DataInStageCallback>
 80043d6:	e051      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d144      	bne.n	800446e <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004408:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800440c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004414:	429a      	cmp	r2, r3
 8004416:	d907      	bls.n	8004428 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8004418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004420:	1ad2      	subs	r2, r2, r3
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	619a      	str	r2, [r3, #24]
 8004426:	e002      	b.n	800442e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8004428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442a:	2200      	movs	r2, #0
 800442c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800442e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f007 fa60 	bl	800b902 <HAL_PCD_DataInStageCallback>
 8004442:	e01b      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800444c:	441a      	add	r2, r3
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800445a:	441a      	add	r2, r3
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004466:	4618      	mov	r0, r3
 8004468:	f003 fe95 	bl	8008196 <USB_EPStartXfer>
 800446c:	e006      	b.n	800447c <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800446e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004472:	461a      	mov	r2, r3
 8004474:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f917 	bl	80046aa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004484:	b29b      	uxth	r3, r3
 8004486:	b21b      	sxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	f6ff ac5a 	blt.w	8003d42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3758      	adds	r7, #88	; 0x58
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d07c      	beq.n	80045aa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	8b7b      	ldrh	r3, [r7, #26]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d306      	bcc.n	80044ee <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	8b7b      	ldrh	r3, [r7, #26]
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	619a      	str	r2, [r3, #24]
 80044ec:	e002      	b.n	80044f4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d123      	bne.n	8004544 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	833b      	strh	r3, [r7, #24]
 8004518:	8b3b      	ldrh	r3, [r7, #24]
 800451a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800451e:	833b      	strh	r3, [r7, #24]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	8b3b      	ldrh	r3, [r7, #24]
 8004530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	b29b      	uxth	r3, r3
 8004542:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01f      	beq.n	800458e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	82fb      	strh	r3, [r7, #22]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8afb      	ldrh	r3, [r7, #22]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800458e:	8b7b      	ldrh	r3, [r7, #26]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8085 	beq.w	80046a0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6959      	ldr	r1, [r3, #20]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	891a      	ldrh	r2, [r3, #8]
 80045a2:	8b7b      	ldrh	r3, [r7, #26]
 80045a4:	f005 faa9 	bl	8009afa <USB_ReadPMA>
 80045a8:	e07a      	b.n	80046a0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	8b7b      	ldrh	r3, [r7, #26]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d306      	bcc.n	80045e8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	8b7b      	ldrh	r3, [r7, #26]
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	619a      	str	r2, [r3, #24]
 80045e6:	e002      	b.n	80045ee <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d123      	bne.n	800463e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	83fb      	strh	r3, [r7, #30]
 8004612:	8bfb      	ldrh	r3, [r7, #30]
 8004614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004618:	83fb      	strh	r3, [r7, #30]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	8bfb      	ldrh	r3, [r7, #30]
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11f      	bne.n	8004688 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	83bb      	strh	r3, [r7, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	8bbb      	ldrh	r3, [r7, #28]
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004688:	8b7b      	ldrh	r3, [r7, #26]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6959      	ldr	r1, [r3, #20]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	895a      	ldrh	r2, [r3, #10]
 800469a:	8b7b      	ldrh	r3, [r7, #26]
 800469c:	f005 fa2d 	bl	8009afa <USB_ReadPMA>
    }
  }

  return count;
 80046a0:	8b7b      	ldrh	r3, [r7, #26]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b0a2      	sub	sp, #136	; 0x88
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 81c5 	beq.w	8004a4e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d907      	bls.n	8004708 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	619a      	str	r2, [r3, #24]
 8004706:	e002      	b.n	800470e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 80b9 	bne.w	800488a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d126      	bne.n	800476e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	4413      	add	r3, r2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	00da      	lsls	r2, r3, #3
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	4413      	add	r3, r2
 8004742:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004752:	b29a      	uxth	r2, r3
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004766:	b29a      	uxth	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	e01a      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d116      	bne.n	80047a4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004784:	b29b      	uxth	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	4413      	add	r3, r2
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00da      	lsls	r2, r3, #3
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	4413      	add	r3, r2
 8004798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2200      	movs	r2, #0
 80047a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d126      	bne.n	8004800 <HAL_PCD_EP_DB_Transmit+0x156>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4413      	add	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00da      	lsls	r2, r3, #3
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	4413      	add	r3, r2
 80047d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	e017      	b.n	8004830 <HAL_PCD_EP_DB_Transmit+0x186>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d113      	bne.n	8004830 <HAL_PCD_EP_DB_Transmit+0x186>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	4413      	add	r3, r2
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	00da      	lsls	r2, r3, #3
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	4413      	add	r3, r2
 8004824:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2200      	movs	r2, #0
 800482e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f007 f863 	bl	800b902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 82d2 	beq.w	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	827b      	strh	r3, [r7, #18]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	8a7b      	ldrh	r3, [r7, #18]
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
 8004888:	e2b0      	b.n	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d021      	beq.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048de:	2b01      	cmp	r3, #1
 80048e0:	f040 8284 	bne.w	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048ec:	441a      	add	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048fa:	441a      	add	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	429a      	cmp	r2, r3
 800490a:	d309      	bcc.n	8004920 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004918:	1ad2      	subs	r2, r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	621a      	str	r2, [r3, #32]
 800491e:	e015      	b.n	800494c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800492c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004936:	e009      	b.n	800494c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2200      	movs	r2, #0
 800494a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d155      	bne.n	8004a00 <HAL_PCD_EP_DB_Transmit+0x356>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	4413      	add	r3, r2
 800496a:	63bb      	str	r3, [r7, #56]	; 0x38
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	00da      	lsls	r2, r3, #3
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	4413      	add	r3, r2
 8004976:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
 800497c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497e:	2b3e      	cmp	r3, #62	; 0x3e
 8004980:	d916      	bls.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x306>
 8004982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	64bb      	str	r3, [r7, #72]	; 0x48
 8004988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004994:	3b01      	subs	r3, #1
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
 8004998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499a:	b29b      	uxth	r3, r3
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	b29b      	uxth	r3, r3
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e043      	b.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x38e>
 80049b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d112      	bne.n	80049dc <HAL_PCD_EP_DB_Transmit+0x332>
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	e02d      	b.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x38e>
 80049dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x348>
 80049ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ee:	3301      	adds	r3, #1
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	029b      	lsls	r3, r3, #10
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	e01b      	b.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d117      	bne.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	4413      	add	r3, r2
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	00da      	lsls	r2, r3, #3
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	4413      	add	r3, r2
 8004a2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a36:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6959      	ldr	r1, [r3, #20]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	891a      	ldrh	r2, [r3, #8]
 8004a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f005 f815 	bl	8009a76 <USB_WritePMA>
 8004a4c:	e1ce      	b.n	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d307      	bcc.n	8004a92 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	619a      	str	r2, [r3, #24]
 8004a90:	e002      	b.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 80c4 	bne.w	8004c2a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	785b      	ldrb	r3, [r3, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d126      	bne.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004abe:	4413      	add	r3, r2
 8004ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	00da      	lsls	r2, r3, #3
 8004ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aca:	4413      	add	r3, r2
 8004acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	e01a      	b.n	8004b2e <HAL_PCD_EP_DB_Transmit+0x484>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d116      	bne.n	8004b2e <HAL_PCD_EP_DB_Transmit+0x484>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	673b      	str	r3, [r7, #112]	; 0x70
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b14:	4413      	add	r3, r2
 8004b16:	673b      	str	r3, [r7, #112]	; 0x70
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	00da      	lsls	r2, r3, #3
 8004b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d12f      	bne.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b54:	4413      	add	r3, r2
 8004b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	00da      	lsls	r2, r3, #3
 8004b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b64:	4413      	add	r3, r2
 8004b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b98:	801a      	strh	r2, [r3, #0]
 8004b9a:	e017      	b.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x522>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d113      	bne.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x522>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bb2:	4413      	add	r3, r2
 8004bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	00da      	lsls	r2, r3, #3
 8004bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc8:	2200      	movs	r2, #0
 8004bca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f006 fe95 	bl	800b902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 8104 	bne.w	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]
 8004c28:	e0e0      	b.n	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d121      	bne.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	f040 80b4 	bne.w	8004dec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c8c:	441a      	add	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d309      	bcc.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb8:	1ad2      	subs	r2, r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	621a      	str	r2, [r3, #32]
 8004cbe:	e015      	b.n	8004cec <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004cc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ccc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cd6:	e009      	b.n	8004cec <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	785b      	ldrb	r3, [r3, #1]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d155      	bne.n	8004da6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d0e:	4413      	add	r3, r2
 8004d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54
 8004d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d24:	2b3e      	cmp	r3, #62	; 0x3e
 8004d26:	d916      	bls.n	8004d56 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_PCD_EP_DB_Transmit+0x694>
 8004d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8004d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	029b      	lsls	r3, r3, #10
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	e040      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d112      	bne.n	8004d82 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e02a      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	677b      	str	r3, [r7, #116]	; 0x74
 8004d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d94:	3301      	adds	r3, #1
 8004d96:	677b      	str	r3, [r7, #116]	; 0x74
 8004d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e018      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d114      	bne.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbc:	4413      	add	r3, r2
 8004dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	00da      	lsls	r2, r3, #3
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc8:	4413      	add	r3, r2
 8004dca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6959      	ldr	r1, [r3, #20]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	895a      	ldrh	r2, [r3, #10]
 8004de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f004 fe45 	bl	8009a76 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	823b      	strh	r3, [r7, #16]
 8004e08:	8a3b      	ldrh	r3, [r7, #16]
 8004e0a:	f083 0310 	eor.w	r3, r3, #16
 8004e0e:	823b      	strh	r3, [r7, #16]
 8004e10:	8a3b      	ldrh	r3, [r7, #16]
 8004e12:	f083 0320 	eor.w	r3, r3, #32
 8004e16:	823b      	strh	r3, [r7, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	441a      	add	r2, r3
 8004e26:	8a3b      	ldrh	r3, [r7, #16]
 8004e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3788      	adds	r7, #136	; 0x88
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	817b      	strh	r3, [r7, #10]
 8004e54:	4613      	mov	r3, r2
 8004e56:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e58:	897b      	ldrh	r3, [r7, #10]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e64:	897b      	ldrh	r3, [r7, #10]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e009      	b.n	8004e90 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e7c:	897a      	ldrh	r2, [r7, #10]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d107      	bne.n	8004ea6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	80da      	strh	r2, [r3, #6]
 8004ea4:	e00b      	b.n	8004ebe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f043 0302 	orr.w	r3, r3, #2
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d141      	bne.n	8004fb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f2e:	4b4b      	ldr	r3, [pc, #300]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d131      	bne.n	8004fa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f3c:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f42:	4a46      	ldr	r2, [pc, #280]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f4c:	4b43      	ldr	r3, [pc, #268]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f54:	4a41      	ldr	r2, [pc, #260]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f5c:	4b40      	ldr	r3, [pc, #256]	; (8005060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2232      	movs	r2, #50	; 0x32
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	4a3f      	ldr	r2, [pc, #252]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	0c9b      	lsrs	r3, r3, #18
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f72:	e002      	b.n	8004f7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f7a:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f86:	d102      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f2      	bne.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f8e:	4b33      	ldr	r3, [pc, #204]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d158      	bne.n	800504e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e057      	b.n	8005050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fa0:	4b2e      	ldr	r3, [pc, #184]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa6:	4a2d      	ldr	r2, [pc, #180]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fb0:	e04d      	b.n	800504e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb8:	d141      	bne.n	800503e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fba:	4b28      	ldr	r3, [pc, #160]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d131      	bne.n	800502c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fc8:	4b24      	ldr	r3, [pc, #144]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fce:	4a23      	ldr	r2, [pc, #140]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fd8:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2232      	movs	r2, #50	; 0x32
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	0c9b      	lsrs	r3, r3, #18
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ffe:	e002      	b.n	8005006 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3b01      	subs	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005012:	d102      	bne.n	800501a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f2      	bne.n	8005000 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005026:	d112      	bne.n	800504e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e011      	b.n	8005050 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800503c:	e007      	b.n	800504e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005046:	4a05      	ldr	r2, [pc, #20]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800504c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40007000 	.word	0x40007000
 8005060:	20000044 	.word	0x20000044
 8005064:	431bde83 	.word	0x431bde83

08005068 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005076:	6093      	str	r3, [r2, #8]
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40007000 	.word	0x40007000

08005088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e306      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d075      	beq.n	8005192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a6:	4b97      	ldr	r3, [pc, #604]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b0:	4b94      	ldr	r3, [pc, #592]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d102      	bne.n	80050c6 <HAL_RCC_OscConfig+0x3e>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d002      	beq.n	80050cc <HAL_RCC_OscConfig+0x44>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d10b      	bne.n	80050e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050cc:	4b8d      	ldr	r3, [pc, #564]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05b      	beq.n	8005190 <HAL_RCC_OscConfig+0x108>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d157      	bne.n	8005190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e2e1      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d106      	bne.n	80050fc <HAL_RCC_OscConfig+0x74>
 80050ee:	4b85      	ldr	r3, [pc, #532]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a84      	ldr	r2, [pc, #528]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e01d      	b.n	8005138 <HAL_RCC_OscConfig+0xb0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x98>
 8005106:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7e      	ldr	r2, [pc, #504]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800510c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	4b7c      	ldr	r3, [pc, #496]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7b      	ldr	r2, [pc, #492]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e00b      	b.n	8005138 <HAL_RCC_OscConfig+0xb0>
 8005120:	4b78      	ldr	r3, [pc, #480]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a77      	ldr	r2, [pc, #476]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b75      	ldr	r3, [pc, #468]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a74      	ldr	r2, [pc, #464]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fc fbfe 	bl	8001940 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005148:	f7fc fbfa 	bl	8001940 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	; 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e2a6      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515a:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0xc0>
 8005166:	e014      	b.n	8005192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fc fbea 	bl	8001940 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fc fbe6 	bl	8001940 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e292      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005182:	4b60      	ldr	r3, [pc, #384]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0xe8>
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d075      	beq.n	800528a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519e:	4b59      	ldr	r3, [pc, #356]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a8:	4b56      	ldr	r3, [pc, #344]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b0c      	cmp	r3, #12
 80051b6:	d102      	bne.n	80051be <HAL_RCC_OscConfig+0x136>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d002      	beq.n	80051c4 <HAL_RCC_OscConfig+0x13c>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d11f      	bne.n	8005204 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c4:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_OscConfig+0x154>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e265      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4b49      	ldr	r3, [pc, #292]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	4946      	ldr	r1, [pc, #280]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051f0:	4b45      	ldr	r3, [pc, #276]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fc fb57 	bl	80018a8 <HAL_InitTick>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d043      	beq.n	8005288 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e251      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d023      	beq.n	8005254 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520c:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3c      	ldr	r2, [pc, #240]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fc fb92 	bl	8001940 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005220:	f7fc fb8e 	bl	8001940 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e23a      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005232:	4b34      	ldr	r3, [pc, #208]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523e:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	492d      	ldr	r1, [pc, #180]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
 8005252:	e01a      	b.n	800528a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800525a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fc fb6e 	bl	8001940 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005268:	f7fc fb6a 	bl	8001940 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e216      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x1e0>
 8005286:	e000      	b.n	800528a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005288:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d041      	beq.n	800531a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01c      	beq.n	80052d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800529e:	4b19      	ldr	r3, [pc, #100]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fc fb47 	bl	8001940 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b6:	f7fc fb43 	bl	8001940 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e1ef      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052c8:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80052ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ef      	beq.n	80052b6 <HAL_RCC_OscConfig+0x22e>
 80052d6:	e020      	b.n	800531a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80052da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_RCC_OscConfig+0x27c>)
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fc fb2a 	bl	8001940 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052ee:	e00d      	b.n	800530c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f0:	f7fc fb26 	bl	8001940 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d906      	bls.n	800530c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1d2      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800530c:	4b8c      	ldr	r3, [pc, #560]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ea      	bne.n	80052f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80a6 	beq.w	8005474 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800532c:	4b84      	ldr	r3, [pc, #528]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_RCC_OscConfig+0x2b4>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x2b6>
 800533c:	2300      	movs	r3, #0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00d      	beq.n	800535e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	4a7e      	ldr	r2, [pc, #504]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	6593      	str	r3, [r2, #88]	; 0x58
 800534e:	4b7c      	ldr	r3, [pc, #496]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535e:	4b79      	ldr	r3, [pc, #484]	; (8005544 <HAL_RCC_OscConfig+0x4bc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x4bc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a75      	ldr	r2, [pc, #468]	; (8005544 <HAL_RCC_OscConfig+0x4bc>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7fc fae3 	bl	8001940 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fc fadf 	bl	8001940 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e18b      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005390:	4b6c      	ldr	r3, [pc, #432]	; (8005544 <HAL_RCC_OscConfig+0x4bc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d108      	bne.n	80053b6 <HAL_RCC_OscConfig+0x32e>
 80053a4:	4b66      	ldr	r3, [pc, #408]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	4a65      	ldr	r2, [pc, #404]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b4:	e024      	b.n	8005400 <HAL_RCC_OscConfig+0x378>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d110      	bne.n	80053e0 <HAL_RCC_OscConfig+0x358>
 80053be:	4b60      	ldr	r3, [pc, #384]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	4a5e      	ldr	r2, [pc, #376]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053c6:	f043 0304 	orr.w	r3, r3, #4
 80053ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ce:	4b5c      	ldr	r3, [pc, #368]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d4:	4a5a      	ldr	r2, [pc, #360]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053de:	e00f      	b.n	8005400 <HAL_RCC_OscConfig+0x378>
 80053e0:	4b57      	ldr	r3, [pc, #348]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	4a56      	ldr	r2, [pc, #344]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053f0:	4b53      	ldr	r3, [pc, #332]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	4a52      	ldr	r2, [pc, #328]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fc fa9a 	bl	8001940 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fc fa96 	bl	8001940 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e140      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ed      	beq.n	8005410 <HAL_RCC_OscConfig+0x388>
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005436:	f7fc fa83 	bl	8001940 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800543c:	e00a      	b.n	8005454 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fc fa7f 	bl	8001940 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	; 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e129      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005454:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ed      	bne.n	800543e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b35      	ldr	r3, [pc, #212]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	4a34      	ldr	r2, [pc, #208]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005472:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d03c      	beq.n	80054fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800548e:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005498:	f7fc fa52 	bl	8001940 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054a0:	f7fc fa4e 	bl	8001940 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e0fa      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80054b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ef      	beq.n	80054a0 <HAL_RCC_OscConfig+0x418>
 80054c0:	e01b      	b.n	80054fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054c2:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80054c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c8:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fc fa35 	bl	8001940 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054da:	f7fc fa31 	bl	8001940 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e0dd      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ef      	bne.n	80054da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80d1 	beq.w	80056a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005504:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b0c      	cmp	r3, #12
 800550e:	f000 808b 	beq.w	8005628 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d15e      	bne.n	80055d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fc fa0b 	bl	8001940 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552c:	e00c      	b.n	8005548 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552e:	f7fc fa07 	bl	8001940 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d905      	bls.n	8005548 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e0b3      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
 8005540:	40021000 	.word	0x40021000
 8005544:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ec      	bne.n	800552e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005554:	4b56      	ldr	r3, [pc, #344]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	4b56      	ldr	r3, [pc, #344]	; (80056b4 <HAL_RCC_OscConfig+0x62c>)
 800555a:	4013      	ands	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6a11      	ldr	r1, [r2, #32]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005564:	3a01      	subs	r2, #1
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800556e:	0212      	lsls	r2, r2, #8
 8005570:	4311      	orrs	r1, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005576:	0852      	lsrs	r2, r2, #1
 8005578:	3a01      	subs	r2, #1
 800557a:	0552      	lsls	r2, r2, #21
 800557c:	4311      	orrs	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005582:	0852      	lsrs	r2, r2, #1
 8005584:	3a01      	subs	r2, #1
 8005586:	0652      	lsls	r2, r2, #25
 8005588:	4311      	orrs	r1, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800558e:	06d2      	lsls	r2, r2, #27
 8005590:	430a      	orrs	r2, r1
 8005592:	4947      	ldr	r1, [pc, #284]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 8005594:	4313      	orrs	r3, r2
 8005596:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005598:	4b45      	ldr	r3, [pc, #276]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a44      	ldr	r2, [pc, #272]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 800559e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a41      	ldr	r2, [pc, #260]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b0:	f7fc f9c6 	bl	8001940 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b8:	f7fc f9c2 	bl	8001940 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e06e      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ca:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x530>
 80055d6:	e066      	b.n	80056a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d8:	4b35      	ldr	r3, [pc, #212]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80055e4:	4b32      	ldr	r3, [pc, #200]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4a31      	ldr	r2, [pc, #196]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055f0:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a2e      	ldr	r2, [pc, #184]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 80055f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc f99e 	bl	8001940 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fc f99a 	bl	8001940 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e046      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800561a:	4b25      	ldr	r3, [pc, #148]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x580>
 8005626:	e03e      	b.n	80056a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e039      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005634:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HAL_RCC_OscConfig+0x628>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 0203 	and.w	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	429a      	cmp	r2, r3
 8005646:	d12c      	bne.n	80056a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	3b01      	subs	r3, #1
 8005654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d123      	bne.n	80056a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d11b      	bne.n	80056a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d113      	bne.n	80056a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	3b01      	subs	r3, #1
 8005688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	3b01      	subs	r3, #1
 800569c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000
 80056b4:	019f800c 	.word	0x019f800c

080056b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e11e      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056d0:	4b91      	ldr	r3, [pc, #580]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d910      	bls.n	8005700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b8e      	ldr	r3, [pc, #568]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 020f 	bic.w	r2, r3, #15
 80056e6:	498c      	ldr	r1, [pc, #560]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ee:	4b8a      	ldr	r3, [pc, #552]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d001      	beq.n	8005700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e106      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d073      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d129      	bne.n	8005768 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005714:	4b81      	ldr	r3, [pc, #516]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0f4      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005724:	f000 f966 	bl	80059f4 <RCC_GetSysClockFreqFromPLLSource>
 8005728:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4a7c      	ldr	r2, [pc, #496]	; (8005920 <HAL_RCC_ClockConfig+0x268>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d93f      	bls.n	80057b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005732:	4b7a      	ldr	r3, [pc, #488]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005746:	2b00      	cmp	r3, #0
 8005748:	d033      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800574e:	2b00      	cmp	r3, #0
 8005750:	d12f      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005752:	4b72      	ldr	r3, [pc, #456]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575a:	4a70      	ldr	r2, [pc, #448]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005762:	2380      	movs	r3, #128	; 0x80
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e024      	b.n	80057b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d107      	bne.n	8005780 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005770:	4b6a      	ldr	r3, [pc, #424]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0c6      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005780:	4b66      	ldr	r3, [pc, #408]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0be      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005790:	f000 f8ce 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 8005794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4a61      	ldr	r2, [pc, #388]	; (8005920 <HAL_RCC_ClockConfig+0x268>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d909      	bls.n	80057b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800579e:	4b5f      	ldr	r3, [pc, #380]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a6:	4a5d      	ldr	r2, [pc, #372]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057b2:	4b5a      	ldr	r3, [pc, #360]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 0203 	bic.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4957      	ldr	r1, [pc, #348]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c4:	f7fc f8bc 	bl	8001940 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fc f8b8 	bl	8001940 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e095      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	4b4e      	ldr	r3, [pc, #312]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 020c 	and.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1eb      	bne.n	80057cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d023      	beq.n	8005848 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800580c:	4b43      	ldr	r3, [pc, #268]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4a42      	ldr	r2, [pc, #264]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005816:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005824:	4b3d      	ldr	r3, [pc, #244]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800582c:	4a3b      	ldr	r2, [pc, #236]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 800582e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005832:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005834:	4b39      	ldr	r3, [pc, #228]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4936      	ldr	r1, [pc, #216]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
 8005846:	e008      	b.n	800585a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b80      	cmp	r3, #128	; 0x80
 800584c:	d105      	bne.n	800585a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800584e:	4b33      	ldr	r3, [pc, #204]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4a32      	ldr	r2, [pc, #200]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 8005854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005858:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d21d      	bcs.n	80058a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005868:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f023 020f 	bic.w	r2, r3, #15
 8005870:	4929      	ldr	r1, [pc, #164]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	4313      	orrs	r3, r2
 8005876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005878:	f7fc f862 	bl	8001940 <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587e:	e00a      	b.n	8005896 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005880:	f7fc f85e 	bl	8001940 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e03b      	b.n	800590e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x260>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d1ed      	bne.n	8005880 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b0:	4b1a      	ldr	r3, [pc, #104]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4917      	ldr	r1, [pc, #92]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	490f      	ldr	r1, [pc, #60]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058e2:	f000 f825 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 80058e6:	4602      	mov	r2, r0
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <HAL_RCC_ClockConfig+0x264>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	490c      	ldr	r1, [pc, #48]	; (8005924 <HAL_RCC_ClockConfig+0x26c>)
 80058f4:	5ccb      	ldrb	r3, [r1, r3]
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x270>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_ClockConfig+0x274>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fb ffce 	bl	80018a8 <HAL_InitTick>
 800590c:	4603      	mov	r3, r0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40022000 	.word	0x40022000
 800591c:	40021000 	.word	0x40021000
 8005920:	04c4b400 	.word	0x04c4b400
 8005924:	0800bf10 	.word	0x0800bf10
 8005928:	20000044 	.word	0x20000044
 800592c:	20000048 	.word	0x20000048

08005930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005936:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b04      	cmp	r3, #4
 8005940:	d102      	bne.n	8005948 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005942:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e047      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 030c 	and.w	r3, r3, #12
 8005950:	2b08      	cmp	r3, #8
 8005952:	d102      	bne.n	800595a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005954:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	e03e      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800595a:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d136      	bne.n	80059d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	3301      	adds	r3, #1
 800597c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d10c      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005984:	4a1a      	ldr	r2, [pc, #104]	; (80059f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800598e:	68d2      	ldr	r2, [r2, #12]
 8005990:	0a12      	lsrs	r2, r2, #8
 8005992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	617b      	str	r3, [r7, #20]
      break;
 800599c:	e00c      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800599e:	4a13      	ldr	r2, [pc, #76]	; (80059ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a8:	68d2      	ldr	r2, [r2, #12]
 80059aa:	0a12      	lsrs	r2, r2, #8
 80059ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059b0:	fb02 f303 	mul.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]
      break;
 80059b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059b8:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	0e5b      	lsrs	r3, r3, #25
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	3301      	adds	r3, #1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	e001      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059d8:	693b      	ldr	r3, [r7, #16]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	007a1200 	.word	0x007a1200

080059f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059fa:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d10c      	bne.n	8005a32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a18:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	4a14      	ldr	r2, [pc, #80]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a22:	68d2      	ldr	r2, [r2, #12]
 8005a24:	0a12      	lsrs	r2, r2, #8
 8005a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	617b      	str	r3, [r7, #20]
    break;
 8005a30:	e00c      	b.n	8005a4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a32:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	4a0e      	ldr	r2, [pc, #56]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a3c:	68d2      	ldr	r2, [r2, #12]
 8005a3e:	0a12      	lsrs	r2, r2, #8
 8005a40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a44:	fb02 f303 	mul.w	r3, r2, r3
 8005a48:	617b      	str	r3, [r7, #20]
    break;
 8005a4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	0e5b      	lsrs	r3, r3, #25
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	3301      	adds	r3, #1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a66:	687b      	ldr	r3, [r7, #4]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40021000 	.word	0x40021000
 8005a78:	007a1200 	.word	0x007a1200
 8005a7c:	00f42400 	.word	0x00f42400

08005a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8098 	beq.w	8005bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa2:	4b43      	ldr	r3, [pc, #268]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	4b40      	ldr	r3, [pc, #256]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	4a3f      	ldr	r2, [pc, #252]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8005aba:	4b3d      	ldr	r3, [pc, #244]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a39      	ldr	r2, [pc, #228]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ad6:	f7fb ff33 	bl	8001940 <HAL_GetTick>
 8005ada:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005adc:	e009      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ade:	f7fb ff2f 	bl	8001940 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d902      	bls.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	74fb      	strb	r3, [r7, #19]
        break;
 8005af0:	e005      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af2:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ef      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d159      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b04:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01e      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d019      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b20:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b2c:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b32:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d016      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5e:	f7fb feef 	bl	8001940 <HAL_GetTick>
 8005b62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b64:	e00b      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b66:	f7fb feeb 	bl	8001940 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d902      	bls.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b7c:	e006      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ec      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	4903      	ldr	r1, [pc, #12]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	74bb      	strb	r3, [r7, #18]
 8005bae:	e005      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bbc:	7c7b      	ldrb	r3, [r7, #17]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4ba6      	ldr	r3, [pc, #664]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	4aa5      	ldr	r2, [pc, #660]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bda:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	f023 0203 	bic.w	r2, r3, #3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	499c      	ldr	r1, [pc, #624]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bfc:	4b97      	ldr	r3, [pc, #604]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f023 020c 	bic.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4994      	ldr	r1, [pc, #592]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c1e:	4b8f      	ldr	r3, [pc, #572]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	498b      	ldr	r1, [pc, #556]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c40:	4b86      	ldr	r3, [pc, #536]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4983      	ldr	r1, [pc, #524]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c62:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	497a      	ldr	r1, [pc, #488]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c84:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	4972      	ldr	r1, [pc, #456]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ca6:	4b6d      	ldr	r3, [pc, #436]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	4969      	ldr	r1, [pc, #420]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cc8:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	4961      	ldr	r1, [pc, #388]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cea:	4b5c      	ldr	r3, [pc, #368]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	4958      	ldr	r1, [pc, #352]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d015      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	4950      	ldr	r1, [pc, #320]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a4a      	ldr	r2, [pc, #296]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d44:	4b45      	ldr	r3, [pc, #276]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	4942      	ldr	r1, [pc, #264]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d62:	d105      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d64:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a3c      	ldr	r2, [pc, #240]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d6e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d7c:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	4934      	ldr	r1, [pc, #208]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d9a:	d105      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d9c:	4b2f      	ldr	r3, [pc, #188]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005da6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d015      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db4:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	4926      	ldr	r1, [pc, #152]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d015      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dec:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	4918      	ldr	r1, [pc, #96]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e0a:	d105      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4a12      	ldr	r2, [pc, #72]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d015      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e32:	490a      	ldr	r1, [pc, #40]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e42:	d105      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000

08005e60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d066      	beq.n	8005f40 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fb f9fc 	bl	8001284 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	22ca      	movs	r2, #202	; 0xca
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2253      	movs	r2, #83	; 0x53
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f876 	bl	8005f96 <RTC_EnterInitMode>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d13a      	bne.n	8005f2a <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6999      	ldr	r1, [r3, #24]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68d9      	ldr	r1, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	041a      	lsls	r2, r3, #16
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f882 	bl	8006002 <RTC_ExitInitMode>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1a      	ldr	r2, [r3, #32]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	22ff      	movs	r2, #255	; 0xff
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0220 	bic.w	r2, r2, #32
 8005f60:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f62:	f7fb fced 	bl	8001940 <HAL_GetTick>
 8005f66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005f68:	e009      	b.n	8005f7e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f6a:	f7fb fce9 	bl	8001940 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f78:	d901      	bls.n	8005f7e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e007      	b.n	8005f8e <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ee      	beq.n	8005f6a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d123      	bne.n	8005ff8 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005fc0:	f7fb fcbe 	bl	8001940 <HAL_GetTick>
 8005fc4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fc6:	e00d      	b.n	8005fe4 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fc8:	f7fb fcba 	bl	8001940 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd6:	d905      	bls.n	8005fe4 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <RTC_EnterInitMode+0x62>
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d1e7      	bne.n	8005fc8 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800601c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10c      	bne.n	8006046 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ff8c 	bl	8005f4a <HAL_RTC_WaitForSynchro>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d022      	beq.n	800607e <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2203      	movs	r2, #3
 800603c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	73fb      	strb	r3, [r7, #15]
 8006044:	e01b      	b.n	800607e <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0220 	bic.w	r2, r2, #32
 8006054:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff77 	bl	8005f4a <HAL_RTC_WaitForSynchro>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2203      	movs	r2, #3
 8006066:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0220 	orr.w	r2, r2, #32
 800607c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e049      	b.n	800612e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fb fa2c 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f000 fd7c 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e049      	b.n	80061dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fb f8cd 	bl	80012fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f000 fd25 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_TIM_PWM_Start+0x24>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	bf14      	ite	ne
 8006200:	2301      	movne	r3, #1
 8006202:	2300      	moveq	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	e03c      	b.n	8006282 <HAL_TIM_PWM_Start+0x9e>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d109      	bne.n	8006222 <HAL_TIM_PWM_Start+0x3e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b01      	cmp	r3, #1
 8006218:	bf14      	ite	ne
 800621a:	2301      	movne	r3, #1
 800621c:	2300      	moveq	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	e02f      	b.n	8006282 <HAL_TIM_PWM_Start+0x9e>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d109      	bne.n	800623c <HAL_TIM_PWM_Start+0x58>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	bf14      	ite	ne
 8006234:	2301      	movne	r3, #1
 8006236:	2300      	moveq	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	e022      	b.n	8006282 <HAL_TIM_PWM_Start+0x9e>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d109      	bne.n	8006256 <HAL_TIM_PWM_Start+0x72>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	e015      	b.n	8006282 <HAL_TIM_PWM_Start+0x9e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b10      	cmp	r3, #16
 800625a:	d109      	bne.n	8006270 <HAL_TIM_PWM_Start+0x8c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e008      	b.n	8006282 <HAL_TIM_PWM_Start+0x9e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e097      	b.n	80063ba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <HAL_TIM_PWM_Start+0xb6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006298:	e023      	b.n	80062e2 <HAL_TIM_PWM_Start+0xfe>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Start+0xc6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a8:	e01b      	b.n	80062e2 <HAL_TIM_PWM_Start+0xfe>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_PWM_Start+0xd6>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b8:	e013      	b.n	80062e2 <HAL_TIM_PWM_Start+0xfe>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start+0xe6>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062c8:	e00b      	b.n	80062e2 <HAL_TIM_PWM_Start+0xfe>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d104      	bne.n	80062da <HAL_TIM_PWM_Start+0xf6>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d8:	e003      	b.n	80062e2 <HAL_TIM_PWM_Start+0xfe>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2201      	movs	r2, #1
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fff0 	bl	80072d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <HAL_TIM_PWM_Start+0x1e0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <HAL_TIM_PWM_Start+0x13e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a32      	ldr	r2, [pc, #200]	; (80063c8 <HAL_TIM_PWM_Start+0x1e4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_TIM_PWM_Start+0x13e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a30      	ldr	r2, [pc, #192]	; (80063cc <HAL_TIM_PWM_Start+0x1e8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d009      	beq.n	8006322 <HAL_TIM_PWM_Start+0x13e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2f      	ldr	r2, [pc, #188]	; (80063d0 <HAL_TIM_PWM_Start+0x1ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d004      	beq.n	8006322 <HAL_TIM_PWM_Start+0x13e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <HAL_TIM_PWM_Start+0x1f0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_Start+0x142>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_TIM_PWM_Start+0x144>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_TIM_PWM_Start+0x1e0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d018      	beq.n	8006378 <HAL_TIM_PWM_Start+0x194>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634e:	d013      	beq.n	8006378 <HAL_TIM_PWM_Start+0x194>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <HAL_TIM_PWM_Start+0x1f4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_TIM_PWM_Start+0x194>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <HAL_TIM_PWM_Start+0x1f8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_TIM_PWM_Start+0x194>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <HAL_TIM_PWM_Start+0x1e4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIM_PWM_Start+0x194>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a16      	ldr	r2, [pc, #88]	; (80063cc <HAL_TIM_PWM_Start+0x1e8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d115      	bne.n	80063a4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <HAL_TIM_PWM_Start+0x1fc>)
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b06      	cmp	r3, #6
 8006388:	d015      	beq.n	80063b6 <HAL_TIM_PWM_Start+0x1d2>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006390:	d011      	beq.n	80063b6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e008      	b.n	80063b6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e000      	b.n	80063b8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40013400 	.word	0x40013400
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400
 80063d4:	40014800 	.word	0x40014800
 80063d8:	40000400 	.word	0x40000400
 80063dc:	40000800 	.word	0x40000800
 80063e0:	00010007 	.word	0x00010007

080063e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e097      	b.n	8006528 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fa ffbb 	bl	8001388 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006428:	f023 0307 	bic.w	r3, r3, #7
 800642c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f000 fbc3 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	4313      	orrs	r3, r2
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006484:	f023 030c 	bic.w	r3, r3, #12
 8006488:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	4313      	orrs	r3, r2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	031b      	lsls	r3, r3, #12
 80064b4:	4313      	orrs	r3, r2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	4313      	orrs	r3, r2
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006540:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006548:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006550:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006558:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d102      	bne.n	800656c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006566:	7b7b      	ldrb	r3, [r7, #13]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e069      	b.n	8006644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006580:	e031      	b.n	80065e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d110      	bne.n	80065aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d102      	bne.n	8006594 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800658e:	7b3b      	ldrb	r3, [r7, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d001      	beq.n	8006598 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e055      	b.n	8006644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065a8:	e01d      	b.n	80065e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d108      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d105      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d102      	bne.n	80065c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065bc:	7b3b      	ldrb	r3, [r7, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d001      	beq.n	80065c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e03e      	b.n	8006644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_TIM_Encoder_Start+0xc4>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d008      	beq.n	8006604 <HAL_TIM_Encoder_Start+0xd4>
 80065f2:	e00f      	b.n	8006614 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fe67 	bl	80072d0 <TIM_CCxChannelCmd>
      break;
 8006602:	e016      	b.n	8006632 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2201      	movs	r2, #1
 800660a:	2104      	movs	r1, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fe5f 	bl	80072d0 <TIM_CCxChannelCmd>
      break;
 8006612:	e00e      	b.n	8006632 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fe57 	bl	80072d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	2104      	movs	r1, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fe50 	bl	80072d0 <TIM_CCxChannelCmd>
      break;
 8006630:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0202 	mvn.w	r2, #2
 8006678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa7a 	bl	8006b88 <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa6c 	bl	8006b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa7d 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa50 	bl	8006b88 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa42 	bl	8006b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa53 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b08      	cmp	r3, #8
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0208 	mvn.w	r2, #8
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2204      	movs	r2, #4
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa26 	bl	8006b88 <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa18 	bl	8006b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fa29 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d122      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d11b      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f9fc 	bl	8006b88 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9ee 	bl	8006b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f9ff 	bl	8006b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0201 	mvn.w	r2, #1
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7f9 fdae 	bl	800032c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 febc 	bl	8007574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680a:	d10e      	bne.n	800682a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d107      	bne.n	800682a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 feaf 	bl	8007588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d10e      	bne.n	8006856 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d107      	bne.n	8006856 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9ad 	bl	8006bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b20      	cmp	r3, #32
 8006862:	d10e      	bne.n	8006882 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d107      	bne.n	8006882 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f06f 0220 	mvn.w	r2, #32
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fe6f 	bl	8007560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006890:	d10f      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068a0:	d107      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80068aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fe75 	bl	800759c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068c0:	d10f      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068d0:	d107      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80068da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fe67 	bl	80075b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f0:	d10f      	bne.n	8006912 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006900:	d107      	bne.n	8006912 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800690a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fe59 	bl	80075c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006920:	d10f      	bne.n	8006942 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800692c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006930:	d107      	bne.n	8006942 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800693a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fe4b 	bl	80075d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006966:	2302      	movs	r3, #2
 8006968:	e0ff      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b14      	cmp	r3, #20
 8006976:	f200 80f0 	bhi.w	8006b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069d5 	.word	0x080069d5
 8006984:	08006b5b 	.word	0x08006b5b
 8006988:	08006b5b 	.word	0x08006b5b
 800698c:	08006b5b 	.word	0x08006b5b
 8006990:	08006a15 	.word	0x08006a15
 8006994:	08006b5b 	.word	0x08006b5b
 8006998:	08006b5b 	.word	0x08006b5b
 800699c:	08006b5b 	.word	0x08006b5b
 80069a0:	08006a57 	.word	0x08006a57
 80069a4:	08006b5b 	.word	0x08006b5b
 80069a8:	08006b5b 	.word	0x08006b5b
 80069ac:	08006b5b 	.word	0x08006b5b
 80069b0:	08006a97 	.word	0x08006a97
 80069b4:	08006b5b 	.word	0x08006b5b
 80069b8:	08006b5b 	.word	0x08006b5b
 80069bc:	08006b5b 	.word	0x08006b5b
 80069c0:	08006ad9 	.word	0x08006ad9
 80069c4:	08006b5b 	.word	0x08006b5b
 80069c8:	08006b5b 	.word	0x08006b5b
 80069cc:	08006b5b 	.word	0x08006b5b
 80069d0:	08006b19 	.word	0x08006b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f982 	bl	8006ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0208 	orr.w	r2, r2, #8
 80069ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6999      	ldr	r1, [r3, #24]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	619a      	str	r2, [r3, #24]
      break;
 8006a12:	e0a5      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f9f2 	bl	8006e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6999      	ldr	r1, [r3, #24]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	619a      	str	r2, [r3, #24]
      break;
 8006a54:	e084      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fa5b 	bl	8006f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0208 	orr.w	r2, r2, #8
 8006a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0204 	bic.w	r2, r2, #4
 8006a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69d9      	ldr	r1, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	61da      	str	r2, [r3, #28]
      break;
 8006a94:	e064      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fac3 	bl	8007028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69d9      	ldr	r1, [r3, #28]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	021a      	lsls	r2, r3, #8
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	61da      	str	r2, [r3, #28]
      break;
 8006ad6:	e043      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fb2c 	bl	800713c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0208 	orr.w	r2, r2, #8
 8006af2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0204 	bic.w	r2, r2, #4
 8006b02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b16:	e023      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fb70 	bl	8007204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	021a      	lsls	r2, r3, #8
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b58:	e002      	b.n	8006b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a3c      	ldr	r2, [pc, #240]	; (8006cc8 <TIM_Base_SetConfig+0x104>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00f      	beq.n	8006bfc <TIM_Base_SetConfig+0x38>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be2:	d00b      	beq.n	8006bfc <TIM_Base_SetConfig+0x38>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a39      	ldr	r2, [pc, #228]	; (8006ccc <TIM_Base_SetConfig+0x108>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_Base_SetConfig+0x38>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a38      	ldr	r2, [pc, #224]	; (8006cd0 <TIM_Base_SetConfig+0x10c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_Base_SetConfig+0x38>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a37      	ldr	r2, [pc, #220]	; (8006cd4 <TIM_Base_SetConfig+0x110>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2d      	ldr	r2, [pc, #180]	; (8006cc8 <TIM_Base_SetConfig+0x104>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01b      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1c:	d017      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_Base_SetConfig+0x108>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <TIM_Base_SetConfig+0x10c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00f      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_Base_SetConfig+0x110>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <TIM_Base_SetConfig+0x114>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a26      	ldr	r2, [pc, #152]	; (8006cdc <TIM_Base_SetConfig+0x118>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_Base_SetConfig+0x8a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <TIM_Base_SetConfig+0x11c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d108      	bne.n	8006c60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a10      	ldr	r2, [pc, #64]	; (8006cc8 <TIM_Base_SetConfig+0x104>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00f      	beq.n	8006cac <TIM_Base_SetConfig+0xe8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a11      	ldr	r2, [pc, #68]	; (8006cd4 <TIM_Base_SetConfig+0x110>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00b      	beq.n	8006cac <TIM_Base_SetConfig+0xe8>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <TIM_Base_SetConfig+0x114>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d007      	beq.n	8006cac <TIM_Base_SetConfig+0xe8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a0f      	ldr	r2, [pc, #60]	; (8006cdc <TIM_Base_SetConfig+0x118>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_Base_SetConfig+0xe8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a0e      	ldr	r2, [pc, #56]	; (8006ce0 <TIM_Base_SetConfig+0x11c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d103      	bne.n	8006cb4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	691a      	ldr	r2, [r3, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	615a      	str	r2, [r3, #20]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40000800 	.word	0x40000800
 8006cd4:	40013400 	.word	0x40013400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400
 8006ce0:	40014800 	.word	0x40014800

08006ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 0302 	bic.w	r3, r3, #2
 8006d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <TIM_OC1_SetConfig+0x10c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00f      	beq.n	8006d64 <TIM_OC1_SetConfig+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <TIM_OC1_SetConfig+0x110>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <TIM_OC1_SetConfig+0x80>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <TIM_OC1_SetConfig+0x114>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <TIM_OC1_SetConfig+0x80>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a29      	ldr	r2, [pc, #164]	; (8006dfc <TIM_OC1_SetConfig+0x118>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d003      	beq.n	8006d64 <TIM_OC1_SetConfig+0x80>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <TIM_OC1_SetConfig+0x11c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d10c      	bne.n	8006d7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f023 0308 	bic.w	r3, r3, #8
 8006d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f023 0304 	bic.w	r3, r3, #4
 8006d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <TIM_OC1_SetConfig+0x10c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00f      	beq.n	8006da6 <TIM_OC1_SetConfig+0xc2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a1a      	ldr	r2, [pc, #104]	; (8006df4 <TIM_OC1_SetConfig+0x110>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00b      	beq.n	8006da6 <TIM_OC1_SetConfig+0xc2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <TIM_OC1_SetConfig+0x114>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d007      	beq.n	8006da6 <TIM_OC1_SetConfig+0xc2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <TIM_OC1_SetConfig+0x118>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC1_SetConfig+0xc2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <TIM_OC1_SetConfig+0x11c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d111      	bne.n	8006dca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	621a      	str	r2, [r3, #32]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800

08006e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0210 	bic.w	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0320 	bic.w	r3, r3, #32
 8006e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <TIM_OC2_SetConfig+0x100>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_OC2_SetConfig+0x6c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <TIM_OC2_SetConfig+0x104>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10d      	bne.n	8006e8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a1d      	ldr	r2, [pc, #116]	; (8006f04 <TIM_OC2_SetConfig+0x100>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00f      	beq.n	8006eb4 <TIM_OC2_SetConfig+0xb0>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a1c      	ldr	r2, [pc, #112]	; (8006f08 <TIM_OC2_SetConfig+0x104>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00b      	beq.n	8006eb4 <TIM_OC2_SetConfig+0xb0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <TIM_OC2_SetConfig+0x108>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <TIM_OC2_SetConfig+0xb0>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a1a      	ldr	r2, [pc, #104]	; (8006f10 <TIM_OC2_SetConfig+0x10c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC2_SetConfig+0xb0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a19      	ldr	r2, [pc, #100]	; (8006f14 <TIM_OC2_SetConfig+0x110>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d113      	bne.n	8006edc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40012c00 	.word	0x40012c00
 8006f08:	40013400 	.word	0x40013400
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014800 	.word	0x40014800

08006f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0303 	bic.w	r3, r3, #3
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a27      	ldr	r2, [pc, #156]	; (8007014 <TIM_OC3_SetConfig+0xfc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <TIM_OC3_SetConfig+0x6a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a26      	ldr	r2, [pc, #152]	; (8007018 <TIM_OC3_SetConfig+0x100>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d10d      	bne.n	8006f9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1c      	ldr	r2, [pc, #112]	; (8007014 <TIM_OC3_SetConfig+0xfc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00f      	beq.n	8006fc6 <TIM_OC3_SetConfig+0xae>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <TIM_OC3_SetConfig+0x100>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00b      	beq.n	8006fc6 <TIM_OC3_SetConfig+0xae>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a1a      	ldr	r2, [pc, #104]	; (800701c <TIM_OC3_SetConfig+0x104>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <TIM_OC3_SetConfig+0xae>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a19      	ldr	r2, [pc, #100]	; (8007020 <TIM_OC3_SetConfig+0x108>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_OC3_SetConfig+0xae>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a18      	ldr	r2, [pc, #96]	; (8007024 <TIM_OC3_SetConfig+0x10c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d113      	bne.n	8006fee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	621a      	str	r2, [r3, #32]
}
 8007008:	bf00      	nop
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40012c00 	.word	0x40012c00
 8007018:	40013400 	.word	0x40013400
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800

08007028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a28      	ldr	r2, [pc, #160]	; (8007128 <TIM_OC4_SetConfig+0x100>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_OC4_SetConfig+0x6c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <TIM_OC4_SetConfig+0x104>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d10d      	bne.n	80070b0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800709a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	031b      	lsls	r3, r3, #12
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <TIM_OC4_SetConfig+0x100>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00f      	beq.n	80070d8 <TIM_OC4_SetConfig+0xb0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1c      	ldr	r2, [pc, #112]	; (800712c <TIM_OC4_SetConfig+0x104>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00b      	beq.n	80070d8 <TIM_OC4_SetConfig+0xb0>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a1b      	ldr	r2, [pc, #108]	; (8007130 <TIM_OC4_SetConfig+0x108>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d007      	beq.n	80070d8 <TIM_OC4_SetConfig+0xb0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <TIM_OC4_SetConfig+0x10c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_OC4_SetConfig+0xb0>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a19      	ldr	r2, [pc, #100]	; (8007138 <TIM_OC4_SetConfig+0x110>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d113      	bne.n	8007100 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	019b      	lsls	r3, r3, #6
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40012c00 	.word	0x40012c00
 800712c:	40013400 	.word	0x40013400
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800

0800713c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <TIM_OC5_SetConfig+0xb4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00f      	beq.n	80071b6 <TIM_OC5_SetConfig+0x7a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <TIM_OC5_SetConfig+0xb8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00b      	beq.n	80071b6 <TIM_OC5_SetConfig+0x7a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a15      	ldr	r2, [pc, #84]	; (80071f8 <TIM_OC5_SetConfig+0xbc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d007      	beq.n	80071b6 <TIM_OC5_SetConfig+0x7a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a14      	ldr	r2, [pc, #80]	; (80071fc <TIM_OC5_SetConfig+0xc0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d003      	beq.n	80071b6 <TIM_OC5_SetConfig+0x7a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <TIM_OC5_SetConfig+0xc4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d109      	bne.n	80071ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40012c00 	.word	0x40012c00
 80071f4:	40013400 	.word	0x40013400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800724a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	051b      	lsls	r3, r3, #20
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a18      	ldr	r2, [pc, #96]	; (80072bc <TIM_OC6_SetConfig+0xb8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00f      	beq.n	8007280 <TIM_OC6_SetConfig+0x7c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a17      	ldr	r2, [pc, #92]	; (80072c0 <TIM_OC6_SetConfig+0xbc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00b      	beq.n	8007280 <TIM_OC6_SetConfig+0x7c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <TIM_OC6_SetConfig+0xc0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d007      	beq.n	8007280 <TIM_OC6_SetConfig+0x7c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <TIM_OC6_SetConfig+0xc4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_OC6_SetConfig+0x7c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a14      	ldr	r2, [pc, #80]	; (80072cc <TIM_OC6_SetConfig+0xc8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d109      	bne.n	8007294 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007286:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	029b      	lsls	r3, r3, #10
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40013400 	.word	0x40013400
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40014400 	.word	0x40014400
 80072cc:	40014800 	.word	0x40014800

080072d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2201      	movs	r2, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	401a      	ands	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	fa01 f303 	lsl.w	r3, r1, r3
 8007308:	431a      	orrs	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e065      	b.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a2c      	ldr	r2, [pc, #176]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a2b      	ldr	r2, [pc, #172]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800736e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d013      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a17      	ldr	r2, [pc, #92]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a12      	ldr	r2, [pc, #72]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10c      	bne.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40013400 	.word	0x40013400
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40014000 	.word	0x40014000

08007420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007438:	2302      	movs	r3, #2
 800743a:	e087      	b.n	800754c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a27      	ldr	r2, [pc, #156]	; (8007558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d004      	beq.n	80074ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a25      	ldr	r2, [pc, #148]	; (800755c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d106      	bne.n	80074d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d126      	bne.n	800753a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	051b      	lsls	r3, r3, #20
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a0e      	ldr	r2, [pc, #56]	; (8007558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a0d      	ldr	r2, [pc, #52]	; (800755c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d106      	bne.n	800753a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	40012c00 	.word	0x40012c00
 800755c:	40013400 	.word	0x40013400

08007560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007600:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	b29a      	uxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007622:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007626:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	b29b      	uxth	r3, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	b29b      	uxth	r3, r3
 8007638:	4013      	ands	r3, r2
 800763a:	b29a      	uxth	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007650:	b084      	sub	sp, #16
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	f107 0014 	add.w	r0, r7, #20
 800765e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	b004      	add	sp, #16
 8007690:	4770      	bx	lr
	...

08007694 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007694:	b480      	push	{r7}
 8007696:	b09d      	sub	sp, #116	; 0x74
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d81f      	bhi.n	8007706 <USB_ActivateEndpoint+0x72>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USB_ActivateEndpoint+0x38>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	0800770f 	.word	0x0800770f
 80076d8:	080076eb 	.word	0x080076eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076e8:	e012      	b.n	8007710 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80076ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80076f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076f6:	e00b      	b.n	8007710 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80076f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007700:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007704:	e004      	b.n	8007710 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800770c:	e000      	b.n	8007710 <USB_ActivateEndpoint+0x7c>
      break;
 800770e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	441a      	add	r2, r3
 800771a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800771e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772e:	b29b      	uxth	r3, r3
 8007730:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	b21b      	sxth	r3, r3
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	b21a      	sxth	r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b21b      	sxth	r3, r3
 8007752:	4313      	orrs	r3, r2
 8007754:	b21b      	sxth	r3, r3
 8007756:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	7b1b      	ldrb	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 8149 	bne.w	8007a18 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8084 	beq.w	8007898 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779a:	b29b      	uxth	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	4413      	add	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	00da      	lsls	r2, r3, #3
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	88db      	ldrh	r3, [r3, #6]
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	827b      	strh	r3, [r7, #18]
 80077d2:	8a7b      	ldrh	r3, [r7, #18]
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <USB_ActivateEndpoint+0x180>
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	823b      	strh	r3, [r7, #16]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	441a      	add	r2, r3
 80077fe:	8a3b      	ldrh	r3, [r7, #16]
 8007800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007810:	b29b      	uxth	r3, r3
 8007812:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d020      	beq.n	800785e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007832:	81bb      	strh	r3, [r7, #12]
 8007834:	89bb      	ldrh	r3, [r7, #12]
 8007836:	f083 0320 	eor.w	r3, r3, #32
 800783a:	81bb      	strh	r3, [r7, #12]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	89bb      	ldrh	r3, [r7, #12]
 8007848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007858:	b29b      	uxth	r3, r3
 800785a:	8013      	strh	r3, [r2, #0]
 800785c:	e2a6      	b.n	8007dac <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007874:	81fb      	strh	r3, [r7, #14]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]
 8007896:	e289      	b.n	8007dac <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	633b      	str	r3, [r7, #48]	; 0x30
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	4413      	add	r3, r2
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	00da      	lsls	r2, r3, #3
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	88db      	ldrh	r3, [r3, #6]
 80078c0:	085b      	lsrs	r3, r3, #1
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	4413      	add	r3, r2
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	00da      	lsls	r2, r3, #3
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	4413      	add	r3, r2
 80078ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b3e      	cmp	r3, #62	; 0x3e
 80078f6:	d918      	bls.n	800792a <USB_ActivateEndpoint+0x296>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	095b      	lsrs	r3, r3, #5
 80078fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <USB_ActivateEndpoint+0x27e>
 800790c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800790e:	3b01      	subs	r3, #1
 8007910:	66bb      	str	r3, [r7, #104]	; 0x68
 8007912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007914:	b29b      	uxth	r3, r3
 8007916:	029b      	lsls	r3, r3, #10
 8007918:	b29b      	uxth	r3, r3
 800791a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007922:	b29a      	uxth	r2, r3
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	e029      	b.n	800797e <USB_ActivateEndpoint+0x2ea>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d112      	bne.n	8007958 <USB_ActivateEndpoint+0x2c4>
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800793c:	b29a      	uxth	r2, r3
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	801a      	strh	r2, [r3, #0]
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007950:	b29a      	uxth	r2, r3
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e012      	b.n	800797e <USB_ActivateEndpoint+0x2ea>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <USB_ActivateEndpoint+0x2de>
 800796c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800796e:	3301      	adds	r3, #1
 8007970:	66bb      	str	r3, [r7, #104]	; 0x68
 8007972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007974:	b29b      	uxth	r3, r3
 8007976:	029b      	lsls	r3, r3, #10
 8007978:	b29a      	uxth	r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	847b      	strh	r3, [r7, #34]	; 0x22
 800798c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800798e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01b      	beq.n	80079ce <USB_ActivateEndpoint+0x33a>
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ac:	843b      	strh	r3, [r7, #32]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	441a      	add	r2, r3
 80079b8:	8c3b      	ldrh	r3, [r7, #32]
 80079ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e4:	83fb      	strh	r3, [r7, #30]
 80079e6:	8bfb      	ldrh	r3, [r7, #30]
 80079e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079ec:	83fb      	strh	r3, [r7, #30]
 80079ee:	8bfb      	ldrh	r3, [r7, #30]
 80079f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079f4:	83fb      	strh	r3, [r7, #30]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	441a      	add	r2, r3
 8007a00:	8bfb      	ldrh	r3, [r7, #30]
 8007a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]
 8007a16:	e1c9      	b.n	8007dac <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d11e      	bne.n	8007a5e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	441a      	add	r2, r3
 8007a44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	8013      	strh	r3, [r2, #0]
 8007a5c:	e01d      	b.n	8007a9a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	441a      	add	r2, r3
 8007a82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aaa:	4413      	add	r3, r2
 8007aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00da      	lsls	r2, r3, #3
 8007ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007abc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	891b      	ldrh	r3, [r3, #8]
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ade:	4413      	add	r3, r2
 8007ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	00da      	lsls	r2, r3, #3
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007af0:	653b      	str	r3, [r7, #80]	; 0x50
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	895b      	ldrh	r3, [r3, #10]
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b00:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 8093 	bne.w	8007c32 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01b      	beq.n	8007b60 <USB_ActivateEndpoint+0x4cc>
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	441a      	add	r2, r3
 8007b4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01b      	beq.n	8007bb0 <USB_ActivateEndpoint+0x51c>
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bce:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	441a      	add	r2, r3
 8007c1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	8013      	strh	r3, [r2, #0]
 8007c30:	e0bc      	b.n	8007dac <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01d      	beq.n	8007c8a <USB_ActivateEndpoint+0x5f6>
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	441a      	add	r2, r3
 8007c72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01d      	beq.n	8007ce2 <USB_ActivateEndpoint+0x64e>
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	441a      	add	r2, r3
 8007cca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	78db      	ldrb	r3, [r3, #3]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d024      	beq.n	8007d34 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d08:	f083 0320 	eor.w	r3, r3, #32
 8007d0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8013      	strh	r3, [r2, #0]
 8007d32:	e01d      	b.n	8007d70 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	441a      	add	r2, r3
 8007d58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007dac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3774      	adds	r7, #116	; 0x74
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b08d      	sub	sp, #52	; 0x34
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	7b1b      	ldrb	r3, [r3, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 808e 	bne.w	8007eec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d044      	beq.n	8007e62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	81bb      	strh	r3, [r7, #12]
 8007de6:	89bb      	ldrh	r3, [r7, #12]
 8007de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01b      	beq.n	8007e28 <USB_DeactivateEndpoint+0x6c>
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	817b      	strh	r3, [r7, #10]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	897b      	ldrh	r3, [r7, #10]
 8007e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e3e:	813b      	strh	r3, [r7, #8]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	441a      	add	r2, r3
 8007e4a:	893b      	ldrh	r3, [r7, #8]
 8007e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	8013      	strh	r3, [r2, #0]
 8007e60:	e192      	b.n	8008188 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	827b      	strh	r3, [r7, #18]
 8007e70:	8a7b      	ldrh	r3, [r7, #18]
 8007e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01b      	beq.n	8007eb2 <USB_DeactivateEndpoint+0xf6>
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e90:	823b      	strh	r3, [r7, #16]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	8a3b      	ldrh	r3, [r7, #16]
 8007e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec8:	81fb      	strh	r3, [r7, #14]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	89fb      	ldrh	r3, [r7, #14]
 8007ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	8013      	strh	r3, [r2, #0]
 8007eea:	e14d      	b.n	8008188 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 80a5 	bne.w	8008040 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	843b      	strh	r3, [r7, #32]
 8007f04:	8c3b      	ldrh	r3, [r7, #32]
 8007f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01b      	beq.n	8007f46 <USB_DeactivateEndpoint+0x18a>
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f24:	83fb      	strh	r3, [r7, #30]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	8bfb      	ldrh	r3, [r7, #30]
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	83bb      	strh	r3, [r7, #28]
 8007f54:	8bbb      	ldrh	r3, [r7, #28]
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01b      	beq.n	8007f96 <USB_DeactivateEndpoint+0x1da>
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f74:	837b      	strh	r3, [r7, #26]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	8b7b      	ldrh	r3, [r7, #26]
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fac:	833b      	strh	r3, [r7, #24]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	8b3b      	ldrh	r3, [r7, #24]
 8007fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe4:	82fb      	strh	r3, [r7, #22]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	8afb      	ldrh	r3, [r7, #22]
 8007ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	b29b      	uxth	r3, r3
 8008004:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800801c:	82bb      	strh	r3, [r7, #20]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	441a      	add	r2, r3
 8008028:	8abb      	ldrh	r3, [r7, #20]
 800802a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803a:	b29b      	uxth	r3, r3
 800803c:	8013      	strh	r3, [r2, #0]
 800803e:	e0a3      	b.n	8008188 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800804e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <USB_DeactivateEndpoint+0x2d4>
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800806e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	441a      	add	r2, r3
 800807a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800807c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808c:	b29b      	uxth	r3, r3
 800808e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800809e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <USB_DeactivateEndpoint+0x324>
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080be:	853b      	strh	r3, [r7, #40]	; 0x28
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	441a      	add	r2, r3
 80080ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080dc:	b29b      	uxth	r3, r3
 80080de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	441a      	add	r2, r3
 8008102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800810c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008114:	b29b      	uxth	r3, r3
 8008116:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800812e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	441a      	add	r2, r3
 800813a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800813c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814c:	b29b      	uxth	r3, r3
 800814e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008166:	847b      	strh	r3, [r7, #34]	; 0x22
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	441a      	add	r2, r3
 8008172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008184:	b29b      	uxth	r3, r3
 8008186:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3734      	adds	r7, #52	; 0x34
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b0c2      	sub	sp, #264	; 0x108
 800819a:	af00      	add	r7, sp, #0
 800819c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a4:	6018      	str	r0, [r3, #0]
 80081a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	f040 867b 	bne.w	8008eb8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d908      	bls.n	80081f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80081de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081ee:	e007      	b.n	8008200 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	7b1b      	ldrb	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d13a      	bne.n	8008286 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6959      	ldr	r1, [r3, #20]
 800821c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	88da      	ldrh	r2, [r3, #6]
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800822c:	b29b      	uxth	r3, r3
 800822e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008232:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	f001 fc1d 	bl	8009a76 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800823c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	4413      	add	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	00da      	lsls	r2, r3, #3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4413      	add	r3, r2
 8008272:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	f000 bde3 	b.w	8008e4c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	78db      	ldrb	r3, [r3, #3]
 8008292:	2b02      	cmp	r3, #2
 8008294:	f040 843a 	bne.w	8008b0c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	f240 83b7 	bls.w	8008a24 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	441a      	add	r2, r3
 80082fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008306:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800830a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830e:	b29b      	uxth	r3, r3
 8008310:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6a1a      	ldr	r2, [r3, #32]
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008322:	1ad2      	subs	r2, r2, r3
 8008324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 81b3 	beq.w	80086be <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	633b      	str	r3, [r7, #48]	; 0x30
 8008364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d16d      	bne.n	8008450 <USB_EPStartXfer+0x2ba>
 8008374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	4413      	add	r3, r2
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
 8008398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	00da      	lsls	r2, r3, #3
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	4413      	add	r3, r2
 80083aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b4:	2b3e      	cmp	r3, #62	; 0x3e
 80083b6:	d91c      	bls.n	80083f2 <USB_EPStartXfer+0x25c>
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <USB_EPStartXfer+0x242>
 80083ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083d2:	3b01      	subs	r3, #1
 80083d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083dc:	b29b      	uxth	r3, r3
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e053      	b.n	800849a <USB_EPStartXfer+0x304>
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d112      	bne.n	8008420 <USB_EPStartXfer+0x28a>
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008404:	b29a      	uxth	r2, r3
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008418:	b29a      	uxth	r2, r3
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e03c      	b.n	800849a <USB_EPStartXfer+0x304>
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800842a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <USB_EPStartXfer+0x2aa>
 8008436:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800843a:	3301      	adds	r3, #1
 800843c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008440:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29a      	uxth	r2, r3
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	801a      	strh	r2, [r3, #0]
 800844e:	e024      	b.n	800849a <USB_EPStartXfer+0x304>
 8008450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d11c      	bne.n	800849a <USB_EPStartXfer+0x304>
 8008460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846e:	b29b      	uxth	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	4413      	add	r3, r2
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	00da      	lsls	r2, r3, #3
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	4413      	add	r3, r2
 800848a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008494:	b29a      	uxth	r2, r3
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800849a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	895b      	ldrh	r3, [r3, #10]
 80084a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6959      	ldr	r1, [r3, #20]
 80084b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	f001 fad4 	bl	8009a76 <USB_WritePMA>
            ep->xfer_buff += len;
 80084ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084de:	441a      	add	r2, r3
 80084e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a1a      	ldr	r2, [r3, #32]
 80084f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	d90f      	bls.n	8008528 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6a1a      	ldr	r2, [r3, #32]
 8008514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008518:	1ad2      	subs	r2, r2, r3
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	621a      	str	r2, [r3, #32]
 8008526:	e00e      	b.n	8008546 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d16d      	bne.n	8008632 <USB_EPStartXfer+0x49c>
 8008556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008570:	b29b      	uxth	r3, r3
 8008572:	461a      	mov	r2, r3
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	4413      	add	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	00da      	lsls	r2, r3, #3
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008590:	617b      	str	r3, [r7, #20]
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008596:	2b3e      	cmp	r3, #62	; 0x3e
 8008598:	d91c      	bls.n	80085d4 <USB_EPStartXfer+0x43e>
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <USB_EPStartXfer+0x424>
 80085b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b4:	3b01      	subs	r3, #1
 80085b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085be:	b29b      	uxth	r3, r3
 80085c0:	029b      	lsls	r3, r3, #10
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e059      	b.n	8008688 <USB_EPStartXfer+0x4f2>
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d112      	bne.n	8008602 <USB_EPStartXfer+0x46c>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	801a      	strh	r2, [r3, #0]
 8008600:	e042      	b.n	8008688 <USB_EPStartXfer+0x4f2>
 8008602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d004      	beq.n	8008622 <USB_EPStartXfer+0x48c>
 8008618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800861c:	3301      	adds	r3, #1
 800861e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008626:	b29b      	uxth	r3, r3
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	b29a      	uxth	r2, r3
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	e02a      	b.n	8008688 <USB_EPStartXfer+0x4f2>
 8008632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d122      	bne.n	8008688 <USB_EPStartXfer+0x4f2>
 8008642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	623b      	str	r3, [r7, #32]
 800864e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865c:	b29b      	uxth	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	4413      	add	r3, r2
 8008664:	623b      	str	r3, [r7, #32]
 8008666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	00da      	lsls	r2, r3, #3
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	4413      	add	r3, r2
 8008678:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008682:	b29a      	uxth	r2, r3
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	891b      	ldrh	r3, [r3, #8]
 8008694:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6959      	ldr	r1, [r3, #20]
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086b6:	6800      	ldr	r0, [r0, #0]
 80086b8:	f001 f9dd 	bl	8009a76 <USB_WritePMA>
 80086bc:	e3c6      	b.n	8008e4c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d16d      	bne.n	80087aa <USB_EPStartXfer+0x614>
 80086ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ee:	4413      	add	r3, r2
 80086f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	00da      	lsls	r2, r3, #3
 8008700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008702:	4413      	add	r3, r2
 8008704:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008708:	647b      	str	r3, [r7, #68]	; 0x44
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870e:	2b3e      	cmp	r3, #62	; 0x3e
 8008710:	d91c      	bls.n	800874c <USB_EPStartXfer+0x5b6>
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800871c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <USB_EPStartXfer+0x59c>
 8008728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800872c:	3b01      	subs	r3, #1
 800872e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008736:	b29b      	uxth	r3, r3
 8008738:	029b      	lsls	r3, r3, #10
 800873a:	b29b      	uxth	r3, r3
 800873c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008744:	b29a      	uxth	r2, r3
 8008746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e059      	b.n	8008800 <USB_EPStartXfer+0x66a>
 800874c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008750:	2b00      	cmp	r3, #0
 8008752:	d112      	bne.n	800877a <USB_EPStartXfer+0x5e4>
 8008754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800875e:	b29a      	uxth	r2, r3
 8008760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800876e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008772:	b29a      	uxth	r2, r3
 8008774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008776:	801a      	strh	r2, [r3, #0]
 8008778:	e042      	b.n	8008800 <USB_EPStartXfer+0x66a>
 800877a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <USB_EPStartXfer+0x604>
 8008790:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008794:	3301      	adds	r3, #1
 8008796:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800879a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800879e:	b29b      	uxth	r3, r3
 80087a0:	029b      	lsls	r3, r3, #10
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	e02a      	b.n	8008800 <USB_EPStartXfer+0x66a>
 80087aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	785b      	ldrb	r3, [r3, #1]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d122      	bne.n	8008800 <USB_EPStartXfer+0x66a>
 80087ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	653b      	str	r3, [r7, #80]	; 0x50
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087da:	4413      	add	r3, r2
 80087dc:	653b      	str	r3, [r7, #80]	; 0x50
 80087de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	00da      	lsls	r2, r3, #3
 80087ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	891b      	ldrh	r3, [r3, #8]
 800880c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6959      	ldr	r1, [r3, #20]
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008820:	b29b      	uxth	r3, r3
 8008822:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008826:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800882a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800882e:	6800      	ldr	r0, [r0, #0]
 8008830:	f001 f921 	bl	8009a76 <USB_WritePMA>
            ep->xfer_buff += len;
 8008834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	695a      	ldr	r2, [r3, #20]
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008844:	441a      	add	r2, r3
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a1a      	ldr	r2, [r3, #32]
 800885e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	429a      	cmp	r2, r3
 800886c:	d90f      	bls.n	800888e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800886e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a1a      	ldr	r2, [r3, #32]
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	621a      	str	r2, [r3, #32]
 800888c:	e00e      	b.n	80088ac <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800888e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800889e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2200      	movs	r2, #0
 80088aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	643b      	str	r3, [r7, #64]	; 0x40
 80088b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d16d      	bne.n	80089a4 <USB_EPStartXfer+0x80e>
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	4413      	add	r3, r2
 80088ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	00da      	lsls	r2, r3, #3
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	4413      	add	r3, r2
 80088fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008902:	637b      	str	r3, [r7, #52]	; 0x34
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008908:	2b3e      	cmp	r3, #62	; 0x3e
 800890a:	d91c      	bls.n	8008946 <USB_EPStartXfer+0x7b0>
 800890c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2b00      	cmp	r3, #0
 8008920:	d104      	bne.n	800892c <USB_EPStartXfer+0x796>
 8008922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008926:	3b01      	subs	r3, #1
 8008928:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008930:	b29b      	uxth	r3, r3
 8008932:	029b      	lsls	r3, r3, #10
 8008934:	b29b      	uxth	r3, r3
 8008936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893e:	b29a      	uxth	r2, r3
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	801a      	strh	r2, [r3, #0]
 8008944:	e053      	b.n	80089ee <USB_EPStartXfer+0x858>
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894a:	2b00      	cmp	r3, #0
 800894c:	d112      	bne.n	8008974 <USB_EPStartXfer+0x7de>
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008958:	b29a      	uxth	r2, r3
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e03c      	b.n	80089ee <USB_EPStartXfer+0x858>
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <USB_EPStartXfer+0x7fe>
 800898a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898e:	3301      	adds	r3, #1
 8008990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	b29b      	uxth	r3, r3
 800899a:	029b      	lsls	r3, r3, #10
 800899c:	b29a      	uxth	r2, r3
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	801a      	strh	r2, [r3, #0]
 80089a2:	e024      	b.n	80089ee <USB_EPStartXfer+0x858>
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d11c      	bne.n	80089ee <USB_EPStartXfer+0x858>
 80089b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c8:	4413      	add	r3, r2
 80089ca:	643b      	str	r3, [r7, #64]	; 0x40
 80089cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	00da      	lsls	r2, r3, #3
 80089da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089dc:	4413      	add	r3, r2
 80089de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	895b      	ldrh	r3, [r3, #10]
 80089fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6959      	ldr	r1, [r3, #20]
 8008a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f001 f82a 	bl	8009a76 <USB_WritePMA>
 8008a22:	e213      	b.n	8008e4c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab0:	4413      	add	r3, r2
 8008ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	00da      	lsls	r2, r3, #3
 8008ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aca:	65bb      	str	r3, [r7, #88]	; 0x58
 8008acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ad4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	891b      	ldrh	r3, [r3, #8]
 8008ae2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6959      	ldr	r1, [r3, #20]
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008afc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b00:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b04:	6800      	ldr	r0, [r0, #0]
 8008b06:	f000 ffb6 	bl	8009a76 <USB_WritePMA>
 8008b0a:	e19f      	b.n	8008e4c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b1c:	1ad2      	subs	r2, r2, r3
 8008b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 80bc 	beq.w	8008cca <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d16d      	bne.n	8008c4a <USB_EPStartXfer+0xab4>
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b8e:	4413      	add	r3, r2
 8008b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	00da      	lsls	r2, r3, #3
 8008ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bae:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb0:	d91c      	bls.n	8008bec <USB_EPStartXfer+0xa56>
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <USB_EPStartXfer+0xa3c>
 8008bc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	029b      	lsls	r3, r3, #10
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008be8:	801a      	strh	r2, [r3, #0]
 8008bea:	e053      	b.n	8008c94 <USB_EPStartXfer+0xafe>
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d112      	bne.n	8008c1a <USB_EPStartXfer+0xa84>
 8008bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	e03c      	b.n	8008c94 <USB_EPStartXfer+0xafe>
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	085b      	lsrs	r3, r3, #1
 8008c20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <USB_EPStartXfer+0xaa4>
 8008c30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c34:	3301      	adds	r3, #1
 8008c36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	029b      	lsls	r3, r3, #10
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c46:	801a      	strh	r2, [r3, #0]
 8008c48:	e024      	b.n	8008c94 <USB_EPStartXfer+0xafe>
 8008c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d11c      	bne.n	8008c94 <USB_EPStartXfer+0xafe>
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6e:	4413      	add	r3, r2
 8008c70:	673b      	str	r3, [r7, #112]	; 0x70
 8008c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	00da      	lsls	r2, r3, #3
 8008c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c82:	4413      	add	r3, r2
 8008c84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	895b      	ldrh	r3, [r3, #10]
 8008ca0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6959      	ldr	r1, [r3, #20]
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cbe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cc2:	6800      	ldr	r0, [r0, #0]
 8008cc4:	f000 fed7 	bl	8009a76 <USB_WritePMA>
 8008cc8:	e0c0      	b.n	8008e4c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d16d      	bne.n	8008db6 <USB_EPStartXfer+0xc20>
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cfa:	4413      	add	r3, r2
 8008cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	00da      	lsls	r2, r3, #3
 8008d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d0e:	4413      	add	r3, r2
 8008d10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d1c:	d91c      	bls.n	8008d58 <USB_EPStartXfer+0xbc2>
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d22:	095b      	lsrs	r3, r3, #5
 8008d24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <USB_EPStartXfer+0xba8>
 8008d34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	029b      	lsls	r3, r3, #10
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	e05f      	b.n	8008e18 <USB_EPStartXfer+0xc82>
 8008d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d112      	bne.n	8008d86 <USB_EPStartXfer+0xbf0>
 8008d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6e:	801a      	strh	r2, [r3, #0]
 8008d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	e048      	b.n	8008e18 <USB_EPStartXfer+0xc82>
 8008d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d004      	beq.n	8008da6 <USB_EPStartXfer+0xc10>
 8008d9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008da0:	3301      	adds	r3, #1
 8008da2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008da6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	029b      	lsls	r3, r3, #10
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db2:	801a      	strh	r2, [r3, #0]
 8008db4:	e030      	b.n	8008e18 <USB_EPStartXfer+0xc82>
 8008db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d128      	bne.n	8008e18 <USB_EPStartXfer+0xc82>
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dea:	4413      	add	r3, r2
 8008dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	00da      	lsls	r2, r3, #3
 8008dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e02:	4413      	add	r3, r2
 8008e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	891b      	ldrh	r3, [r3, #8]
 8008e24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6959      	ldr	r1, [r3, #20]
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e46:	6800      	ldr	r0, [r0, #0]
 8008e48:	f000 fe15 	bl	8009a76 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e72:	817b      	strh	r3, [r7, #10]
 8008e74:	897b      	ldrh	r3, [r7, #10]
 8008e76:	f083 0310 	eor.w	r3, r3, #16
 8008e7a:	817b      	strh	r3, [r7, #10]
 8008e7c:	897b      	ldrh	r3, [r7, #10]
 8008e7e:	f083 0320 	eor.w	r3, r3, #32
 8008e82:	817b      	strh	r3, [r7, #10]
 8008e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	441a      	add	r2, r3
 8008e9e:	897b      	ldrh	r3, [r7, #10]
 8008ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	8013      	strh	r3, [r2, #0]
 8008eb4:	f000 bc9f 	b.w	80097f6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	7b1b      	ldrb	r3, [r3, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 80ae 	bne.w	8009026 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	699a      	ldr	r2, [r3, #24]
 8008ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d917      	bls.n	8008f16 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	619a      	str	r2, [r3, #24]
 8008f14:	e00e      	b.n	8008f34 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2200      	movs	r2, #0
 8008f32:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f58:	4413      	add	r3, r2
 8008f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	00da      	lsls	r2, r3, #3
 8008f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f70:	4413      	add	r3, r2
 8008f72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f80:	d91d      	bls.n	8008fbe <USB_EPStartXfer+0xe28>
 8008f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f90:	f003 031f 	and.w	r3, r3, #31
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <USB_EPStartXfer+0xe0c>
 8008f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	029b      	lsls	r3, r3, #10
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	e3e1      	b.n	8009782 <USB_EPStartXfer+0x15ec>
 8008fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d116      	bne.n	8008ff4 <USB_EPStartXfer+0xe5e>
 8008fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fd8:	801a      	strh	r2, [r3, #0]
 8008fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e3c6      	b.n	8009782 <USB_EPStartXfer+0x15ec>
 8008ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <USB_EPStartXfer+0xe7e>
 800900a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800900e:	3301      	adds	r3, #1
 8009010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009014:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009018:	b29b      	uxth	r3, r3
 800901a:	029b      	lsls	r3, r3, #10
 800901c:	b29a      	uxth	r2, r3
 800901e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009022:	801a      	strh	r2, [r3, #0]
 8009024:	e3ad      	b.n	8009782 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	78db      	ldrb	r3, [r3, #3]
 8009032:	2b02      	cmp	r3, #2
 8009034:	f040 8200 	bne.w	8009438 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f040 8091 	bne.w	800916c <USB_EPStartXfer+0xfd6>
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009066:	b29b      	uxth	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800906e:	4413      	add	r3, r2
 8009070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	00da      	lsls	r2, r3, #3
 8009082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009086:	4413      	add	r3, r2
 8009088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800908c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b3e      	cmp	r3, #62	; 0x3e
 800909e:	d925      	bls.n	80090ec <USB_EPStartXfer+0xf56>
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d104      	bne.n	80090d0 <USB_EPStartXfer+0xf3a>
 80090c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ca:	3b01      	subs	r3, #1
 80090cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	029b      	lsls	r3, r3, #10
 80090d8:	b29b      	uxth	r3, r3
 80090da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e074      	b.n	80091d6 <USB_EPStartXfer+0x1040>
 80090ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d116      	bne.n	800912a <USB_EPStartXfer+0xf94>
 80090fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009108:	b29a      	uxth	r2, r3
 800910a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800910e:	801a      	strh	r2, [r3, #0]
 8009110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	b29b      	uxth	r3, r3
 8009118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800911c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009120:	b29a      	uxth	r2, r3
 8009122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	e055      	b.n	80091d6 <USB_EPStartXfer+0x1040>
 800912a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800913c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <USB_EPStartXfer+0xfc4>
 8009150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009154:	3301      	adds	r3, #1
 8009156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800915a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915e:	b29b      	uxth	r3, r3
 8009160:	029b      	lsls	r3, r3, #10
 8009162:	b29a      	uxth	r2, r3
 8009164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009168:	801a      	strh	r2, [r3, #0]
 800916a:	e034      	b.n	80091d6 <USB_EPStartXfer+0x1040>
 800916c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d12c      	bne.n	80091d6 <USB_EPStartXfer+0x1040>
 800917c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800918a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009198:	b29b      	uxth	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091a0:	4413      	add	r3, r2
 80091a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	00da      	lsls	r2, r3, #3
 80091b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091b8:	4413      	add	r3, r2
 80091ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f040 8091 	bne.w	8009318 <USB_EPStartXfer+0x1182>
 80091f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009212:	b29b      	uxth	r3, r3
 8009214:	461a      	mov	r2, r3
 8009216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800921a:	4413      	add	r3, r2
 800921c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	00da      	lsls	r2, r3, #3
 800922e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009232:	4413      	add	r3, r2
 8009234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800923c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	2b3e      	cmp	r3, #62	; 0x3e
 800924a:	d925      	bls.n	8009298 <USB_EPStartXfer+0x1102>
 800924c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800925e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <USB_EPStartXfer+0x10e6>
 8009272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009276:	3b01      	subs	r3, #1
 8009278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800927c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009280:	b29b      	uxth	r3, r3
 8009282:	029b      	lsls	r3, r3, #10
 8009284:	b29b      	uxth	r3, r3
 8009286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800928e:	b29a      	uxth	r2, r3
 8009290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	e06d      	b.n	8009374 <USB_EPStartXfer+0x11de>
 8009298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d116      	bne.n	80092d6 <USB_EPStartXfer+0x1140>
 80092a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092ba:	801a      	strh	r2, [r3, #0]
 80092bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092d2:	801a      	strh	r2, [r3, #0]
 80092d4:	e04e      	b.n	8009374 <USB_EPStartXfer+0x11de>
 80092d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	085b      	lsrs	r3, r3, #1
 80092e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <USB_EPStartXfer+0x1170>
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	3301      	adds	r3, #1
 8009302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800930a:	b29b      	uxth	r3, r3
 800930c:	029b      	lsls	r3, r3, #10
 800930e:	b29a      	uxth	r2, r3
 8009310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	e02d      	b.n	8009374 <USB_EPStartXfer+0x11de>
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d125      	bne.n	8009374 <USB_EPStartXfer+0x11de>
 8009328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800933e:	4413      	add	r3, r2
 8009340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	00da      	lsls	r2, r3, #3
 8009352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009356:	4413      	add	r3, r2
 8009358:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800935c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	b29a      	uxth	r2, r3
 800936e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009372:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 81fe 	beq.w	8009782 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <USB_EPStartXfer+0x1228>
 80093b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10d      	bne.n	80093da <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f040 81db 	bne.w	8009782 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80093cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 81d4 	bne.w	8009782 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80093da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009400:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	441a      	add	r2, r3
 800941e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800942e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009432:	b29b      	uxth	r3, r3
 8009434:	8013      	strh	r3, [r2, #0]
 8009436:	e1a4      	b.n	8009782 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	78db      	ldrb	r3, [r3, #3]
 8009444:	2b01      	cmp	r3, #1
 8009446:	f040 819a 	bne.w	800977e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800944a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699a      	ldr	r2, [r3, #24]
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	429a      	cmp	r2, r3
 8009464:	d917      	bls.n	8009496 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009486:	1ad2      	subs	r2, r2, r3
 8009488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	619a      	str	r2, [r3, #24]
 8009494:	e00e      	b.n	80094b4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80094a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2200      	movs	r2, #0
 80094b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80094b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d178      	bne.n	80095b6 <USB_EPStartXfer+0x1420>
 80094c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	461a      	mov	r2, r3
 80094e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094e8:	4413      	add	r3, r2
 80094ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	00da      	lsls	r2, r3, #3
 80094fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009500:	4413      	add	r3, r2
 8009502:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800950a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950e:	2b3e      	cmp	r3, #62	; 0x3e
 8009510:	d91d      	bls.n	800954e <USB_EPStartXfer+0x13b8>
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009520:	f003 031f 	and.w	r3, r3, #31
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USB_EPStartXfer+0x139c>
 8009528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952c:	3b01      	subs	r3, #1
 800952e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009536:	b29b      	uxth	r3, r3
 8009538:	029b      	lsls	r3, r3, #10
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e064      	b.n	8009618 <USB_EPStartXfer+0x1482>
 800954e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009552:	2b00      	cmp	r3, #0
 8009554:	d116      	bne.n	8009584 <USB_EPStartXfer+0x13ee>
 8009556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	b29b      	uxth	r3, r3
 800955e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009562:	b29a      	uxth	r2, r3
 8009564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009568:	801a      	strh	r2, [r3, #0]
 800956a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957a:	b29a      	uxth	r2, r3
 800957c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	e049      	b.n	8009618 <USB_EPStartXfer+0x1482>
 8009584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <USB_EPStartXfer+0x140e>
 800959a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800959e:	3301      	adds	r3, #1
 80095a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	029b      	lsls	r3, r3, #10
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e030      	b.n	8009618 <USB_EPStartXfer+0x1482>
 80095b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d128      	bne.n	8009618 <USB_EPStartXfer+0x1482>
 80095c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095ea:	4413      	add	r3, r2
 80095ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80095f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	00da      	lsls	r2, r3, #3
 80095fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009602:	4413      	add	r3, r2
 8009604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800960c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009610:	b29a      	uxth	r2, r3
 8009612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009616:	801a      	strh	r2, [r3, #0]
 8009618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d178      	bne.n	8009728 <USB_EPStartXfer+0x1592>
 8009636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009652:	b29b      	uxth	r3, r3
 8009654:	461a      	mov	r2, r3
 8009656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800965a:	4413      	add	r3, r2
 800965c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	00da      	lsls	r2, r3, #3
 800966e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009672:	4413      	add	r3, r2
 8009674:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009680:	2b3e      	cmp	r3, #62	; 0x3e
 8009682:	d91d      	bls.n	80096c0 <USB_EPStartXfer+0x152a>
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009688:	095b      	lsrs	r3, r3, #5
 800968a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009692:	f003 031f 	and.w	r3, r3, #31
 8009696:	2b00      	cmp	r3, #0
 8009698:	d104      	bne.n	80096a4 <USB_EPStartXfer+0x150e>
 800969a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800969e:	3b01      	subs	r3, #1
 80096a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	029b      	lsls	r3, r3, #10
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096bc:	801a      	strh	r2, [r3, #0]
 80096be:	e060      	b.n	8009782 <USB_EPStartXfer+0x15ec>
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d116      	bne.n	80096f6 <USB_EPStartXfer+0x1560>
 80096c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096da:	801a      	strh	r2, [r3, #0]
 80096dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	e045      	b.n	8009782 <USB_EPStartXfer+0x15ec>
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <USB_EPStartXfer+0x1580>
 800970c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009710:	3301      	adds	r3, #1
 8009712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800971a:	b29b      	uxth	r3, r3
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	b29a      	uxth	r2, r3
 8009720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009724:	801a      	strh	r2, [r3, #0]
 8009726:	e02c      	b.n	8009782 <USB_EPStartXfer+0x15ec>
 8009728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	785b      	ldrb	r3, [r3, #1]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d124      	bne.n	8009782 <USB_EPStartXfer+0x15ec>
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009746:	b29b      	uxth	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800974e:	4413      	add	r3, r2
 8009750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	00da      	lsls	r2, r3, #3
 8009762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009766:	4413      	add	r3, r2
 8009768:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800976c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009774:	b29a      	uxth	r2, r3
 8009776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800977a:	801a      	strh	r2, [r3, #0]
 800977c:	e001      	b.n	8009782 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e03a      	b.n	80097f8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	441a      	add	r2, r3
 80097de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009802:	b480      	push	{r7}
 8009804:	b085      	sub	sp, #20
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	785b      	ldrb	r3, [r3, #1]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d020      	beq.n	8009856 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	b29b      	uxth	r3, r3
 8009822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800982a:	81bb      	strh	r3, [r7, #12]
 800982c:	89bb      	ldrh	r3, [r7, #12]
 800982e:	f083 0310 	eor.w	r3, r3, #16
 8009832:	81bb      	strh	r3, [r7, #12]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	441a      	add	r2, r3
 800983e:	89bb      	ldrh	r3, [r7, #12]
 8009840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800984c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009850:	b29b      	uxth	r3, r3
 8009852:	8013      	strh	r3, [r2, #0]
 8009854:	e01f      	b.n	8009896 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	881b      	ldrh	r3, [r3, #0]
 8009862:	b29b      	uxth	r3, r3
 8009864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986c:	81fb      	strh	r3, [r7, #14]
 800986e:	89fb      	ldrh	r3, [r7, #14]
 8009870:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009874:	81fb      	strh	r3, [r7, #14]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	441a      	add	r2, r3
 8009880:	89fb      	ldrh	r3, [r7, #14]
 8009882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	b29b      	uxth	r3, r3
 8009894:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b087      	sub	sp, #28
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	7b1b      	ldrb	r3, [r3, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f040 809d 	bne.w	80099f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d04c      	beq.n	800995a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	823b      	strh	r3, [r7, #16]
 80098ce:	8a3b      	ldrh	r3, [r7, #16]
 80098d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01b      	beq.n	8009910 <USB_EPClearStall+0x6c>
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ee:	81fb      	strh	r3, [r7, #14]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	441a      	add	r2, r3
 80098fa:	89fb      	ldrh	r3, [r7, #14]
 80098fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800990c:	b29b      	uxth	r3, r3
 800990e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	78db      	ldrb	r3, [r3, #3]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d06c      	beq.n	80099f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800992a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800992e:	81bb      	strh	r3, [r7, #12]
 8009930:	89bb      	ldrh	r3, [r7, #12]
 8009932:	f083 0320 	eor.w	r3, r3, #32
 8009936:	81bb      	strh	r3, [r7, #12]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	441a      	add	r2, r3
 8009942:	89bb      	ldrh	r3, [r7, #12]
 8009944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800994c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009954:	b29b      	uxth	r3, r3
 8009956:	8013      	strh	r3, [r2, #0]
 8009958:	e04b      	b.n	80099f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	82fb      	strh	r3, [r7, #22]
 8009968:	8afb      	ldrh	r3, [r7, #22]
 800996a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01b      	beq.n	80099aa <USB_EPClearStall+0x106>
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	82bb      	strh	r3, [r7, #20]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	441a      	add	r2, r3
 8009994:	8abb      	ldrh	r3, [r7, #20]
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c0:	827b      	strh	r3, [r7, #18]
 80099c2:	8a7b      	ldrh	r3, [r7, #18]
 80099c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099c8:	827b      	strh	r3, [r7, #18]
 80099ca:	8a7b      	ldrh	r3, [r7, #18]
 80099cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099d0:	827b      	strh	r3, [r7, #18]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	441a      	add	r2, r3
 80099dc:	8a7b      	ldrh	r3, [r7, #18]
 80099de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d103      	bne.n	8009a1a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2280      	movs	r2, #128	; 0x80
 8009a16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a68:	68fb      	ldr	r3, [r7, #12]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b08d      	sub	sp, #52	; 0x34
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	4611      	mov	r1, r2
 8009a82:	461a      	mov	r2, r3
 8009a84:	460b      	mov	r3, r1
 8009a86:	80fb      	strh	r3, [r7, #6]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a8c:	88bb      	ldrh	r3, [r7, #4]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	085b      	lsrs	r3, r3, #1
 8009a92:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a9c:	88fa      	ldrh	r2, [r7, #6]
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aac:	e01b      	b.n	8009ae6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	3301      	adds	r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e0      	bne.n	8009aae <USB_WritePMA+0x38>
  }
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	3734      	adds	r7, #52	; 0x34
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b08b      	sub	sp, #44	; 0x2c
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	4611      	mov	r1, r2
 8009b06:	461a      	mov	r2, r3
 8009b08:	460b      	mov	r3, r1
 8009b0a:	80fb      	strh	r3, [r7, #6]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b10:	88bb      	ldrh	r3, [r7, #4]
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b20:	88fa      	ldrh	r2, [r7, #6]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b2a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b30:	e018      	b.n	8009b64 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	3b01      	subs	r3, #1
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e3      	bne.n	8009b32 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b6a:	88bb      	ldrh	r3, [r7, #4]
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d007      	beq.n	8009b86 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	701a      	strb	r2, [r3, #0]
  }
}
 8009b86:	bf00      	nop
 8009b88:	372c      	adds	r7, #44	; 0x2c
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b9e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ba2:	f002 f901 	bl	800bda8 <USBD_static_malloc>
 8009ba6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d105      	bne.n	8009bba <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e066      	b.n	8009c88 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	7c1b      	ldrb	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d119      	bne.n	8009bfe <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bce:	2202      	movs	r2, #2
 8009bd0:	2181      	movs	r1, #129	; 0x81
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 ff8d 	bl	800baf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009be2:	2202      	movs	r2, #2
 8009be4:	2101      	movs	r1, #1
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f001 ff83 	bl	800baf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009bfc:	e016      	b.n	8009c2c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	2202      	movs	r2, #2
 8009c02:	2181      	movs	r1, #129	; 0x81
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 ff74 	bl	800baf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c10:	2340      	movs	r3, #64	; 0x40
 8009c12:	2202      	movs	r2, #2
 8009c14:	2101      	movs	r1, #1
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 ff6b 	bl	800baf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2210      	movs	r2, #16
 8009c28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	2203      	movs	r2, #3
 8009c30:	2182      	movs	r1, #130	; 0x82
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 ff5d 	bl	800baf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	7c1b      	ldrb	r3, [r3, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d109      	bne.n	8009c76 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f002 f82f 	bl	800bcd2 <USBD_LL_PrepareReceive>
 8009c74:	e007      	b.n	8009c86 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	2101      	movs	r1, #1
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f002 f826 	bl	800bcd2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c9c:	2181      	movs	r1, #129	; 0x81
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 ff4d 	bl	800bb3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009caa:	2101      	movs	r1, #1
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 ff46 	bl	800bb3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cba:	2182      	movs	r1, #130	; 0x82
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f001 ff3e 	bl	800bb3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00e      	beq.n	8009cfa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cec:	4618      	mov	r0, r3
 8009cee:	f002 f869 	bl	800bdc4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e0af      	b.n	8009e8c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d03f      	beq.n	8009db8 <USBD_CDC_Setup+0xb4>
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	f040 809f 	bne.w	8009e7c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	88db      	ldrh	r3, [r3, #6]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d02e      	beq.n	8009da4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	da16      	bge.n	8009d7e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	88d2      	ldrh	r2, [r2, #6]
 8009d62:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	88db      	ldrh	r3, [r3, #6]
 8009d68:	2b07      	cmp	r3, #7
 8009d6a:	bf28      	it	cs
 8009d6c:	2307      	movcs	r3, #7
 8009d6e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	89fa      	ldrh	r2, [r7, #14]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 facf 	bl	800b31a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009d7c:	e085      	b.n	8009e8a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	785a      	ldrb	r2, [r3, #1]
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	88db      	ldrh	r3, [r3, #6]
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009d94:	6939      	ldr	r1, [r7, #16]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	88db      	ldrh	r3, [r3, #6]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 fae8 	bl	800b372 <USBD_CtlPrepareRx>
      break;
 8009da2:	e072      	b.n	8009e8a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	7850      	ldrb	r0, [r2, #1]
 8009db0:	2200      	movs	r2, #0
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	4798      	blx	r3
      break;
 8009db6:	e068      	b.n	8009e8a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	785b      	ldrb	r3, [r3, #1]
 8009dbc:	2b0b      	cmp	r3, #11
 8009dbe:	d852      	bhi.n	8009e66 <USBD_CDC_Setup+0x162>
 8009dc0:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <USBD_CDC_Setup+0xc4>)
 8009dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc6:	bf00      	nop
 8009dc8:	08009df9 	.word	0x08009df9
 8009dcc:	08009e75 	.word	0x08009e75
 8009dd0:	08009e67 	.word	0x08009e67
 8009dd4:	08009e67 	.word	0x08009e67
 8009dd8:	08009e67 	.word	0x08009e67
 8009ddc:	08009e67 	.word	0x08009e67
 8009de0:	08009e67 	.word	0x08009e67
 8009de4:	08009e67 	.word	0x08009e67
 8009de8:	08009e67 	.word	0x08009e67
 8009dec:	08009e67 	.word	0x08009e67
 8009df0:	08009e23 	.word	0x08009e23
 8009df4:	08009e4d 	.word	0x08009e4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d107      	bne.n	8009e14 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e04:	f107 030a 	add.w	r3, r7, #10
 8009e08:	2202      	movs	r2, #2
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 fa84 	bl	800b31a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e12:	e032      	b.n	8009e7a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fa0e 	bl	800b238 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e20:	e02b      	b.n	8009e7a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d107      	bne.n	8009e3e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e2e:	f107 030d 	add.w	r3, r7, #13
 8009e32:	2201      	movs	r2, #1
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 fa6f 	bl	800b31a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e3c:	e01d      	b.n	8009e7a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f9f9 	bl	800b238 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	75fb      	strb	r3, [r7, #23]
          break;
 8009e4a:	e016      	b.n	8009e7a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d00f      	beq.n	8009e78 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f001 f9ec 	bl	800b238 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e60:	2303      	movs	r3, #3
 8009e62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e64:	e008      	b.n	8009e78 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f9e5 	bl	800b238 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	75fb      	strb	r3, [r7, #23]
          break;
 8009e72:	e002      	b.n	8009e7a <USBD_CDC_Setup+0x176>
          break;
 8009e74:	bf00      	nop
 8009e76:	e008      	b.n	8009e8a <USBD_CDC_Setup+0x186>
          break;
 8009e78:	bf00      	nop
      }
      break;
 8009e7a:	e006      	b.n	8009e8a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f001 f9da 	bl	800b238 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e84:	2303      	movs	r3, #3
 8009e86:	75fb      	strb	r3, [r7, #23]
      break;
 8009e88:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e04f      	b.n	8009f56 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ebc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	440b      	add	r3, r1
 8009ecc:	3318      	adds	r3, #24
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d029      	beq.n	8009f28 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3318      	adds	r3, #24
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	78f9      	ldrb	r1, [r7, #3]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	460b      	mov	r3, r1
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	00db      	lsls	r3, r3, #3
 8009ef2:	4403      	add	r3, r0
 8009ef4:	3338      	adds	r3, #56	; 0x38
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009efc:	fb01 f303 	mul.w	r3, r1, r3
 8009f00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d110      	bne.n	8009f28 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f06:	78fa      	ldrb	r2, [r7, #3]
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	440b      	add	r3, r1
 8009f14:	3318      	adds	r3, #24
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f1a:	78f9      	ldrb	r1, [r7, #3]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	2200      	movs	r2, #0
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 feb5 	bl	800bc90 <USBD_LL_Transmit>
 8009f26:	e015      	b.n	8009f54 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00b      	beq.n	8009f54 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f50:	78fa      	ldrb	r2, [r7, #3]
 8009f52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e015      	b.n	8009fac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 fec5 	bl	800bd14 <USBD_LL_GetRxDataSize>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e01b      	b.n	800a006 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d015      	beq.n	800a004 <USBD_CDC_EP0_RxReady+0x50>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009fde:	2bff      	cmp	r3, #255	; 0xff
 8009fe0:	d010      	beq.n	800a004 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009ff0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ff8:	b292      	uxth	r2, r2
 8009ffa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	22ff      	movs	r2, #255	; 0xff
 800a000:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2243      	movs	r2, #67	; 0x43
 800a01c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a01e:	4b03      	ldr	r3, [pc, #12]	; (800a02c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	200000d8 	.word	0x200000d8

0800a030 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2243      	movs	r2, #67	; 0x43
 800a03c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a03e:	4b03      	ldr	r3, [pc, #12]	; (800a04c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	20000094 	.word	0x20000094

0800a050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2243      	movs	r2, #67	; 0x43
 800a05c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a05e:	4b03      	ldr	r3, [pc, #12]	; (800a06c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	2000011c 	.word	0x2000011c

0800a070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	220a      	movs	r2, #10
 800a07c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a07e:	4b03      	ldr	r3, [pc, #12]	; (800a08c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20000050 	.word	0x20000050

0800a090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e004      	b.n	800a0ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b087      	sub	sp, #28
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e008      	b.n	800a0ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a106:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a10e:	2303      	movs	r3, #3
 800a110:	e004      	b.n	800a11c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a136:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	e01a      	b.n	800a180 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a150:	2b00      	cmp	r3, #0
 800a152:	d114      	bne.n	800a17e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2201      	movs	r2, #1
 800a158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a172:	2181      	movs	r1, #129	; 0x81
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 fd8b 	bl	800bc90 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a196:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e016      	b.n	800a1d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	7c1b      	ldrb	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d109      	bne.n	800a1c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fd89 	bl	800bcd2 <USBD_LL_PrepareReceive>
 800a1c0:	e007      	b.n	800a1d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 fd80 	bl	800bcd2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e01f      	b.n	800a234 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	79fa      	ldrb	r2, [r7, #7]
 800a226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f001 fbe7 	bl	800b9fc <USBD_LL_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	e016      	b.n	800a282 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	f107 020e 	add.w	r2, r7, #14
 800a274:	4610      	mov	r0, r2
 800a276:	4798      	blx	r3
 800a278:	4602      	mov	r2, r0
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fc12 	bl	800babc <USBD_LL_Start>
 800a298:	4603      	mov	r3, r0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	78fa      	ldrb	r2, [r7, #3]
 800a310:	4611      	mov	r1, r2
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
  }

  return USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 ff46 	bl	800b1c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a354:	f003 031f 	and.w	r3, r3, #31
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d01a      	beq.n	800a392 <USBD_LL_SetupStage+0x72>
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d822      	bhi.n	800a3a6 <USBD_LL_SetupStage+0x86>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <USBD_LL_SetupStage+0x4a>
 800a364:	2b01      	cmp	r3, #1
 800a366:	d00a      	beq.n	800a37e <USBD_LL_SetupStage+0x5e>
 800a368:	e01d      	b.n	800a3a6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f9ee 	bl	800a754 <USBD_StdDevReq>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
      break;
 800a37c:	e020      	b.n	800a3c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa52 	bl	800a830 <USBD_StdItfReq>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73fb      	strb	r3, [r7, #15]
      break;
 800a390:	e016      	b.n	800a3c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa91 	bl	800a8c2 <USBD_StdEPReq>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a4:	e00c      	b.n	800a3c0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 fbe1 	bl	800bb7c <USBD_LL_StallEP>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3be:	bf00      	nop
  }

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b086      	sub	sp, #24
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d138      	bne.n	800a450 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d14a      	bne.n	800a486 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d913      	bls.n	800a424 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	1ad2      	subs	r2, r2, r3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	4293      	cmp	r3, r2
 800a414:	bf28      	it	cs
 800a416:	4613      	movcs	r3, r2
 800a418:	461a      	mov	r2, r3
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 ffc5 	bl	800b3ac <USBD_CtlContinueRx>
 800a422:	e030      	b.n	800a486 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d10b      	bne.n	800a448 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 ffc0 	bl	800b3ce <USBD_CtlSendStatus>
 800a44e:	e01a      	b.n	800a486 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d114      	bne.n	800a486 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00e      	beq.n	800a486 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	7afa      	ldrb	r2, [r7, #11]
 800a472:	4611      	mov	r1, r2
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	4798      	blx	r3
 800a478:	4603      	mov	r3, r0
 800a47a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	e000      	b.n	800a488 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	460b      	mov	r3, r1
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d16b      	bne.n	800a57c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3314      	adds	r3, #20
 800a4a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d156      	bne.n	800a562 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d914      	bls.n	800a4ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 ff3a 	bl	800b350 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4dc:	2300      	movs	r3, #0
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f001 fbf5 	bl	800bcd2 <USBD_LL_PrepareReceive>
 800a4e8:	e03b      	b.n	800a562 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d11c      	bne.n	800a530 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d316      	bcc.n	800a530 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d20f      	bcs.n	800a530 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a510:	2200      	movs	r2, #0
 800a512:	2100      	movs	r1, #0
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 ff1b 	bl	800b350 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a522:	2300      	movs	r3, #0
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f001 fbd2 	bl	800bcd2 <USBD_LL_PrepareReceive>
 800a52e:	e018      	b.n	800a562 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d10b      	bne.n	800a554 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a554:	2180      	movs	r1, #128	; 0x80
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f001 fb10 	bl	800bb7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 ff49 	bl	800b3f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d122      	bne.n	800a5b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fe98 	bl	800a2a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a57a:	e01a      	b.n	800a5b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b03      	cmp	r3, #3
 800a586:	d114      	bne.n	800a5b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00e      	beq.n	800a5b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	7afa      	ldrb	r2, [r7, #11]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	4798      	blx	r3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	e000      	b.n	800a5b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e02f      	b.n	800a650 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00f      	beq.n	800a61a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6852      	ldr	r2, [r2, #4]
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	4611      	mov	r1, r2
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a61a:	2340      	movs	r3, #64	; 0x40
 800a61c:	2200      	movs	r2, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 fa66 	bl	800baf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2240      	movs	r2, #64	; 0x40
 800a632:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a636:	2340      	movs	r3, #64	; 0x40
 800a638:	2200      	movs	r2, #0
 800a63a:	2180      	movs	r1, #128	; 0x80
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f001 fa58 	bl	800baf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2240      	movs	r2, #64	; 0x40
 800a64c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	78fa      	ldrb	r2, [r7, #3]
 800a668:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a686:	b2da      	uxtb	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2204      	movs	r2, #4
 800a692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d106      	bne.n	800a6c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e012      	b.n	800a710 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d10b      	bne.n	800a70e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	3301      	adds	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a736:	8a3b      	ldrh	r3, [r7, #16]
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	b21a      	sxth	r2, r3
 800a73c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a740:	4313      	orrs	r3, r2
 800a742:	b21b      	sxth	r3, r3
 800a744:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a746:	89fb      	ldrh	r3, [r7, #14]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a76a:	2b40      	cmp	r3, #64	; 0x40
 800a76c:	d005      	beq.n	800a77a <USBD_StdDevReq+0x26>
 800a76e:	2b40      	cmp	r3, #64	; 0x40
 800a770:	d853      	bhi.n	800a81a <USBD_StdDevReq+0xc6>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <USBD_StdDevReq+0x3a>
 800a776:	2b20      	cmp	r3, #32
 800a778:	d14f      	bne.n	800a81a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
      break;
 800a78c:	e04a      	b.n	800a824 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b09      	cmp	r3, #9
 800a794:	d83b      	bhi.n	800a80e <USBD_StdDevReq+0xba>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <USBD_StdDevReq+0x48>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7f1 	.word	0x0800a7f1
 800a7a0:	0800a805 	.word	0x0800a805
 800a7a4:	0800a80f 	.word	0x0800a80f
 800a7a8:	0800a7fb 	.word	0x0800a7fb
 800a7ac:	0800a80f 	.word	0x0800a80f
 800a7b0:	0800a7cf 	.word	0x0800a7cf
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a80f 	.word	0x0800a80f
 800a7bc:	0800a7e7 	.word	0x0800a7e7
 800a7c0:	0800a7d9 	.word	0x0800a7d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f9de 	bl	800ab88 <USBD_GetDescriptor>
          break;
 800a7cc:	e024      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fb6d 	bl	800aeb0 <USBD_SetAddress>
          break;
 800a7d6:	e01f      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fbac 	bl	800af38 <USBD_SetConfig>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]
          break;
 800a7e4:	e018      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc4b 	bl	800b084 <USBD_GetConfig>
          break;
 800a7ee:	e013      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fc7c 	bl	800b0f0 <USBD_GetStatus>
          break;
 800a7f8:	e00e      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fcab 	bl	800b158 <USBD_SetFeature>
          break;
 800a802:	e009      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fcba 	bl	800b180 <USBD_ClrFeature>
          break;
 800a80c:	e004      	b.n	800a818 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd11 	bl	800b238 <USBD_CtlError>
          break;
 800a816:	bf00      	nop
      }
      break;
 800a818:	e004      	b.n	800a824 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fd0b 	bl	800b238 <USBD_CtlError>
      break;
 800a822:	bf00      	nop
  }

  return ret;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop

0800a830 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a846:	2b40      	cmp	r3, #64	; 0x40
 800a848:	d005      	beq.n	800a856 <USBD_StdItfReq+0x26>
 800a84a:	2b40      	cmp	r3, #64	; 0x40
 800a84c:	d82f      	bhi.n	800a8ae <USBD_StdItfReq+0x7e>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <USBD_StdItfReq+0x26>
 800a852:	2b20      	cmp	r3, #32
 800a854:	d12b      	bne.n	800a8ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	2b02      	cmp	r3, #2
 800a862:	d81d      	bhi.n	800a8a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	889b      	ldrh	r3, [r3, #4]
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d813      	bhi.n	800a896 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	88db      	ldrh	r3, [r3, #6]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d110      	bne.n	800a8aa <USBD_StdItfReq+0x7a>
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10d      	bne.n	800a8aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fd9d 	bl	800b3ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a894:	e009      	b.n	800a8aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fccd 	bl	800b238 <USBD_CtlError>
          break;
 800a89e:	e004      	b.n	800a8aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fcc8 	bl	800b238 <USBD_CtlError>
          break;
 800a8a8:	e000      	b.n	800a8ac <USBD_StdItfReq+0x7c>
          break;
 800a8aa:	bf00      	nop
      }
      break;
 800a8ac:	e004      	b.n	800a8b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fcc1 	bl	800b238 <USBD_CtlError>
      break;
 800a8b6:	bf00      	nop
  }

  return ret;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	889b      	ldrh	r3, [r3, #4]
 800a8d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8de:	2b40      	cmp	r3, #64	; 0x40
 800a8e0:	d007      	beq.n	800a8f2 <USBD_StdEPReq+0x30>
 800a8e2:	2b40      	cmp	r3, #64	; 0x40
 800a8e4:	f200 8145 	bhi.w	800ab72 <USBD_StdEPReq+0x2b0>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00c      	beq.n	800a906 <USBD_StdEPReq+0x44>
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	f040 8140 	bne.w	800ab72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	4798      	blx	r3
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]
      break;
 800a904:	e13a      	b.n	800ab7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d007      	beq.n	800a91e <USBD_StdEPReq+0x5c>
 800a90e:	2b03      	cmp	r3, #3
 800a910:	f300 8129 	bgt.w	800ab66 <USBD_StdEPReq+0x2a4>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d07f      	beq.n	800aa18 <USBD_StdEPReq+0x156>
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d03c      	beq.n	800a996 <USBD_StdEPReq+0xd4>
 800a91c:	e123      	b.n	800ab66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d002      	beq.n	800a930 <USBD_StdEPReq+0x6e>
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d016      	beq.n	800a95c <USBD_StdEPReq+0x9a>
 800a92e:	e02c      	b.n	800a98a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <USBD_StdEPReq+0x90>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b80      	cmp	r3, #128	; 0x80
 800a93a:	d00a      	beq.n	800a952 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 f91b 	bl	800bb7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a946:	2180      	movs	r1, #128	; 0x80
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 f917 	bl	800bb7c <USBD_LL_StallEP>
 800a94e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a950:	e020      	b.n	800a994 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc6f 	bl	800b238 <USBD_CtlError>
              break;
 800a95a:	e01b      	b.n	800a994 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	885b      	ldrh	r3, [r3, #2]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10e      	bne.n	800a982 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00b      	beq.n	800a982 <USBD_StdEPReq+0xc0>
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b80      	cmp	r3, #128	; 0x80
 800a96e:	d008      	beq.n	800a982 <USBD_StdEPReq+0xc0>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	88db      	ldrh	r3, [r3, #6]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 f8fd 	bl	800bb7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fd23 	bl	800b3ce <USBD_CtlSendStatus>

              break;
 800a988:	e004      	b.n	800a994 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fc53 	bl	800b238 <USBD_CtlError>
              break;
 800a992:	bf00      	nop
          }
          break;
 800a994:	e0ec      	b.n	800ab70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d002      	beq.n	800a9a8 <USBD_StdEPReq+0xe6>
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d016      	beq.n	800a9d4 <USBD_StdEPReq+0x112>
 800a9a6:	e030      	b.n	800aa0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <USBD_StdEPReq+0x108>
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	2b80      	cmp	r3, #128	; 0x80
 800a9b2:	d00a      	beq.n	800a9ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f001 f8df 	bl	800bb7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9be:	2180      	movs	r1, #128	; 0x80
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 f8db 	bl	800bb7c <USBD_LL_StallEP>
 800a9c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c8:	e025      	b.n	800aa16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fc33 	bl	800b238 <USBD_CtlError>
              break;
 800a9d2:	e020      	b.n	800aa16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	885b      	ldrh	r3, [r3, #2]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11b      	bne.n	800aa14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 f8e5 	bl	800bbba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fcec 	bl	800b3ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa08:	e004      	b.n	800aa14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fc13 	bl	800b238 <USBD_CtlError>
              break;
 800aa12:	e000      	b.n	800aa16 <USBD_StdEPReq+0x154>
              break;
 800aa14:	bf00      	nop
          }
          break;
 800aa16:	e0ab      	b.n	800ab70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d002      	beq.n	800aa2a <USBD_StdEPReq+0x168>
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d032      	beq.n	800aa8e <USBD_StdEPReq+0x1cc>
 800aa28:	e097      	b.n	800ab5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <USBD_StdEPReq+0x17e>
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	2b80      	cmp	r3, #128	; 0x80
 800aa34:	d004      	beq.n	800aa40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fbfd 	bl	800b238 <USBD_CtlError>
                break;
 800aa3e:	e091      	b.n	800ab64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da0b      	bge.n	800aa60 <USBD_StdEPReq+0x19e>
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	3310      	adds	r3, #16
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	e00b      	b.n	800aa78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	4413      	add	r3, r2
 800aa76:	3304      	adds	r3, #4
 800aa78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2202      	movs	r2, #2
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fc47 	bl	800b31a <USBD_CtlSendData>
              break;
 800aa8c:	e06a      	b.n	800ab64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	da11      	bge.n	800aaba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	f003 020f 	and.w	r2, r3, #15
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	440b      	add	r3, r1
 800aaa8:	3324      	adds	r3, #36	; 0x24
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d117      	bne.n	800aae0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fbc0 	bl	800b238 <USBD_CtlError>
                  break;
 800aab8:	e054      	b.n	800ab64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	f003 020f 	and.w	r2, r3, #15
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d104      	bne.n	800aae0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fbad 	bl	800b238 <USBD_CtlError>
                  break;
 800aade:	e041      	b.n	800ab64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da0b      	bge.n	800ab00 <USBD_StdEPReq+0x23e>
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	3310      	adds	r3, #16
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	3304      	adds	r3, #4
 800aafe:	e00b      	b.n	800ab18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab06:	4613      	mov	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	4413      	add	r3, r2
 800ab16:	3304      	adds	r3, #4
 800ab18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <USBD_StdEPReq+0x264>
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	2b80      	cmp	r3, #128	; 0x80
 800ab24:	d103      	bne.n	800ab2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	e00e      	b.n	800ab4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 f860 	bl	800bbf8 <USBD_LL_IsStallEP>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2201      	movs	r2, #1
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	e002      	b.n	800ab4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fbe1 	bl	800b31a <USBD_CtlSendData>
              break;
 800ab58:	e004      	b.n	800ab64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fb6b 	bl	800b238 <USBD_CtlError>
              break;
 800ab62:	bf00      	nop
          }
          break;
 800ab64:	e004      	b.n	800ab70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb65 	bl	800b238 <USBD_CtlError>
          break;
 800ab6e:	bf00      	nop
      }
      break;
 800ab70:	e004      	b.n	800ab7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fb5f 	bl	800b238 <USBD_CtlError>
      break;
 800ab7a:	bf00      	nop
  }

  return ret;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	885b      	ldrh	r3, [r3, #2]
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	2b0e      	cmp	r3, #14
 800abaa:	f200 8152 	bhi.w	800ae52 <USBD_GetDescriptor+0x2ca>
 800abae:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <USBD_GetDescriptor+0x2c>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800ac25 	.word	0x0800ac25
 800abb8:	0800ac3d 	.word	0x0800ac3d
 800abbc:	0800ac7d 	.word	0x0800ac7d
 800abc0:	0800ae53 	.word	0x0800ae53
 800abc4:	0800ae53 	.word	0x0800ae53
 800abc8:	0800adf3 	.word	0x0800adf3
 800abcc:	0800ae1f 	.word	0x0800ae1f
 800abd0:	0800ae53 	.word	0x0800ae53
 800abd4:	0800ae53 	.word	0x0800ae53
 800abd8:	0800ae53 	.word	0x0800ae53
 800abdc:	0800ae53 	.word	0x0800ae53
 800abe0:	0800ae53 	.word	0x0800ae53
 800abe4:	0800ae53 	.word	0x0800ae53
 800abe8:	0800ae53 	.word	0x0800ae53
 800abec:	0800abf1 	.word	0x0800abf1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac12:	e126      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fb0e 	bl	800b238 <USBD_CtlError>
        err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
      break;
 800ac22:	e11e      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	7c12      	ldrb	r2, [r2, #16]
 800ac30:	f107 0108 	add.w	r1, r7, #8
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	60f8      	str	r0, [r7, #12]
      break;
 800ac3a:	e112      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7c1b      	ldrb	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10d      	bne.n	800ac60 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	f107 0208 	add.w	r2, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac5e:	e100      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	f107 0208 	add.w	r2, r7, #8
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4798      	blx	r3
 800ac70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3301      	adds	r3, #1
 800ac76:	2202      	movs	r2, #2
 800ac78:	701a      	strb	r2, [r3, #0]
      break;
 800ac7a:	e0f2      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	885b      	ldrh	r3, [r3, #2]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b05      	cmp	r3, #5
 800ac84:	f200 80ac 	bhi.w	800ade0 <USBD_GetDescriptor+0x258>
 800ac88:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <USBD_GetDescriptor+0x108>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800aca9 	.word	0x0800aca9
 800ac94:	0800acdd 	.word	0x0800acdd
 800ac98:	0800ad11 	.word	0x0800ad11
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad79 	.word	0x0800ad79
 800aca4:	0800adad 	.word	0x0800adad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7c12      	ldrb	r2, [r2, #16]
 800acc0:	f107 0108 	add.w	r1, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acca:	e091      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fab2 	bl	800b238 <USBD_CtlError>
            err++;
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	3301      	adds	r3, #1
 800acd8:	72fb      	strb	r3, [r7, #11]
          break;
 800acda:	e089      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 0108 	add.w	r1, r7, #8
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfe:	e077      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa98 	bl	800b238 <USBD_CtlError>
            err++;
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0e:	e06f      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7c12      	ldrb	r2, [r2, #16]
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad32:	e05d      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa7e 	bl	800b238 <USBD_CtlError>
            err++;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	72fb      	strb	r3, [r7, #11]
          break;
 800ad42:	e055      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00b      	beq.n	800ad68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	7c12      	ldrb	r2, [r2, #16]
 800ad5c:	f107 0108 	add.w	r1, r7, #8
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad66:	e043      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa64 	bl	800b238 <USBD_CtlError>
            err++;
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	3301      	adds	r3, #1
 800ad74:	72fb      	strb	r3, [r7, #11]
          break;
 800ad76:	e03b      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 0108 	add.w	r1, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9a:	e029      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa4a 	bl	800b238 <USBD_CtlError>
            err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
          break;
 800adaa:	e021      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7c12      	ldrb	r2, [r2, #16]
 800adc4:	f107 0108 	add.w	r1, r7, #8
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adce:	e00f      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa30 	bl	800b238 <USBD_CtlError>
            err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
          break;
 800adde:	e007      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa28 	bl	800b238 <USBD_CtlError>
          err++;
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	3301      	adds	r3, #1
 800adec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800adee:	bf00      	nop
      }
      break;
 800adf0:	e037      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	7c1b      	ldrb	r3, [r3, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d109      	bne.n	800ae0e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae02:	f107 0208 	add.w	r2, r7, #8
 800ae06:	4610      	mov	r0, r2
 800ae08:	4798      	blx	r3
 800ae0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae0c:	e029      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa11 	bl	800b238 <USBD_CtlError>
        err++;
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae1c:	e021      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	7c1b      	ldrb	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10d      	bne.n	800ae42 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	f107 0208 	add.w	r2, r7, #8
 800ae32:	4610      	mov	r0, r2
 800ae34:	4798      	blx	r3
 800ae36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	2207      	movs	r2, #7
 800ae3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae40:	e00f      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9f7 	bl	800b238 <USBD_CtlError>
        err++;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae50:	e007      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f9ef 	bl	800b238 <USBD_CtlError>
      err++;
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae60:	bf00      	nop
  }

  if (err != 0U)
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11e      	bne.n	800aea6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	88db      	ldrh	r3, [r3, #6]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d016      	beq.n	800ae9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae70:	893b      	ldrh	r3, [r7, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00e      	beq.n	800ae94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	88da      	ldrh	r2, [r3, #6]
 800ae7a:	893b      	ldrh	r3, [r7, #8]
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	bf28      	it	cs
 800ae80:	4613      	movcs	r3, r2
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae86:	893b      	ldrh	r3, [r7, #8]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fa44 	bl	800b31a <USBD_CtlSendData>
 800ae92:	e009      	b.n	800aea8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f9ce 	bl	800b238 <USBD_CtlError>
 800ae9c:	e004      	b.n	800aea8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa95 	bl	800b3ce <USBD_CtlSendStatus>
 800aea4:	e000      	b.n	800aea8 <USBD_GetDescriptor+0x320>
    return;
 800aea6:	bf00      	nop
  }
}
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop

0800aeb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	889b      	ldrh	r3, [r3, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d131      	bne.n	800af26 <USBD_SetAddress+0x76>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d12d      	bne.n	800af26 <USBD_SetAddress+0x76>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	885b      	ldrh	r3, [r3, #2]
 800aece:	2b7f      	cmp	r3, #127	; 0x7f
 800aed0:	d829      	bhi.n	800af26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	885b      	ldrh	r3, [r3, #2]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aedc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d104      	bne.n	800aef4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f9a3 	bl	800b238 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef2:	e01d      	b.n	800af30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7bfa      	ldrb	r2, [r7, #15]
 800aef8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fea6 	bl	800bc52 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa61 	bl	800b3ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2202      	movs	r2, #2
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1a:	e009      	b.n	800af30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af24:	e004      	b.n	800af30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f985 	bl	800b238 <USBD_CtlError>
  }
}
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	885b      	ldrh	r3, [r3, #2]
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	4b4c      	ldr	r3, [pc, #304]	; (800b080 <USBD_SetConfig+0x148>)
 800af4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af50:	4b4b      	ldr	r3, [pc, #300]	; (800b080 <USBD_SetConfig+0x148>)
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d905      	bls.n	800af64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f96c 	bl	800b238 <USBD_CtlError>
    return USBD_FAIL;
 800af60:	2303      	movs	r3, #3
 800af62:	e088      	b.n	800b076 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d002      	beq.n	800af76 <USBD_SetConfig+0x3e>
 800af70:	2b03      	cmp	r3, #3
 800af72:	d025      	beq.n	800afc0 <USBD_SetConfig+0x88>
 800af74:	e071      	b.n	800b05a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af76:	4b42      	ldr	r3, [pc, #264]	; (800b080 <USBD_SetConfig+0x148>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01c      	beq.n	800afb8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800af7e:	4b40      	ldr	r3, [pc, #256]	; (800b080 <USBD_SetConfig+0x148>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af88:	4b3d      	ldr	r3, [pc, #244]	; (800b080 <USBD_SetConfig+0x148>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7ff f992 	bl	800a2b8 <USBD_SetClassConfig>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d004      	beq.n	800afa8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f949 	bl	800b238 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afa6:	e065      	b.n	800b074 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fa10 	bl	800b3ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2203      	movs	r2, #3
 800afb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afb6:	e05d      	b.n	800b074 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fa08 	bl	800b3ce <USBD_CtlSendStatus>
      break;
 800afbe:	e059      	b.n	800b074 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afc0:	4b2f      	ldr	r3, [pc, #188]	; (800b080 <USBD_SetConfig+0x148>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d112      	bne.n	800afee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afd0:	4b2b      	ldr	r3, [pc, #172]	; (800b080 <USBD_SetConfig+0x148>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afda:	4b29      	ldr	r3, [pc, #164]	; (800b080 <USBD_SetConfig+0x148>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff f985 	bl	800a2f0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f9f1 	bl	800b3ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afec:	e042      	b.n	800b074 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <USBD_SetConfig+0x148>)
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d02a      	beq.n	800b052 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff f973 	bl	800a2f0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b00a:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <USBD_SetConfig+0x148>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b014:	4b1a      	ldr	r3, [pc, #104]	; (800b080 <USBD_SetConfig+0x148>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff f94c 	bl	800a2b8 <USBD_SetClassConfig>
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00f      	beq.n	800b04a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f903 	bl	800b238 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	b2db      	uxtb	r3, r3
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7ff f958 	bl	800a2f0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2202      	movs	r2, #2
 800b044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b048:	e014      	b.n	800b074 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9bf 	bl	800b3ce <USBD_CtlSendStatus>
      break;
 800b050:	e010      	b.n	800b074 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f9bb 	bl	800b3ce <USBD_CtlSendStatus>
      break;
 800b058:	e00c      	b.n	800b074 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f8eb 	bl	800b238 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b062:	4b07      	ldr	r3, [pc, #28]	; (800b080 <USBD_SetConfig+0x148>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff f941 	bl	800a2f0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b06e:	2303      	movs	r3, #3
 800b070:	73fb      	strb	r3, [r7, #15]
      break;
 800b072:	bf00      	nop
  }

  return ret;
 800b074:	7bfb      	ldrb	r3, [r7, #15]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	200005bc 	.word	0x200005bc

0800b084 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	88db      	ldrh	r3, [r3, #6]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d004      	beq.n	800b0a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f8cd 	bl	800b238 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b09e:	e023      	b.n	800b0e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	dc02      	bgt.n	800b0b2 <USBD_GetConfig+0x2e>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dc03      	bgt.n	800b0b8 <USBD_GetConfig+0x34>
 800b0b0:	e015      	b.n	800b0de <USBD_GetConfig+0x5a>
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d00b      	beq.n	800b0ce <USBD_GetConfig+0x4a>
 800b0b6:	e012      	b.n	800b0de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f927 	bl	800b31a <USBD_CtlSendData>
        break;
 800b0cc:	e00c      	b.n	800b0e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f91f 	bl	800b31a <USBD_CtlSendData>
        break;
 800b0dc:	e004      	b.n	800b0e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f8a9 	bl	800b238 <USBD_CtlError>
        break;
 800b0e6:	bf00      	nop
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b100:	b2db      	uxtb	r3, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	2b02      	cmp	r3, #2
 800b106:	d81e      	bhi.n	800b146 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d004      	beq.n	800b11a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f890 	bl	800b238 <USBD_CtlError>
        break;
 800b118:	e01a      	b.n	800b150 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b126:	2b00      	cmp	r3, #0
 800b128:	d005      	beq.n	800b136 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	f043 0202 	orr.w	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	330c      	adds	r3, #12
 800b13a:	2202      	movs	r2, #2
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f8eb 	bl	800b31a <USBD_CtlSendData>
      break;
 800b144:	e004      	b.n	800b150 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f875 	bl	800b238 <USBD_CtlError>
      break;
 800b14e:	bf00      	nop
  }
}
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d106      	bne.n	800b178 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f92b 	bl	800b3ce <USBD_CtlSendStatus>
  }
}
 800b178:	bf00      	nop
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b190:	b2db      	uxtb	r3, r3
 800b192:	3b01      	subs	r3, #1
 800b194:	2b02      	cmp	r3, #2
 800b196:	d80b      	bhi.n	800b1b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d10c      	bne.n	800b1ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f910 	bl	800b3ce <USBD_CtlSendStatus>
      }
      break;
 800b1ae:	e004      	b.n	800b1ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f840 	bl	800b238 <USBD_CtlError>
      break;
 800b1b8:	e000      	b.n	800b1bc <USBD_ClrFeature+0x3c>
      break;
 800b1ba:	bf00      	nop
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	781a      	ldrb	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fa92 	bl	800a718 <SWAPBYTE>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fa85 	bl	800a718 <SWAPBYTE>
 800b20e:	4603      	mov	r3, r0
 800b210:	461a      	mov	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3301      	adds	r3, #1
 800b220:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fa78 	bl	800a718 <SWAPBYTE>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	80da      	strh	r2, [r3, #6]
}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b242:	2180      	movs	r1, #128	; 0x80
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fc99 	bl	800bb7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b24a:	2100      	movs	r1, #0
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fc95 	bl	800bb7c <USBD_LL_StallEP>
}
 800b252:	bf00      	nop
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d036      	beq.n	800b2de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b274:	6938      	ldr	r0, [r7, #16]
 800b276:	f000 f836 	bl	800b2e6 <USBD_GetLen>
 800b27a:	4603      	mov	r3, r0
 800b27c:	3301      	adds	r3, #1
 800b27e:	b29b      	uxth	r3, r3
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	701a      	strb	r2, [r3, #0]
  idx++;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	3301      	adds	r3, #1
 800b298:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	4413      	add	r3, r2
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2aa:	e013      	b.n	800b2d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	7812      	ldrb	r2, [r2, #0]
 800b2b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	613b      	str	r3, [r7, #16]
    idx++;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e7      	bne.n	800b2ac <USBD_GetString+0x52>
 800b2dc:	e000      	b.n	800b2e0 <USBD_GetString+0x86>
    return;
 800b2de:	bf00      	nop
  }
}
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2f6:	e005      	b.n	800b304 <USBD_GetLen+0x1e>
  {
    len++;
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	3301      	adds	r3, #1
 800b302:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f5      	bne.n	800b2f8 <USBD_GetLen+0x12>
  }

  return len;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2202      	movs	r2, #2
 800b32a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	2100      	movs	r1, #0
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f000 fca5 	bl	800bc90 <USBD_LL_Transmit>

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	2100      	movs	r1, #0
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 fc94 	bl	800bc90 <USBD_LL_Transmit>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2203      	movs	r2, #3
 800b382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	2100      	movs	r1, #0
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fc98 	bl	800bcd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f000 fc87 	bl	800bcd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2204      	movs	r2, #4
 800b3da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fc53 	bl	800bc90 <USBD_LL_Transmit>

  return USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2205      	movs	r2, #5
 800b400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b404:	2300      	movs	r3, #0
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fc61 	bl	800bcd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b420:	2200      	movs	r2, #0
 800b422:	4912      	ldr	r1, [pc, #72]	; (800b46c <MX_USB_Device_Init+0x50>)
 800b424:	4812      	ldr	r0, [pc, #72]	; (800b470 <MX_USB_Device_Init+0x54>)
 800b426:	f7fe fed9 	bl	800a1dc <USBD_Init>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b430:	f7f5 fe7c 	bl	800112c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b434:	490f      	ldr	r1, [pc, #60]	; (800b474 <MX_USB_Device_Init+0x58>)
 800b436:	480e      	ldr	r0, [pc, #56]	; (800b470 <MX_USB_Device_Init+0x54>)
 800b438:	f7fe ff00 	bl	800a23c <USBD_RegisterClass>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b442:	f7f5 fe73 	bl	800112c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b446:	490c      	ldr	r1, [pc, #48]	; (800b478 <MX_USB_Device_Init+0x5c>)
 800b448:	4809      	ldr	r0, [pc, #36]	; (800b470 <MX_USB_Device_Init+0x54>)
 800b44a:	f7fe fe21 	bl	800a090 <USBD_CDC_RegisterInterface>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b454:	f7f5 fe6a 	bl	800112c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b458:	4805      	ldr	r0, [pc, #20]	; (800b470 <MX_USB_Device_Init+0x54>)
 800b45a:	f7fe ff16 	bl	800a28a <USBD_Start>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b464:	f7f5 fe62 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b468:	bf00      	nop
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20000174 	.word	0x20000174
 800b470:	200005c0 	.word	0x200005c0
 800b474:	2000005c 	.word	0x2000005c
 800b478:	20000160 	.word	0x20000160

0800b47c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b480:	2200      	movs	r2, #0
 800b482:	4905      	ldr	r1, [pc, #20]	; (800b498 <CDC_Init_FS+0x1c>)
 800b484:	4805      	ldr	r0, [pc, #20]	; (800b49c <CDC_Init_FS+0x20>)
 800b486:	f7fe fe18 	bl	800a0ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b48a:	4905      	ldr	r1, [pc, #20]	; (800b4a0 <CDC_Init_FS+0x24>)
 800b48c:	4803      	ldr	r0, [pc, #12]	; (800b49c <CDC_Init_FS+0x20>)
 800b48e:	f7fe fe32 	bl	800a0f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b492:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b494:	4618      	mov	r0, r3
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20000c78 	.word	0x20000c78
 800b49c:	200005c0 	.word	0x200005c0
 800b4a0:	20000890 	.word	0x20000890

0800b4a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	6039      	str	r1, [r7, #0]
 800b4be:	71fb      	strb	r3, [r7, #7]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	2b23      	cmp	r3, #35	; 0x23
 800b4c8:	d84a      	bhi.n	800b560 <CDC_Control_FS+0xac>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <CDC_Control_FS+0x1c>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b561 	.word	0x0800b561
 800b4d4:	0800b561 	.word	0x0800b561
 800b4d8:	0800b561 	.word	0x0800b561
 800b4dc:	0800b561 	.word	0x0800b561
 800b4e0:	0800b561 	.word	0x0800b561
 800b4e4:	0800b561 	.word	0x0800b561
 800b4e8:	0800b561 	.word	0x0800b561
 800b4ec:	0800b561 	.word	0x0800b561
 800b4f0:	0800b561 	.word	0x0800b561
 800b4f4:	0800b561 	.word	0x0800b561
 800b4f8:	0800b561 	.word	0x0800b561
 800b4fc:	0800b561 	.word	0x0800b561
 800b500:	0800b561 	.word	0x0800b561
 800b504:	0800b561 	.word	0x0800b561
 800b508:	0800b561 	.word	0x0800b561
 800b50c:	0800b561 	.word	0x0800b561
 800b510:	0800b561 	.word	0x0800b561
 800b514:	0800b561 	.word	0x0800b561
 800b518:	0800b561 	.word	0x0800b561
 800b51c:	0800b561 	.word	0x0800b561
 800b520:	0800b561 	.word	0x0800b561
 800b524:	0800b561 	.word	0x0800b561
 800b528:	0800b561 	.word	0x0800b561
 800b52c:	0800b561 	.word	0x0800b561
 800b530:	0800b561 	.word	0x0800b561
 800b534:	0800b561 	.word	0x0800b561
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b561 	.word	0x0800b561
 800b540:	0800b561 	.word	0x0800b561
 800b544:	0800b561 	.word	0x0800b561
 800b548:	0800b561 	.word	0x0800b561
 800b54c:	0800b561 	.word	0x0800b561
 800b550:	0800b561 	.word	0x0800b561
 800b554:	0800b561 	.word	0x0800b561
 800b558:	0800b561 	.word	0x0800b561
 800b55c:	0800b561 	.word	0x0800b561
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b560:	bf00      	nop
  }

  return (USBD_OK);
 800b562:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7f4 fe65 	bl	800024c <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	4805      	ldr	r0, [pc, #20]	; (800b59c <CDC_Receive_FS+0x2c>)
 800b586:	f7fe fdb6 	bl	800a0f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b58a:	4804      	ldr	r0, [pc, #16]	; (800b59c <CDC_Receive_FS+0x2c>)
 800b58c:	f7fe fdfc 	bl	800a188 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b590:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	200005c0 	.word	0x200005c0

0800b5a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5b0:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <CDC_Transmit_FS+0x48>)
 800b5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e00b      	b.n	800b5de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5c6:	887b      	ldrh	r3, [r7, #2]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	4806      	ldr	r0, [pc, #24]	; (800b5e8 <CDC_Transmit_FS+0x48>)
 800b5ce:	f7fe fd74 	bl	800a0ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5d2:	4805      	ldr	r0, [pc, #20]	; (800b5e8 <CDC_Transmit_FS+0x48>)
 800b5d4:	f7fe fda8 	bl	800a128 <USBD_CDC_TransmitPacket>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200005c0 	.word	0x200005c0

0800b5ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b087      	sub	sp, #28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b5fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
	...

0800b610 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	6039      	str	r1, [r7, #0]
 800b61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2212      	movs	r2, #18
 800b620:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b622:	4b03      	ldr	r3, [pc, #12]	; (800b630 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	20000194 	.word	0x20000194

0800b634 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	4603      	mov	r3, r0
 800b63c:	6039      	str	r1, [r7, #0]
 800b63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2204      	movs	r2, #4
 800b644:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b646:	4b03      	ldr	r3, [pc, #12]	; (800b654 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	200001a8 	.word	0x200001a8

0800b658 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d105      	bne.n	800b676 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	4907      	ldr	r1, [pc, #28]	; (800b68c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b66e:	4808      	ldr	r0, [pc, #32]	; (800b690 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b670:	f7ff fdf3 	bl	800b25a <USBD_GetString>
 800b674:	e004      	b.n	800b680 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	4904      	ldr	r1, [pc, #16]	; (800b68c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b67a:	4805      	ldr	r0, [pc, #20]	; (800b690 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b67c:	f7ff fded 	bl	800b25a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20001060 	.word	0x20001060
 800b690:	0800bec8 	.word	0x0800bec8

0800b694 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	4904      	ldr	r1, [pc, #16]	; (800b6b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b6a4:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b6a6:	f7ff fdd8 	bl	800b25a <USBD_GetString>
  return USBD_StrDesc;
 800b6aa:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20001060 	.word	0x20001060
 800b6b8:	0800bee0 	.word	0x0800bee0

0800b6bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	6039      	str	r1, [r7, #0]
 800b6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	221a      	movs	r2, #26
 800b6cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6ce:	f000 f843 	bl	800b758 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b6d2:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	200001ac 	.word	0x200001ac

0800b6e0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d105      	bne.n	800b6fe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	4907      	ldr	r1, [pc, #28]	; (800b714 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b6f6:	4808      	ldr	r0, [pc, #32]	; (800b718 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b6f8:	f7ff fdaf 	bl	800b25a <USBD_GetString>
 800b6fc:	e004      	b.n	800b708 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	4904      	ldr	r1, [pc, #16]	; (800b714 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b702:	4805      	ldr	r0, [pc, #20]	; (800b718 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b704:	f7ff fda9 	bl	800b25a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b708:	4b02      	ldr	r3, [pc, #8]	; (800b714 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20001060 	.word	0x20001060
 800b718:	0800bef4 	.word	0x0800bef4

0800b71c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	6039      	str	r1, [r7, #0]
 800b726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d105      	bne.n	800b73a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	4907      	ldr	r1, [pc, #28]	; (800b750 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b732:	4808      	ldr	r0, [pc, #32]	; (800b754 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b734:	f7ff fd91 	bl	800b25a <USBD_GetString>
 800b738:	e004      	b.n	800b744 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	4904      	ldr	r1, [pc, #16]	; (800b750 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b73e:	4805      	ldr	r0, [pc, #20]	; (800b754 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b740:	f7ff fd8b 	bl	800b25a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	20001060 	.word	0x20001060
 800b754:	0800bf00 	.word	0x0800bf00

0800b758 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <Get_SerialNum+0x44>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b764:	4b0e      	ldr	r3, [pc, #56]	; (800b7a0 <Get_SerialNum+0x48>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b76a:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <Get_SerialNum+0x4c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4413      	add	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d009      	beq.n	800b792 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b77e:	2208      	movs	r2, #8
 800b780:	4909      	ldr	r1, [pc, #36]	; (800b7a8 <Get_SerialNum+0x50>)
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f000 f814 	bl	800b7b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b788:	2204      	movs	r2, #4
 800b78a:	4908      	ldr	r1, [pc, #32]	; (800b7ac <Get_SerialNum+0x54>)
 800b78c:	68b8      	ldr	r0, [r7, #8]
 800b78e:	f000 f80f 	bl	800b7b0 <IntToUnicode>
  }
}
 800b792:	bf00      	nop
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	1fff7590 	.word	0x1fff7590
 800b7a0:	1fff7594 	.word	0x1fff7594
 800b7a4:	1fff7598 	.word	0x1fff7598
 800b7a8:	200001ae 	.word	0x200001ae
 800b7ac:	200001be 	.word	0x200001be

0800b7b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]
 800b7c6:	e027      	b.n	800b818 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	0f1b      	lsrs	r3, r3, #28
 800b7cc:	2b09      	cmp	r3, #9
 800b7ce:	d80b      	bhi.n	800b7e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	0f1b      	lsrs	r3, r3, #28
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	440b      	add	r3, r1
 800b7e0:	3230      	adds	r2, #48	; 0x30
 800b7e2:	b2d2      	uxtb	r2, r2
 800b7e4:	701a      	strb	r2, [r3, #0]
 800b7e6:	e00a      	b.n	800b7fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	0f1b      	lsrs	r3, r3, #28
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	440b      	add	r3, r1
 800b7f8:	3237      	adds	r2, #55	; 0x37
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	3301      	adds	r3, #1
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	4413      	add	r3, r2
 800b80e:	2200      	movs	r2, #0
 800b810:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b812:	7dfb      	ldrb	r3, [r7, #23]
 800b814:	3301      	adds	r3, #1
 800b816:	75fb      	strb	r3, [r7, #23]
 800b818:	7dfa      	ldrb	r2, [r7, #23]
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d3d3      	bcc.n	800b7c8 <IntToUnicode+0x18>
  }
}
 800b820:	bf00      	nop
 800b822:	bf00      	nop
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
	...

0800b830 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b094      	sub	sp, #80	; 0x50
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b838:	f107 030c 	add.w	r3, r7, #12
 800b83c:	2244      	movs	r2, #68	; 0x44
 800b83e:	2100      	movs	r1, #0
 800b840:	4618      	mov	r0, r3
 800b842:	f000 fb2d 	bl	800bea0 <memset>
  if(pcdHandle->Instance==USB)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <HAL_PCD_MspInit+0x70>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d123      	bne.n	800b898 <HAL_PCD_MspInit+0x68>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b854:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b85a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b85c:	f107 030c 	add.w	r3, r7, #12
 800b860:	4618      	mov	r0, r3
 800b862:	f7fa f90d 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b86c:	f7f5 fc5e 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b870:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <HAL_PCD_MspInit+0x74>)
 800b872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b874:	4a0b      	ldr	r2, [pc, #44]	; (800b8a4 <HAL_PCD_MspInit+0x74>)
 800b876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b87a:	6593      	str	r3, [r2, #88]	; 0x58
 800b87c:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <HAL_PCD_MspInit+0x74>)
 800b87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b884:	60bb      	str	r3, [r7, #8]
 800b886:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b888:	2200      	movs	r2, #0
 800b88a:	2100      	movs	r1, #0
 800b88c:	2014      	movs	r0, #20
 800b88e:	f7f7 f97e 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b892:	2014      	movs	r0, #20
 800b894:	f7f7 f995 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b898:	bf00      	nop
 800b89a:	3750      	adds	r7, #80	; 0x50
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	40005c00 	.word	0x40005c00
 800b8a4:	40021000 	.word	0x40021000

0800b8a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	f7fe fd2e 	bl	800a320 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b8de:	78fa      	ldrb	r2, [r7, #3]
 800b8e0:	6879      	ldr	r1, [r7, #4]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	440b      	add	r3, r1
 800b8ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f7fe fd68 	bl	800a3ca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	460b      	mov	r3, r1
 800b90c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b914:	78fa      	ldrb	r2, [r7, #3]
 800b916:	6879      	ldr	r1, [r7, #4]
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	00db      	lsls	r3, r3, #3
 800b920:	440b      	add	r3, r1
 800b922:	333c      	adds	r3, #60	; 0x3c
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	4619      	mov	r1, r3
 800b92a:	f7fe fdb1 	bl	800a490 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b92e:	bf00      	nop
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe fec5 	bl	800a6d4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b95a:	2301      	movs	r3, #1
 800b95c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d001      	beq.n	800b96a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b966:	f7f5 fbe1 	bl	800112c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b970:	7bfa      	ldrb	r2, [r7, #15]
 800b972:	4611      	mov	r1, r2
 800b974:	4618      	mov	r0, r3
 800b976:	f7fe fe6f 	bl	800a658 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe fe1b 	bl	800a5bc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b986:	bf00      	nop
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
	...

0800b990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fe6a 	bl	800a678 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9ac:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <HAL_PCD_SuspendCallback+0x30>)
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	4a03      	ldr	r2, [pc, #12]	; (800b9c0 <HAL_PCD_SuspendCallback+0x30>)
 800b9b2:	f043 0306 	orr.w	r3, r3, #6
 800b9b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	e000ed00 	.word	0xe000ed00

0800b9c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d007      	beq.n	800b9e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9d4:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <HAL_PCD_ResumeCallback+0x34>)
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	4a07      	ldr	r2, [pc, #28]	; (800b9f8 <HAL_PCD_ResumeCallback+0x34>)
 800b9da:	f023 0306 	bic.w	r3, r3, #6
 800b9de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b9e0:	f000 f9fa 	bl	800bdd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fe fe5a 	bl	800a6a4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	e000ed00 	.word	0xe000ed00

0800b9fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ba04:	4a2b      	ldr	r2, [pc, #172]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a29      	ldr	r2, [pc, #164]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ba14:	4b27      	ldr	r3, [pc, #156]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba16:	4a28      	ldr	r2, [pc, #160]	; (800bab8 <USBD_LL_Init+0xbc>)
 800ba18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba1a:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba20:	4b24      	ldr	r3, [pc, #144]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba22:	2202      	movs	r2, #2
 800ba24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba26:	4b23      	ldr	r3, [pc, #140]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba28:	2202      	movs	r2, #2
 800ba2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ba2c:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ba32:	4b20      	ldr	r3, [pc, #128]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ba38:	4b1e      	ldr	r3, [pc, #120]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ba3e:	4b1d      	ldr	r3, [pc, #116]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ba44:	481b      	ldr	r0, [pc, #108]	; (800bab4 <USBD_LL_Init+0xb8>)
 800ba46:	f7f7 fd38 	bl	80034ba <HAL_PCD_Init>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ba50:	f7f5 fb6c 	bl	800112c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba5a:	2318      	movs	r3, #24
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2100      	movs	r1, #0
 800ba60:	f7f9 f9f1 	bl	8004e46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba6a:	2358      	movs	r3, #88	; 0x58
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2180      	movs	r1, #128	; 0x80
 800ba70:	f7f9 f9e9 	bl	8004e46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba7a:	23c0      	movs	r3, #192	; 0xc0
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2181      	movs	r1, #129	; 0x81
 800ba80:	f7f9 f9e1 	bl	8004e46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2101      	movs	r1, #1
 800ba92:	f7f9 f9d8 	bl	8004e46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baa0:	2200      	movs	r2, #0
 800baa2:	2182      	movs	r1, #130	; 0x82
 800baa4:	f7f9 f9cf 	bl	8004e46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20001260 	.word	0x20001260
 800bab8:	40005c00 	.word	0x40005c00

0800babc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f7 fdd6 	bl	8003684 <HAL_PCD_Start>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 f980 	bl	800bde4 <USBD_Get_USB_Status>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	4608      	mov	r0, r1
 800bafc:	4611      	mov	r1, r2
 800bafe:	461a      	mov	r2, r3
 800bb00:	4603      	mov	r3, r0
 800bb02:	70fb      	strb	r3, [r7, #3]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70bb      	strb	r3, [r7, #2]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb1a:	78bb      	ldrb	r3, [r7, #2]
 800bb1c:	883a      	ldrh	r2, [r7, #0]
 800bb1e:	78f9      	ldrb	r1, [r7, #3]
 800bb20:	f7f7 ff1e 	bl	8003960 <HAL_PCD_EP_Open>
 800bb24:	4603      	mov	r3, r0
 800bb26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 f95a 	bl	800bde4 <USBD_Get_USB_Status>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb58:	78fa      	ldrb	r2, [r7, #3]
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7f7 ff65 	bl	8003a2c <HAL_PCD_EP_Close>
 800bb62:	4603      	mov	r3, r0
 800bb64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f93b 	bl	800bde4 <USBD_Get_USB_Status>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f8 f826 	bl	8003bec <HAL_PCD_EP_SetStall>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f91c 	bl	800bde4 <USBD_Get_USB_Status>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b084      	sub	sp, #16
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f8 f859 	bl	8003c90 <HAL_PCD_EP_ClrStall>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 f8fd 	bl	800bde4 <USBD_Get_USB_Status>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da0c      	bge.n	800bc2e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc14:	78fb      	ldrb	r3, [r7, #3]
 800bc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	4613      	mov	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	440b      	add	r3, r1
 800bc28:	3302      	adds	r3, #2
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	e00b      	b.n	800bc46 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc34:	68f9      	ldr	r1, [r7, #12]
 800bc36:	4613      	mov	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4413      	add	r3, r2
 800bc3c:	00db      	lsls	r3, r3, #3
 800bc3e:	440b      	add	r3, r1
 800bc40:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bc44:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc6c:	78fa      	ldrb	r2, [r7, #3]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f7 fe50 	bl	8003916 <HAL_PCD_SetAddress>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f8b1 	bl	800bde4 <USBD_Get_USB_Status>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	607a      	str	r2, [r7, #4]
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcae:	7af9      	ldrb	r1, [r7, #11]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	f7f7 ff57 	bl	8003b66 <HAL_PCD_EP_Transmit>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcbc:	7dfb      	ldrb	r3, [r7, #23]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f890 	bl	800bde4 <USBD_Get_USB_Status>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	60f8      	str	r0, [r7, #12]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
 800bcde:	460b      	mov	r3, r1
 800bce0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcf0:	7af9      	ldrb	r1, [r7, #11]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	f7f7 fee1 	bl	8003abc <HAL_PCD_EP_Receive>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 f86f 	bl	800bde4 <USBD_Get_USB_Status>
 800bd06:	4603      	mov	r3, r0
 800bd08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7f7 ff03 	bl	8003b36 <HAL_PCD_EP_GetRxCount>
 800bd30:	4603      	mov	r3, r0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <HAL_PCDEx_LPM_Callback+0x18>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d013      	beq.n	800bd7a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bd52:	e023      	b.n	800bd9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d007      	beq.n	800bd6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bd5c:	f000 f83c 	bl	800bdd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd60:	4b10      	ldr	r3, [pc, #64]	; (800bda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	4a0f      	ldr	r2, [pc, #60]	; (800bda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd66:	f023 0306 	bic.w	r3, r3, #6
 800bd6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe fc96 	bl	800a6a4 <USBD_LL_Resume>
    break;
 800bd78:	e010      	b.n	800bd9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fc79 	bl	800a678 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd8e:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	4a04      	ldr	r2, [pc, #16]	; (800bda4 <HAL_PCDEx_LPM_Callback+0x68>)
 800bd94:	f043 0306 	orr.w	r3, r3, #6
 800bd98:	6113      	str	r3, [r2, #16]
    break;
 800bd9a:	bf00      	nop
}
 800bd9c:	bf00      	nop
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	e000ed00 	.word	0xe000ed00

0800bda8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdb0:	4b03      	ldr	r3, [pc, #12]	; (800bdc0 <USBD_static_malloc+0x18>)
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	20001554 	.word	0x20001554

0800bdc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]

}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bddc:	f7f4 fc2e 	bl	800063c <SystemClock_Config>
}
 800bde0:	bf00      	nop
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d817      	bhi.n	800be28 <USBD_Get_USB_Status+0x44>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <USBD_Get_USB_Status+0x1c>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800be11 	.word	0x0800be11
 800be04:	0800be17 	.word	0x0800be17
 800be08:	0800be1d 	.word	0x0800be1d
 800be0c:	0800be23 	.word	0x0800be23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be10:	2300      	movs	r3, #0
 800be12:	73fb      	strb	r3, [r7, #15]
    break;
 800be14:	e00b      	b.n	800be2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be16:	2303      	movs	r3, #3
 800be18:	73fb      	strb	r3, [r7, #15]
    break;
 800be1a:	e008      	b.n	800be2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be1c:	2301      	movs	r3, #1
 800be1e:	73fb      	strb	r3, [r7, #15]
    break;
 800be20:	e005      	b.n	800be2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be22:	2303      	movs	r3, #3
 800be24:	73fb      	strb	r3, [r7, #15]
    break;
 800be26:	e002      	b.n	800be2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be28:	2303      	movs	r3, #3
 800be2a:	73fb      	strb	r3, [r7, #15]
    break;
 800be2c:	bf00      	nop
  }
  return usb_status;
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <__libc_init_array>:
 800be3c:	b570      	push	{r4, r5, r6, lr}
 800be3e:	4d0d      	ldr	r5, [pc, #52]	; (800be74 <__libc_init_array+0x38>)
 800be40:	4c0d      	ldr	r4, [pc, #52]	; (800be78 <__libc_init_array+0x3c>)
 800be42:	1b64      	subs	r4, r4, r5
 800be44:	10a4      	asrs	r4, r4, #2
 800be46:	2600      	movs	r6, #0
 800be48:	42a6      	cmp	r6, r4
 800be4a:	d109      	bne.n	800be60 <__libc_init_array+0x24>
 800be4c:	4d0b      	ldr	r5, [pc, #44]	; (800be7c <__libc_init_array+0x40>)
 800be4e:	4c0c      	ldr	r4, [pc, #48]	; (800be80 <__libc_init_array+0x44>)
 800be50:	f000 f82e 	bl	800beb0 <_init>
 800be54:	1b64      	subs	r4, r4, r5
 800be56:	10a4      	asrs	r4, r4, #2
 800be58:	2600      	movs	r6, #0
 800be5a:	42a6      	cmp	r6, r4
 800be5c:	d105      	bne.n	800be6a <__libc_init_array+0x2e>
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	f855 3b04 	ldr.w	r3, [r5], #4
 800be64:	4798      	blx	r3
 800be66:	3601      	adds	r6, #1
 800be68:	e7ee      	b.n	800be48 <__libc_init_array+0xc>
 800be6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be6e:	4798      	blx	r3
 800be70:	3601      	adds	r6, #1
 800be72:	e7f2      	b.n	800be5a <__libc_init_array+0x1e>
 800be74:	0800bf20 	.word	0x0800bf20
 800be78:	0800bf20 	.word	0x0800bf20
 800be7c:	0800bf20 	.word	0x0800bf20
 800be80:	0800bf24 	.word	0x0800bf24

0800be84 <memcpy>:
 800be84:	440a      	add	r2, r1
 800be86:	4291      	cmp	r1, r2
 800be88:	f100 33ff 	add.w	r3, r0, #4294967295
 800be8c:	d100      	bne.n	800be90 <memcpy+0xc>
 800be8e:	4770      	bx	lr
 800be90:	b510      	push	{r4, lr}
 800be92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be9a:	4291      	cmp	r1, r2
 800be9c:	d1f9      	bne.n	800be92 <memcpy+0xe>
 800be9e:	bd10      	pop	{r4, pc}

0800bea0 <memset>:
 800bea0:	4402      	add	r2, r0
 800bea2:	4603      	mov	r3, r0
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d100      	bne.n	800beaa <memset+0xa>
 800bea8:	4770      	bx	lr
 800beaa:	f803 1b01 	strb.w	r1, [r3], #1
 800beae:	e7f9      	b.n	800bea4 <memset+0x4>

0800beb0 <_init>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	bf00      	nop
 800beb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb6:	bc08      	pop	{r3}
 800beb8:	469e      	mov	lr, r3
 800beba:	4770      	bx	lr

0800bebc <_fini>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr
