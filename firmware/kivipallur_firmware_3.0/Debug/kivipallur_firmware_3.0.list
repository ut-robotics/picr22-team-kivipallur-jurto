
kivipallur_firmware_3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ca7c  0800ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cad4  0800cad4  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cad4  0800cad4  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cad4  0800cad4  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cad4  0800cad4  0001cad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cad8  0800cad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800cadc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  200001c8  0800cca4  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000179c  0800cca4  0002179c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfcf  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004277  00000000  00000000  0003e1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00042440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  00043e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024744  00000000  00000000  000455f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3b0  00000000  00000000  00069d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2e61  00000000  00000000  000880ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016af4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf0  00000000  00000000  0016afa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c8 	.word	0x200001c8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ca64 	.word	0x0800ca64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001cc 	.word	0x200001cc
 8000214:	0800ca64 	.word	0x0800ca64

08000218 <clamp>:
	      .speed2 = 0,
	      .speed3 = 0,
	      .delimiter = 0xAAAA
	  };;

int32_t clamp(int32_t value, int32_t minValue, int32_t maxValue) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	if (value > maxValue) {
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	dd01      	ble.n	8000230 <clamp+0x18>
		return maxValue;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	e006      	b.n	800023e <clamp+0x26>
	}

	if (value < minValue) {
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	429a      	cmp	r2, r3
 8000236:	da01      	bge.n	800023c <clamp+0x24>
		return minValue;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	e000      	b.n	800023e <clamp+0x26>
	}
	return value;
 800023c:	68fb      	ldr	r3, [r7, #12]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <CDC_On_Receive>:


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) { // (7)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	d116      	bne.n	800028c <CDC_On_Receive+0x40>
		memcpy(&command, buffer, sizeof(Command)); // (8)
 800025e:	220a      	movs	r2, #10
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <CDC_On_Receive+0x48>)
 8000264:	f00c fbe8 	bl	800ca38 <memcpy>

		if (command.delimiter == 0xAAAA) { // (9)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <CDC_On_Receive+0x48>)
 800026a:	891b      	ldrh	r3, [r3, #8]
 800026c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000270:	4293      	cmp	r3, r2
 8000272:	d102      	bne.n	800027a <CDC_On_Receive+0x2e>
			isCommandReceived = 1;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <CDC_On_Receive+0x4c>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		}
		if (command.delimiter == 0xBBBB) { // (9)
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <CDC_On_Receive+0x48>)
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000282:	4293      	cmp	r3, r2
 8000284:	d102      	bne.n	800028c <CDC_On_Receive+0x40>
	  		driverReset = 1;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <CDC_On_Receive+0x50>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200005a8 	.word	0x200005a8
 8000298:	200005b2 	.word	0x200005b2
 800029c:	200005b3 	.word	0x200005b3

080002a0 <PIDcontrol>:


int32_t PIDcontrol(MotorControl* control, int16_t position){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	807b      	strh	r3, [r7, #2]
	control->positionChange = position - control->position; //Lahutab vana positsiooni, et saada kiiruse
 80002ac:	887a      	ldrh	r2, [r7, #2]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	821a      	strh	r2, [r3, #16]
	control->position = position; //Salvestab asendi struktuuri
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	887a      	ldrh	r2, [r7, #2]
 80002c4:	805a      	strh	r2, [r3, #2]
	int32_t error = control->speed -control->positionChange; //Kui suur on erinevus kiiruste vahel
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002cc:	461a      	mov	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	control->integraal += error;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	441a      	add	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]

	return control->p_gain * error + control->i_gain * control->integraal;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	fb03 f202 	mul.w	r2, r3, r2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002f8:	4619      	mov	r1, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	fb01 f303 	mul.w	r3, r1, r3
 8000302:	4413      	add	r3, r2
}
 8000304:	4618      	mov	r0, r3
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <Thrower_Send>:


uint16_t pwmData[20];

void Thrower_Send (uint16_t command){
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]

	uint16_t packet = (command << 1) | 0;
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	81fb      	strh	r3, [r7, #14]

	HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 8000320:	2100      	movs	r1, #0
 8000322:	482f      	ldr	r0, [pc, #188]	; (80003e0 <Thrower_Send+0xd0>)
 8000324:	f006 fc5a 	bl	8006bdc <HAL_TIM_PWM_Stop_DMA>
	int csum = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
	int csum_data = packet;
 800032c:	89fb      	ldrh	r3, [r7, #14]
 800032e:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 3; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	61fb      	str	r3, [r7, #28]
 8000334:	e009      	b.n	800034a <Thrower_Send+0x3a>
		csum ^=  csum_data;
 8000336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4053      	eors	r3, r2
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
		csum_data >>= 4;
 800033e:	6a3b      	ldr	r3, [r7, #32]
 8000340:	111b      	asrs	r3, r3, #4
 8000342:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 3; i++) {
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	3301      	adds	r3, #1
 8000348:	61fb      	str	r3, [r7, #28]
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	2b02      	cmp	r3, #2
 800034e:	ddf2      	ble.n	8000336 <Thrower_Send+0x26>
	}
	csum &= 0xf;
 8000350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	627b      	str	r3, [r7, #36]	; 0x24
	packet = (packet << 4) | csum;
 8000358:	89fb      	ldrh	r3, [r7, #14]
 800035a:	011b      	lsls	r3, r3, #4
 800035c:	b21a      	sxth	r2, r3
 800035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000360:	b21b      	sxth	r3, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	b21b      	sxth	r3, r3
 8000366:	81fb      	strh	r3, [r7, #14]


	int counter = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
	for (int i=15; i>=0; i--)
 800036c:	230f      	movs	r3, #15
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	e01a      	b.n	80003a8 <Thrower_Send+0x98>
	{
		if (packet & (1<<i)){
 8000372:	89fa      	ldrh	r2, [r7, #14]
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	fa42 f303 	asr.w	r3, r2, r3
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d006      	beq.n	8000390 <Thrower_Send+0x80>
			pwmData[counter] = 798;
 8000382:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <Thrower_Send+0xd4>)
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	f240 311e 	movw	r1, #798	; 0x31e
 800038a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800038e:	e005      	b.n	800039c <Thrower_Send+0x8c>
		}
		else{
			pwmData[counter] = 399;
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <Thrower_Send+0xd4>)
 8000392:	69bb      	ldr	r3, [r7, #24]
 8000394:	f240 118f 	movw	r1, #399	; 0x18f
 8000398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		counter++;
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	3301      	adds	r3, #1
 80003a0:	61bb      	str	r3, [r7, #24]
	for (int i=15; i>=0; i--)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	dae1      	bge.n	8000372 <Thrower_Send+0x62>
	}

	for (int i=19; i>=16; i--){
 80003ae:	2313      	movs	r3, #19
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	e007      	b.n	80003c4 <Thrower_Send+0xb4>
		pwmData[i] = 0;
 80003b4:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <Thrower_Send+0xd4>)
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	2100      	movs	r1, #0
 80003ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=19; i>=16; i--){
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	2b0f      	cmp	r3, #15
 80003c8:	dcf4      	bgt.n	80003b4 <Thrower_Send+0xa4>
	}
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t *)pwmData, 20);
 80003ca:	2314      	movs	r3, #20
 80003cc:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <Thrower_Send+0xd4>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <Thrower_Send+0xd0>)
 80003d2:	f006 f9eb 	bl	80067ac <HAL_TIM_PWM_Start_DMA>


}
 80003d6:	bf00      	nop
 80003d8:	3728      	adds	r7, #40	; 0x28
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000478 	.word	0x20000478
 80003e4:	200005b8 	.word	0x200005b8

080003e8 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	if (enable_pid == 1){
 80003f0:	4b51      	ldr	r3, [pc, #324]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80003f2:	881b      	ldrh	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 809a 	bne.w	800052e <HAL_TIM_PeriodElapsedCallback+0x146>

		int16_t position;
		position = (int16_t)TIM1->CNT;
 80003fa:	4b50      	ldr	r3, [pc, #320]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80003fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fe:	81fb      	strh	r3, [r7, #14]
		int32_t pwmValue = PIDcontrol(&motor1Control, position);
 8000400:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000404:	4619      	mov	r1, r3
 8000406:	484e      	ldr	r0, [pc, #312]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000408:	f7ff ff4a 	bl	80002a0 <PIDcontrol>
 800040c:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(MOT1_PWM_2_GPIO_Port, MOT1_PWM_2_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	0fdb      	lsrs	r3, r3, #31
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f003 f9f5 	bl	800380c <HAL_GPIO_WritePin>
		//wake_drivers_up();
		TIM1->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b00      	cmp	r3, #0
 8000426:	bfb8      	it	lt
 8000428:	425b      	neglt	r3, r3
 800042a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff fef1 	bl	8000218 <clamp>
 8000436:	4603      	mov	r3, r0
 8000438:	b29a      	uxth	r2, r3
 800043a:	4b40      	ldr	r3, [pc, #256]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800043c:	639a      	str	r2, [r3, #56]	; 0x38

		position = (int16_t)TIM2->CNT;
 800043e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000444:	81fb      	strh	r3, [r7, #14]
		pwmValue = PIDcontrol(&motor2Control, position);
 8000446:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800044a:	4619      	mov	r1, r3
 800044c:	483d      	ldr	r0, [pc, #244]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800044e:	f7ff ff27 	bl	80002a0 <PIDcontrol>
 8000452:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(MOT2_PWM_2_GPIO_Port, MOT2_PWM_2_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	0fdb      	lsrs	r3, r3, #31
 8000458:	b2db      	uxtb	r3, r3
 800045a:	461a      	mov	r2, r3
 800045c:	2102      	movs	r1, #2
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f003 f9d3 	bl	800380c <HAL_GPIO_WritePin>
		//wake_drivers_up();
		TIM2->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	2b00      	cmp	r3, #0
 800046a:	bfb8      	it	lt
 800046c:	425b      	neglt	r3, r3
 800046e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000472:	2100      	movs	r1, #0
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fecf 	bl	8000218 <clamp>
 800047a:	4603      	mov	r3, r0
 800047c:	b29a      	uxth	r2, r3
 800047e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000482:	639a      	str	r2, [r3, #56]	; 0x38

		position = (int16_t)TIM3->CNT;
 8000484:	4b30      	ldr	r3, [pc, #192]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000488:	81fb      	strh	r3, [r7, #14]
		pwmValue = PIDcontrol(&motor3Control, position);
 800048a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800048e:	4619      	mov	r1, r3
 8000490:	482e      	ldr	r0, [pc, #184]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000492:	f7ff ff05 	bl	80002a0 <PIDcontrol>
 8000496:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(MOT3_PWM_2_GPIO_Port, MOT3_PWM_2_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	0fdb      	lsrs	r3, r3, #31
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a8:	f003 f9b0 	bl	800380c <HAL_GPIO_WritePin>
		//wake_drivers_up();
		TIM2->CCR4 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	bfb8      	it	lt
 80004b2:	425b      	neglt	r3, r3
 80004b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff feac 	bl	8000218 <clamp>
 80004c0:	4603      	mov	r3, r0
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c8:	641a      	str	r2, [r3, #64]	; 0x40

		timer+=1;
 80004ca:	4b21      	ldr	r3, [pc, #132]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80004d4:	801a      	strh	r2, [r3, #0]
		if (timer == 50){
 80004d6:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	2b32      	cmp	r3, #50	; 0x32
 80004dc:	d127      	bne.n	800052e <HAL_TIM_PeriodElapsedCallback+0x146>
			timer = 0;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]
			enable_pid = 0;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
			motor1Control.speed = 0;
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	801a      	strh	r2, [r3, #0]
			TIM1->CCR1 = 0;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38
			motor2Control.speed = 0;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	801a      	strh	r2, [r3, #0]
			TIM2->CCR1 = 0;
 8000502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 800050a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050e:	2200      	movs	r2, #0
 8000510:	639a      	str	r2, [r3, #56]	; 0x38
			motor3Control.speed = 0;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000514:	2200      	movs	r2, #0
 8000516:	801a      	strh	r2, [r3, #0]
			TIM2->CCR3 = 0;
 8000518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800051c:	2200      	movs	r2, #0
 800051e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 0;
 8000520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000524:	2200      	movs	r2, #0
 8000526:	641a      	str	r2, [r3, #64]	; 0x40
			Thrower_Send(0);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fef1 	bl	8000310 <Thrower_Send>
		}
	}
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200005b6 	.word	0x200005b6
 800053c:	40012c00 	.word	0x40012c00
 8000540:	20000000 	.word	0x20000000
 8000544:	20000014 	.word	0x20000014
 8000548:	40000400 	.word	0x40000400
 800054c:	20000028 	.word	0x20000028
 8000550:	200005b4 	.word	0x200005b4

08000554 <wake_drivers_up>:

void wake_drivers_up() {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOT_SLEEP_GPIO_Port, MOT_SLEEP_Pin, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	480b      	ldr	r0, [pc, #44]	; (800058c <wake_drivers_up+0x38>)
 8000560:	f003 f954 	bl	800380c <HAL_GPIO_WritePin>
		for (int i = 0; i<300; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e003      	b.n	8000572 <wake_drivers_up+0x1e>
			__asm("nop");
 800056a:	bf00      	nop
		for (int i = 0; i<300; i++) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000578:	dbf7      	blt.n	800056a <wake_drivers_up+0x16>
	  	  }
	HAL_GPIO_WritePin(MOT_SLEEP_GPIO_Port, MOT_SLEEP_Pin, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	4803      	ldr	r0, [pc, #12]	; (800058c <wake_drivers_up+0x38>)
 8000580:	f003 f944 	bl	800380c <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	48000400 	.word	0x48000400

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fa33 	bl	80019fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f8f4 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fe00 	bl	80011a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005a0:	f000 fa04 	bl	80009ac <MX_TIM1_Init>
  MX_RTC_Init();
 80005a4:	f000 f9d6 	bl	8000954 <MX_RTC_Init>
  MX_TIM2_Init();
 80005a8:	f000 faa0 	bl	8000aec <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ac:	f000 fb18 	bl	8000be0 <MX_TIM3_Init>
  MX_TIM8_Init();
 80005b0:	f000 fbf8 	bl	8000da4 <MX_TIM8_Init>
  MX_TIM17_Init();
 80005b4:	f000 fd50 	bl	8001058 <MX_TIM17_Init>
  MX_TIM16_Init();
 80005b8:	f000 fcd4 	bl	8000f64 <MX_TIM16_Init>
  MX_TIM4_Init();
 80005bc:	f000 fb66 	bl	8000c8c <MX_TIM4_Init>
  MX_TIM15_Init();
 80005c0:	f000 fc4a 	bl	8000e58 <MX_TIM15_Init>
  MX_USB_Device_Init();
 80005c4:	f00b fd04 	bl	800bfd0 <MX_USB_Device_Init>
  MX_DMA_Init();
 80005c8:	f000 fdc0 	bl	800114c <MX_DMA_Init>
  MX_ADC1_Init();
 80005cc:	f000 f928 	bl	8000820 <MX_ADC1_Init>
  MX_CRC_Init();
 80005d0:	f000 f99e 	bl	8000910 <MX_CRC_Init>
  MX_TIM6_Init();
 80005d4:	f000 fbb0 	bl	8000d38 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80005d8:	2104      	movs	r1, #4
 80005da:	4859      	ldr	r0, [pc, #356]	; (8000740 <main+0x1b0>)
 80005dc:	f005 ffe6 	bl	80065ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e0:	2100      	movs	r1, #0
 80005e2:	4858      	ldr	r0, [pc, #352]	; (8000744 <main+0x1b4>)
 80005e4:	f005 ffe2 	bl	80065ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005e8:	2104      	movs	r1, #4
 80005ea:	4856      	ldr	r0, [pc, #344]	; (8000744 <main+0x1b4>)
 80005ec:	f005 ffde 	bl	80065ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005f0:	2100      	movs	r1, #0
 80005f2:	4855      	ldr	r0, [pc, #340]	; (8000748 <main+0x1b8>)
 80005f4:	f005 ffda 	bl	80065ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005f8:	2104      	movs	r1, #4
 80005fa:	4853      	ldr	r0, [pc, #332]	; (8000748 <main+0x1b8>)
 80005fc:	f005 ffd6 	bl	80065ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000600:	2108      	movs	r1, #8
 8000602:	4851      	ldr	r0, [pc, #324]	; (8000748 <main+0x1b8>)
 8000604:	f005 ffd2 	bl	80065ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000608:	210c      	movs	r1, #12
 800060a:	484f      	ldr	r0, [pc, #316]	; (8000748 <main+0x1b8>)
 800060c:	f005 ffce 	bl	80065ac <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000610:	2100      	movs	r1, #0
 8000612:	484e      	ldr	r0, [pc, #312]	; (800074c <main+0x1bc>)
 8000614:	f006 fc80 	bl	8006f18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	484c      	ldr	r0, [pc, #304]	; (800074c <main+0x1bc>)
 800061c:	f006 fc7c 	bl	8006f18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	484b      	ldr	r0, [pc, #300]	; (8000750 <main+0x1c0>)
 8000624:	f006 fc78 	bl	8006f18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000628:	2104      	movs	r1, #4
 800062a:	4849      	ldr	r0, [pc, #292]	; (8000750 <main+0x1c0>)
 800062c:	f006 fc74 	bl	8006f18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4848      	ldr	r0, [pc, #288]	; (8000754 <main+0x1c4>)
 8000634:	f006 fc70 	bl	8006f18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);
 8000638:	2104      	movs	r1, #4
 800063a:	4846      	ldr	r0, [pc, #280]	; (8000754 <main+0x1c4>)
 800063c:	f006 fc6c 	bl	8006f18 <HAL_TIM_Encoder_Start>
  TIM2->CCR2 = 0;
  TIM2->CCR3 = 0;
  TIM2->CCR4 = 20000;
*/

  TIM1->CCR1 = 0;
 8000640:	4b45      	ldr	r3, [pc, #276]	; (8000758 <main+0x1c8>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 12000;
 8000646:	4b44      	ldr	r3, [pc, #272]	; (8000758 <main+0x1c8>)
 8000648:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR1 = 12000;
 800064e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000652:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = 0;
 8000658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065c:	2200      	movs	r2, #0
 800065e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 12000;
 8000660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000664:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000668:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->CCR4 = 0;
 800066a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800066e:	2200      	movs	r2, #0
 8000670:	641a      	str	r2, [r3, #64]	; 0x40


  TIM15->CCR2 = 3000;
 8000672:	4b3a      	ldr	r3, [pc, #232]	; (800075c <main+0x1cc>)
 8000674:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000678:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f001 fa30 	bl	8001ae0 <HAL_Delay>
  TIM15->CCR2 = 0;
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <main+0x1cc>)
 8000682:	2200      	movs	r2, #0
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f001 fa2a 	bl	8001ae0 <HAL_Delay>
  TIM15->CCR2 = 3000;
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <main+0x1cc>)
 800068e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
  TIM2->CCR4 = 0;
*/


  Thrower_Send(0);
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff fe3b 	bl	8000310 <Thrower_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
        wake_drivers_up();
 800069a:	f7ff ff5b 	bl	8000554 <wake_drivers_up>


    /* USER CODE BEGIN 3 */
	  if (driverReset) {
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <main+0x1d0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00d      	beq.n	80006c4 <main+0x134>

	  		  driverReset = 0;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <main+0x1d0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	  		  TIM15->CCR2 = 61750;
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <main+0x1cc>)
 80006b0:	f24f 1236 	movw	r2, #61750	; 0xf136
 80006b4:	639a      	str	r2, [r3, #56]	; 0x38
	  		  HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f001 fa12 	bl	8001ae0 <HAL_Delay>
	  	   	  TIM15->CCR2 = 65535;
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <main+0x1cc>)
 80006be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38

	  	  }

	  	  if (isCommandReceived) { // (2)
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0x1d4>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d031      	beq.n	8000732 <main+0x1a2>
	  	        isCommandReceived = 0;
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <main+0x1d4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	  	        wake_drivers_up();
 80006d4:	f7ff ff3e 	bl	8000554 <wake_drivers_up>
	  	        motor1Control.speed = command.speed1;
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <main+0x1d8>)
 80006da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <main+0x1dc>)
 80006e0:	801a      	strh	r2, [r3, #0]
	  	        motor2Control.speed = command.speed2;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <main+0x1d8>)
 80006e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <main+0x1e0>)
 80006ea:	801a      	strh	r2, [r3, #0]
	  	        motor3Control.speed = command.speed3;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <main+0x1d8>)
 80006ee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <main+0x1e4>)
 80006f4:	801a      	strh	r2, [r3, #0]

	  	        Thrower_Send(command.throwerSpeed);
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <main+0x1d8>)
 80006f8:	88db      	ldrh	r3, [r3, #6]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fe08 	bl	8000310 <Thrower_Send>
	    	        timer = 0;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0x1e8>)
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]
	    	        enable_pid = 1;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0x1ec>)
 8000708:	2201      	movs	r2, #1
 800070a:	801a      	strh	r2, [r3, #0]

	  	        feedback.speed1 = motor1Control.speed; // (4)
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x1dc>)
 800070e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <main+0x1f0>)
 8000714:	801a      	strh	r2, [r3, #0]
	  	        feedback.speed2 = motor2Control.speed;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <main+0x1e0>)
 8000718:	f9b3 2000 	ldrsh.w	r2, [r3]
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <main+0x1f0>)
 800071e:	805a      	strh	r2, [r3, #2]
	  	        feedback.speed3 = motor3Control.speed;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <main+0x1e4>)
 8000722:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0x1f0>)
 8000728:	809a      	strh	r2, [r3, #4]

	  	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 800072a:	2108      	movs	r1, #8
 800072c:	4814      	ldr	r0, [pc, #80]	; (8000780 <main+0x1f0>)
 800072e:	f00b fd11 	bl	800c154 <CDC_Transmit_FS>
	  	      }

	  	wake_drivers_up();
 8000732:	f7ff ff0f 	bl	8000554 <wake_drivers_up>
	  	HAL_Delay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f001 f9d2 	bl	8001ae0 <HAL_Delay>
        wake_drivers_up();
 800073c:	e7ad      	b.n	800069a <main+0x10a>
 800073e:	bf00      	nop
 8000740:	200004c4 	.word	0x200004c4
 8000744:	200002fc 	.word	0x200002fc
 8000748:	20000348 	.word	0x20000348
 800074c:	20000394 	.word	0x20000394
 8000750:	200003e0 	.word	0x200003e0
 8000754:	20000478 	.word	0x20000478
 8000758:	40012c00 	.word	0x40012c00
 800075c:	40014000 	.word	0x40014000
 8000760:	200005b3 	.word	0x200005b3
 8000764:	200005b2 	.word	0x200005b2
 8000768:	200005a8 	.word	0x200005a8
 800076c:	20000000 	.word	0x20000000
 8000770:	20000014 	.word	0x20000014
 8000774:	20000028 	.word	0x20000028
 8000778:	200005b4 	.word	0x200005b4
 800077c:	200005b6 	.word	0x200005b6
 8000780:	2000003c 	.word	0x2000003c

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2238      	movs	r2, #56	; 0x38
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f00c f95e 	bl	800ca54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007aa:	f004 fd9d 	bl	80052e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007ae:	230a      	movs	r3, #10
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 80007cc:	2312      	movs	r3, #18
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80007d4:	2306      	movs	r3, #6
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 fe35 	bl	8005450 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007ec:	f000 fd62 	bl	80012b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2303      	movs	r3, #3
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2104      	movs	r1, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f005 f939 	bl	8005a80 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 fd4e 	bl	80012b4 <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3750      	adds	r7, #80	; 0x50
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2220      	movs	r2, #32
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f00c f90b 	bl	800ca54 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000840:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000844:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000848:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800084c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <MX_ADC1_Init+0xe8>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000868:	2204      	movs	r2, #4
 800086a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_ADC1_Init+0xe8>)
 800086e:	2200      	movs	r2, #0
 8000870:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000874:	2200      	movs	r2, #0
 8000876:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_ADC1_Init+0xe8>)
 800087a:	2201      	movs	r2, #1
 800087c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_ADC1_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_ADC1_Init+0xe8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_ADC1_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_ADC1_Init+0xe8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <MX_ADC1_Init+0xe8>)
 80008aa:	f001 fb15 	bl	8001ed8 <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008b4:	f000 fcfe 	bl	80012b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_ADC1_Init+0xe8>)
 80008c4:	f002 f8a8 	bl	8002a18 <HAL_ADCEx_MultiModeConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ce:	f000 fcf1 	bl	80012b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_ADC1_Init+0xec>)
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d6:	2306      	movs	r3, #6
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008de:	237f      	movs	r3, #127	; 0x7f
 80008e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e2:	2304      	movs	r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_ADC1_Init+0xe8>)
 80008f0:	f001 fc7c 	bl	80021ec <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008fa:	f000 fcdb 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001e4 	.word	0x200001e4
 800090c:	c3210000 	.word	0xc3210000

08000910 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <MX_CRC_Init+0x3c>)
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <MX_CRC_Init+0x40>)
 8000918:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_CRC_Init+0x3c>)
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_CRC_Init+0x3c>)
 8000922:	2200      	movs	r2, #0
 8000924:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_CRC_Init+0x3c>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_CRC_Init+0x3c>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_CRC_Init+0x3c>)
 8000934:	2201      	movs	r2, #1
 8000936:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_CRC_Init+0x3c>)
 800093a:	f002 fa21 	bl	8002d80 <HAL_CRC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000944:	f000 fcb6 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200002b0 	.word	0x200002b0
 8000950:	40023000 	.word	0x40023000

08000954 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_RTC_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_RTC_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_RTC_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_RTC_Init+0x50>)
 8000966:	227f      	movs	r2, #127	; 0x7f
 8000968:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_RTC_Init+0x50>)
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_RTC_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_RTC_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_RTC_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_RTC_Init+0x50>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000988:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_RTC_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_RTC_Init+0x50>)
 8000992:	f005 fc49 	bl	8006228 <HAL_RTC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 fc8a 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200002d4 	.word	0x200002d4
 80009a8:	40002800 	.word	0x40002800

080009ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b098      	sub	sp, #96	; 0x60
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2234      	movs	r2, #52	; 0x34
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f00c f83b 	bl	800ca54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_TIM1_Init+0x138>)
 80009e0:	4a41      	ldr	r2, [pc, #260]	; (8000ae8 <MX_TIM1_Init+0x13c>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009e4:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <MX_TIM1_Init+0x138>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <MX_TIM1_Init+0x138>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <MX_TIM1_Init+0x138>)
 80009f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <MX_TIM1_Init+0x138>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fe:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a0a:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000a0c:	f005 fd77 	bl	80064fe <HAL_TIM_PWM_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fc4d 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000a2e:	f007 fa4f 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 fc3c 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	2360      	movs	r3, #96	; 0x60
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000a62:	f006 fc67 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a6c:	f000 fc22 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a74:	2204      	movs	r2, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000a7a:	f006 fc5b 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a84:	f000 fc16 	bl	80012b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000ac6:	f007 fa85 	bl	8007fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ad0:	f000 fbf0 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM1_Init+0x138>)
 8000ad6:	f000 fe2b 	bl	8001730 <HAL_TIM_MspPostInit>

}
 8000ada:	bf00      	nop
 8000adc:	3760      	adds	r7, #96	; 0x60
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002fc 	.word	0x200002fc
 8000ae8:	40012c00 	.word	0x40012c00

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b18:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b38:	4828      	ldr	r0, [pc, #160]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b3a:	f005 fce0 	bl	80064fe <HAL_TIM_PWM_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 fbb6 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4821      	ldr	r0, [pc, #132]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b58:	f007 f9ba 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b62:	f000 fba7 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b66:	2360      	movs	r3, #96	; 0x60
 8000b68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b7e:	f006 fbd9 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b88:	f000 fb94 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2204      	movs	r2, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000b94:	f006 fbce 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b9e:	f000 fb89 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000baa:	f006 fbc3 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000bb4:	f000 fb7e 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	220c      	movs	r2, #12
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000bc0:	f006 fbb8 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000bca:	f000 fb73 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM2_Init+0xf0>)
 8000bd0:	f000 fdae 	bl	8001730 <HAL_TIM_MspPostInit>

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000348 	.word	0x20000348

08000be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2224      	movs	r2, #36	; 0x24
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00b ff30 	bl	800ca54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_TIM3_Init+0xa8>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c50:	f006 f8bc 	bl	8006dcc <HAL_TIM_Encoder_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f000 fb2b 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM3_Init+0xa4>)
 8000c6c:	f007 f930 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c76:	f000 fb1d 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000394 	.word	0x20000394
 8000c88:	40000400 	.word	0x40000400

08000c8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2224      	movs	r2, #36	; 0x24
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00b feda 	bl	800ca54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <MX_TIM4_Init+0xa8>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000cfc:	f006 f866 	bl	8006dcc <HAL_TIM_Encoder_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d06:	f000 fad5 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_TIM4_Init+0xa4>)
 8000d18:	f007 f8da 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d22:	f000 fac7 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200003e0 	.word	0x200003e0
 8000d34:	40000800 	.word	0x40000800

08000d38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_TIM6_Init+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d50:	2214      	movs	r2, #20
 8000d52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d6a:	f005 fb71 	bl	8006450 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d74:	f000 fa9e 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d78:	2320      	movs	r3, #32
 8000d7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_TIM6_Init+0x64>)
 8000d86:	f007 f8a3 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 fa90 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000042c 	.word	0x2000042c
 8000da0:	40001000 	.word	0x40001000

08000da4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f00b fe4e 	bl	800ca54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_TIM8_Init+0xb0>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e06:	2301      	movs	r3, #1
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000e1a:	f005 ffd7 	bl	8006dcc <HAL_TIM_Encoder_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000e24:	f000 fa46 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_TIM8_Init+0xac>)
 8000e3a:	f007 f849 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000e44:	f000 fa36 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3730      	adds	r7, #48	; 0x30
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000478 	.word	0x20000478
 8000e54:	40013400 	.word	0x40013400

08000e58 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b098      	sub	sp, #96	; 0x60
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2234      	movs	r2, #52	; 0x34
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00b fde5 	bl	800ca54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <MX_TIM15_Init+0x108>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 45;
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000e92:	222d      	movs	r2, #45	; 0x2d
 8000e94:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000eb6:	4829      	ldr	r0, [pc, #164]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000eb8:	f005 fb21 	bl	80064fe <HAL_TIM_PWM_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 f9f7 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ece:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4821      	ldr	r0, [pc, #132]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000ed6:	f006 fffb 	bl	8007ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 f9e8 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee4:	2360      	movs	r3, #96	; 0x60
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eec:	2300      	movs	r3, #0
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f04:	2204      	movs	r2, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4814      	ldr	r0, [pc, #80]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000f0a:	f006 fa13 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f14:	f000 f9ce 	bl	80012b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000f40:	f007 f848 	bl	8007fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000f4a:	f000 f9b3 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM15_Init+0x104>)
 8000f50:	f000 fbee 	bl	8001730 <HAL_TIM_MspPostInit>

}
 8000f54:	bf00      	nop
 8000f56:	3760      	adds	r7, #96	; 0x60
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200004c4 	.word	0x200004c4
 8000f60:	40014000 	.word	0x40014000

08000f64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2234      	movs	r2, #52	; 0x34
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00b fd65 	bl	800ca54 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <MX_TIM16_Init+0xec>)
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <MX_TIM16_Init+0xf0>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 45;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_TIM16_Init+0xec>)
 8000f92:	222d      	movs	r2, #45	; 0x2d
 8000f94:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <MX_TIM16_Init+0xec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_TIM16_Init+0xec>)
 8000f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <MX_TIM16_Init+0xec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_TIM16_Init+0xec>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_TIM16_Init+0xec>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fb6:	4826      	ldr	r0, [pc, #152]	; (8001050 <MX_TIM16_Init+0xec>)
 8000fb8:	f005 fa4a 	bl	8006450 <HAL_TIM_Base_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000fc2:	f000 f977 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <MX_TIM16_Init+0xec>)
 8000fc8:	f005 fa99 	bl	80064fe <HAL_TIM_PWM_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000fd2:	f000 f96f 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	; 0x60
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4815      	ldr	r0, [pc, #84]	; (8001050 <MX_TIM16_Init+0xec>)
 8000ffc:	f006 f99a 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001006:	f000 f955 	bl	80012b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001022:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM16_Init+0xec>)
 8001032:	f006 ffcf 	bl	8007fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800103c:	f000 f93a 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM16_Init+0xec>)
 8001042:	f000 fb75 	bl	8001730 <HAL_TIM_MspPostInit>

}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	; 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000510 	.word	0x20000510
 8001054:	40014400 	.word	0x40014400

08001058 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2234      	movs	r2, #52	; 0x34
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00b fceb 	bl	800ca54 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <MX_TIM17_Init+0xec>)
 8001080:	4a31      	ldr	r2, [pc, #196]	; (8001148 <MX_TIM17_Init+0xf0>)
 8001082:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 45;
 8001084:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <MX_TIM17_Init+0xec>)
 8001086:	222d      	movs	r2, #45	; 0x2d
 8001088:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_TIM17_Init+0xec>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <MX_TIM17_Init+0xec>)
 8001092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001096:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_TIM17_Init+0xec>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_TIM17_Init+0xec>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_TIM17_Init+0xec>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80010aa:	4826      	ldr	r0, [pc, #152]	; (8001144 <MX_TIM17_Init+0xec>)
 80010ac:	f005 f9d0 	bl	8006450 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80010b6:	f000 f8fd 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <MX_TIM17_Init+0xec>)
 80010bc:	f005 fa1f 	bl	80064fe <HAL_TIM_PWM_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80010c6:	f000 f8f5 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ca:	2360      	movs	r3, #96	; 0x60
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d6:	2300      	movs	r3, #0
 80010d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	4815      	ldr	r0, [pc, #84]	; (8001144 <MX_TIM17_Init+0xec>)
 80010f0:	f006 f920 	bl	8007334 <HAL_TIM_PWM_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80010fa:	f000 f8db 	bl	80012b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001116:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <MX_TIM17_Init+0xec>)
 8001126:	f006 ff55 	bl	8007fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001130:	f000 f8c0 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM17_Init+0xec>)
 8001136:	f000 fafb 	bl	8001730 <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000055c 	.word	0x2000055c
 8001148:	40014800 	.word	0x40014800

0800114c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_DMA_Init+0x50>)
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <MX_DMA_Init+0x50>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6493      	str	r3, [r2, #72]	; 0x48
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_DMA_Init+0x50>)
 8001160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_DMA_Init+0x50>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <MX_DMA_Init+0x50>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6493      	str	r3, [r2, #72]	; 0x48
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_DMA_Init+0x50>)
 8001178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200b      	movs	r0, #11
 8001188:	f001 fdc5 	bl	8002d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800118c:	200b      	movs	r0, #11
 800118e:	f001 fddc 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <MX_GPIO_Init+0x108>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_B1_D3_Pin|LED_B2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2103      	movs	r1, #3
 8001202:	482a      	ldr	r0, [pc, #168]	; (80012ac <MX_GPIO_Init+0x10c>)
 8001204:	f002 fb02 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R1_D1_GPIO_Port, LED_R1_D1_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2110      	movs	r1, #16
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f002 fafc 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_SLEEP_Pin|MOT_OFF_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2109      	movs	r1, #9
 8001218:	4825      	ldr	r0, [pc, #148]	; (80012b0 <MX_GPIO_Init+0x110>)
 800121a:	f002 faf7 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_B1_D3_Pin LED_B2_Pin */
  GPIO_InitStruct.Pin = LED_B1_D3_Pin|LED_B2_Pin;
 800121e:	2303      	movs	r3, #3
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	4619      	mov	r1, r3
 8001234:	481d      	ldr	r0, [pc, #116]	; (80012ac <MX_GPIO_Init+0x10c>)
 8001236:	f002 f967 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R1_D1_Pin */
  GPIO_InitStruct.Pin = LED_R1_D1_Pin;
 800123a:	2310      	movs	r3, #16
 800123c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_R1_D1_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f002 f958 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_R2_D2_Pin */
  GPIO_InitStruct.Pin = LED_R2_D2_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_R2_D2_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f002 f94a 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_SLEEP_Pin MOT_OFF_Pin */
  GPIO_InitStruct.Pin = MOT_SLEEP_Pin|MOT_OFF_Pin;
 8001274:	2309      	movs	r3, #9
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_GPIO_Init+0x110>)
 800128c:	f002 f93c 	bl	8003508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2017      	movs	r0, #23
 8001296:	f001 fd3e 	bl	8002d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800129a:	2017      	movs	r0, #23
 800129c:	f001 fd55 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48001400 	.word	0x48001400
 80012b0:	48000400 	.word	0x48000400

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6613      	str	r3, [r2, #96]	; 0x60
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x44>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x44>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x44>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012f6:	f004 f89b 	bl	8005430 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	; 0x50
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2244      	movs	r2, #68	; 0x44
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00b fb9b 	bl	800ca54 <memset>
  if(hadc->Instance==ADC1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001326:	d146      	bne.n	80013b6 <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800132e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fd85 	bl	8005e48 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8001344:	f7ff ffb6 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_ADC_MspInit+0xb8>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_ADC_MspInit+0xb8>)
 800134e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_ADC_MspInit+0xb8>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_ADC_MspInit+0xc0>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 8001368:	2205      	movs	r2, #5
 800136a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 8001380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001384:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 800138e:	2220      	movs	r2, #32
 8001390:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 8001394:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001398:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139a:	480a      	ldr	r0, [pc, #40]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 800139c:	f001 fdda 	bl	8002f54 <HAL_DMA_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 80013a6:	f7ff ff85 	bl	80012b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_ADC_MspInit+0xbc>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	; 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000250 	.word	0x20000250
 80013c8:	40020008 	.word	0x40020008

080013cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_CRC_MspInit+0x38>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10b      	bne.n	80013f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_CRC_MspInit+0x3c>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023000 	.word	0x40023000
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	; 0x50
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2244      	movs	r2, #68	; 0x44
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f00b fb19 	bl	800ca54 <memset>
  if(hrtc->Instance==RTC)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a15      	ldr	r2, [pc, #84]	; (800147c <HAL_RTC_MspInit+0x70>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d123      	bne.n	8001474 <HAL_RTC_MspInit+0x68>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800142c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001430:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fd03 	bl	8005e48 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001448:	f7ff ff34 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_RTC_MspInit+0x74>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_RTC_MspInit+0x74>)
 8001454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RTC_MspInit+0x74>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_RTC_MspInit+0x74>)
 8001462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001466:	6593      	str	r3, [r2, #88]	; 0x58
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RTC_MspInit+0x74>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	; 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40002800 	.word	0x40002800
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_TIM_PWM_MspInit+0x80>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10c      	bne.n	80014b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 800149c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a0:	6613      	str	r3, [r2, #96]	; 0x60
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80014ae:	e022      	b.n	80014f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b8:	d10c      	bne.n	80014d4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
}
 80014d2:	e010      	b.n	80014f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_TIM_PWM_MspInit+0x88>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_TIM_PWM_MspInit+0x84>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
}
 80014f6:	bf00      	nop
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40014000 	.word	0x40014000

08001510 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a54      	ldr	r2, [pc, #336]	; (8001680 <HAL_TIM_Encoder_MspInit+0x170>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d128      	bne.n	8001584 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001532:	4b54      	ldr	r3, [pc, #336]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	4a53      	ldr	r2, [pc, #332]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6593      	str	r3, [r2, #88]	; 0x58
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a4d      	ldr	r2, [pc, #308]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOT1_ENC_1_Pin|MOT1_ENC_2_Pin;
 8001562:	2330      	movs	r3, #48	; 0x30
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001572:	2302      	movs	r3, #2
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4842      	ldr	r0, [pc, #264]	; (8001688 <HAL_TIM_Encoder_MspInit+0x178>)
 800157e:	f001 ffc3 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001582:	e079      	b.n	8001678 <HAL_TIM_Encoder_MspInit+0x168>
  else if(htim_encoder->Instance==TIM4)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a40      	ldr	r2, [pc, #256]	; (800168c <HAL_TIM_Encoder_MspInit+0x17c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d128      	bne.n	80015e0 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a36      	ldr	r2, [pc, #216]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOT2_ENC_1_Pin|MOT2_ENC_2_Pin;
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ce:	2302      	movs	r3, #2
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	482b      	ldr	r0, [pc, #172]	; (8001688 <HAL_TIM_Encoder_MspInit+0x178>)
 80015da:	f001 ff95 	bl	8003508 <HAL_GPIO_Init>
}
 80015de:	e04b      	b.n	8001678 <HAL_TIM_Encoder_MspInit+0x168>
  else if(htim_encoder->Instance==TIM8)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_TIM_Encoder_MspInit+0x180>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d146      	bne.n	8001678 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 80015f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015f4:	6613      	str	r3, [r2, #96]	; 0x60
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_TIM_Encoder_MspInit+0x174>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOT3_ENC_1_Pin;
 8001632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001644:	2302      	movs	r3, #2
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOT3_ENC_1_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f001 ff59 	bl	8003508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT3_ENC_2_Pin;
 8001656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001668:	230a      	movs	r3, #10
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(MOT3_ENC_2_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_TIM_Encoder_MspInit+0x178>)
 8001674:	f001 ff48 	bl	8003508 <HAL_GPIO_Init>
}
 8001678:	bf00      	nop
 800167a:	3738      	adds	r7, #56	; 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40000400 	.word	0x40000400
 8001684:	40021000 	.word	0x40021000
 8001688:	48000400 	.word	0x48000400
 800168c:	40000800 	.word	0x40000800
 8001690:	40013400 	.word	0x40013400

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_TIM_Base_MspInit+0x8c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d114      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2036      	movs	r0, #54	; 0x36
 80016c4:	f001 fb27 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016c8:	2036      	movs	r0, #54	; 0x36
 80016ca:	f001 fb3e 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80016ce:	e022      	b.n	8001716 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_TIM_Base_MspInit+0x94>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10c      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6613      	str	r3, [r2, #96]	; 0x60
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
}
 80016f2:	e010      	b.n	8001716 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_TIM_Base_MspInit+0x98>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10b      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6613      	str	r3, [r2, #96]	; 0x60
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_TIM_Base_MspInit+0x90>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40001000 	.word	0x40001000
 8001724:	40021000 	.word	0x40021000
 8001728:	40014400 	.word	0x40014400
 800172c:	40014800 	.word	0x40014800

08001730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a61      	ldr	r2, [pc, #388]	; (80018d4 <HAL_TIM_MspPostInit+0x1a4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d11e      	bne.n	8001790 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a60      	ldr	r2, [pc, #384]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOT1_PWM_1_Pin|MOT1_PWM_2_Pin;
 800176a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800177c:	2306      	movs	r3, #6
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 febd 	bl	8003508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800178e:	e09c      	b.n	80018ca <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001798:	d12f      	bne.n	80017fa <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4b4f      	ldr	r3, [pc, #316]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a6:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOT2_PWM_1_Pin|MOT2_PWM_2_Pin|MOT3_PWM_1_Pin;
 80017b2:	2307      	movs	r3, #7
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f001 fe9a 	bl	8003508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT3_PWM_2_Pin;
 80017d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80017e6:	230a      	movs	r3, #10
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOT3_PWM_2_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f001 fe88 	bl	8003508 <HAL_GPIO_Init>
}
 80017f8:	e067      	b.n	80018ca <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM15)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a37      	ldr	r2, [pc, #220]	; (80018dc <HAL_TIM_MspPostInit+0x1ac>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d11d      	bne.n	8001840 <HAL_TIM_MspPostInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TRW_PWM_1_Pin;
 800181c:	2308      	movs	r3, #8
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800182c:	2309      	movs	r3, #9
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TRW_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f001 fe65 	bl	8003508 <HAL_GPIO_Init>
}
 800183e:	e044      	b.n	80018ca <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM16)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <HAL_TIM_MspPostInit+0x1b0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11d      	bne.n	8001886 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HOLD_servo_PWM_Pin;
 8001862:	2340      	movs	r3, #64	; 0x40
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001872:	2301      	movs	r3, #1
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HOLD_servo_PWM_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f001 fe42 	bl	8003508 <HAL_GPIO_Init>
}
 8001884:	e021      	b.n	80018ca <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM17)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <HAL_TIM_MspPostInit+0x1b4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d11c      	bne.n	80018ca <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_MspPostInit+0x1a8>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AIM_servo_PWM_Pin;
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AIM_servo_PWM_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f001 fe1f 	bl	8003508 <HAL_GPIO_Init>
}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	; 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40014000 	.word	0x40014000
 80018e0:	40014400 	.word	0x40014400
 80018e4:	40014800 	.word	0x40014800

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f8b6 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <DMA1_Channel1_IRQHandler+0x10>)
 8001942:	f001 fc91 	bl	8003268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000250 	.word	0x20000250

08001950 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <USB_LP_IRQHandler+0x10>)
 8001956:	f002 f89b 	bl	8003a90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20001288 	.word	0x20001288

08001964 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LED_R2_D2_Pin);
 8001968:	2020      	movs	r0, #32
 800196a:	f001 ff67 	bl	800383c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TIM6_DAC_IRQHandler+0x10>)
 800197a:	f005 fb5b 	bl	8007034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000042c 	.word	0x2000042c

08001988 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0b      	ldr	r4, [pc, #44]	; (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019d6:	f7ff ffd7 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f00b f809 	bl	800c9f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7fe fdd7 	bl	8000590 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   r0, =_estack
 80019e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 80019f0:	0800cadc 	.word	0x0800cadc
  ldr r2, =_sbss
 80019f4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80019f8:	2000179c 	.word	0x2000179c

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>

080019fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f001 f979 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f000 f80e 	bl	8001a30 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e001      	b.n	8001a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a20:	f7ff fc4e 	bl	80012c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a24:	79fb      	ldrb	r3, [r7, #7]

}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_InitTick+0x68>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d022      	beq.n	8001a8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_InitTick+0x6c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_InitTick+0x68>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 f984 	bl	8002d66 <HAL_SYSTICK_Config>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b0f      	cmp	r3, #15
 8001a68:	d809      	bhi.n	8001a7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a72:	f001 f950 	bl	8002d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_InitTick+0x70>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e007      	b.n	8001a8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e004      	b.n	8001a8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e001      	b.n	8001a8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000004c 	.word	0x2000004c
 8001a9c:	20000044 	.word	0x20000044
 8001aa0:	20000048 	.word	0x20000048

08001aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_IncTick+0x1c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_IncTick+0x1c>)
 8001ab4:	6013      	str	r3, [r2, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	200005e0 	.word	0x200005e0
 8001ac4:	2000004c 	.word	0x2000004c

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200005e0 	.word	0x200005e0

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d004      	beq.n	8001b04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_Delay+0x40>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4413      	add	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b04:	bf00      	nop
 8001b06:	f7ff ffdf 	bl	8001ac8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d8f7      	bhi.n	8001b06 <HAL_Delay+0x26>
  {
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000004c 	.word	0x2000004c

08001b24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3360      	adds	r3, #96	; 0x60
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <LL_ADC_SetOffset+0x44>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bc4:	bf00      	nop
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	03fff000 	.word	0x03fff000

08001bd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3360      	adds	r3, #96	; 0x60
 8001be2:	461a      	mov	r2, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3360      	adds	r3, #96	; 0x60
 8001c10:	461a      	mov	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b087      	sub	sp, #28
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3360      	adds	r3, #96	; 0x60
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3360      	adds	r3, #96	; 0x60
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	615a      	str	r2, [r3, #20]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3330      	adds	r3, #48	; 0x30
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	211f      	movs	r1, #31
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 011f 	and.w	r1, r3, #31
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3314      	adds	r3, #20
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0e5b      	lsrs	r3, r3, #25
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2107      	movs	r1, #7
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0d1b      	lsrs	r3, r3, #20
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10a      	bne.n	8001da2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001da0:	e00a      	b.n	8001db8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	407f0000 	.word	0x407f0000

08001dc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6093      	str	r3, [r2, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <LL_ADC_IsEnabled+0x18>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <LL_ADC_IsEnabled+0x1a>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e177      	b.n	80021e2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fa01 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff67 	bl	8001dec <LL_ADC_IsDeepPowerDownEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff4d 	bl	8001dc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff82 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff66 	bl	8001e14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f48:	4b9c      	ldr	r3, [pc, #624]	; (80021bc <HAL_ADC_Init+0x2e4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	4a9c      	ldr	r2, [pc, #624]	; (80021c0 <HAL_ADC_Init+0x2e8>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff64 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff75 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8001fa0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8110 	bne.w	80021d0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 810c 	bne.w	80021d0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff49 	bl	8001e64 <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fdc:	f7ff ff42 	bl	8001e64 <LL_ADC_IsEnabled>
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	4878      	ldr	r0, [pc, #480]	; (80021c4 <HAL_ADC_Init+0x2ec>)
 8001fe4:	f7ff ff3e 	bl	8001e64 <LL_ADC_IsEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4323      	orrs	r3, r4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4874      	ldr	r0, [pc, #464]	; (80021c8 <HAL_ADC_Init+0x2f0>)
 8001ff8:	f7ff fd94 	bl	8001b24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7f5b      	ldrb	r3, [r3, #29]
 8002000:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002006:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800200c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002012:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002026:	2b01      	cmp	r3, #1
 8002028:	d106      	bne.n	8002038 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	045b      	lsls	r3, r3, #17
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_ADC_Init+0x2f4>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff01 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002088:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff0e 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 8002094:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d16d      	bne.n	8002178 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d16a      	bne.n	8002178 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6911      	ldr	r1, [r2, #16]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002102:	e013      	b.n	800212c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002112:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002128:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002132:	2b01      	cmp	r3, #1
 8002134:	d118      	bne.n	8002168 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002158:	430a      	orrs	r2, r1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	e007      	b.n	8002178 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10c      	bne.n	800219a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f023 010f 	bic.w	r1, r3, #15
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
 8002198:	e007      	b.n	80021aa <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 020f 	bic.w	r2, r2, #15
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ba:	e011      	b.n	80021e0 <HAL_ADC_Init+0x308>
 80021bc:	20000044 	.word	0x20000044
 80021c0:	053e2d63 	.word	0x053e2d63
 80021c4:	50000100 	.word	0x50000100
 80021c8:	50000300 	.word	0x50000300
 80021cc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop

080021ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0b6      	sub	sp, #216	; 0xd8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x22>
 800220a:	2302      	movs	r3, #2
 800220c:	e3c8      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x7b4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fe35 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 83ad 	bne.w	8002982 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	f7ff fd47 	bl	8001cc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fe23 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002244:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fe2f 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 8002252:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002256:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 81d9 	bne.w	8002612 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 81d4 	bne.w	8002612 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002272:	d10f      	bne.n	8002294 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	4619      	mov	r1, r3
 8002280:	f7ff fd4e 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd08 	bl	8001ca2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002292:	e00e      	b.n	80022b2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f7ff fd3d 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fcf8 	bl	8001ca2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d022      	beq.n	800231a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022e4:	f7ff fc52 	bl	8001b8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff fc9e 	bl	8001c36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x124>
 800230a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230e:	e000      	b.n	8002312 <HAL_ADC_ConfigChannel+0x126>
 8002310:	2300      	movs	r3, #0
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff fcaa 	bl	8001c6c <LL_ADC_SetOffsetSaturation>
 8002318:	e17b      	b.n	8002612 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fc57 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x15a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fc4c 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	e01e      	b.n	8002384 <HAL_ADC_ConfigChannel+0x198>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fc41 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800236c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002374:	2320      	movs	r3, #32
 8002376:	e004      	b.n	8002382 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002378:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1b0>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	e018      	b.n	80023ce <HAL_ADC_ConfigChannel+0x1e2>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e004      	b.n	80023ce <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80023c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc10 	bl	8001c00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fbf4 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x220>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fbe9 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	e01e      	b.n	800244a <HAL_ADC_ConfigChannel+0x25e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fbde 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800242a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800242e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e004      	b.n	8002448 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800243e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x276>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	e018      	b.n	8002494 <HAL_ADC_ConfigChannel+0x2a8>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800247a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800247e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e004      	b.n	8002494 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800248a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002494:	429a      	cmp	r2, r3
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fbad 	bl	8001c00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fb91 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x2e6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fb86 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	e01e      	b.n	8002510 <HAL_ADC_ConfigChannel+0x324>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fb7b 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e004      	b.n	800250e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x33c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	e016      	b.n	8002556 <HAL_ADC_ConfigChannel+0x36a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800253a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800253c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e004      	b.n	8002556 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800254c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002556:	429a      	cmp	r2, r3
 8002558:	d106      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	2102      	movs	r1, #2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb4c 	bl	8001c00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2103      	movs	r1, #3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fb30 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x3a8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2103      	movs	r1, #3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb25 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 021f 	and.w	r2, r3, #31
 8002592:	e017      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x3d8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2103      	movs	r1, #3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fb1a 	bl	8001bd4 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ae:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80025ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x3f0>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	e011      	b.n	8002600 <HAL_ADC_ConfigChannel+0x414>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80025f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	2103      	movs	r1, #3
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff faf7 	bl	8001c00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fc24 	bl	8001e64 <LL_ADC_IsEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8140 	bne.w	80028a4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff fba1 	bl	8001d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a8f      	ldr	r2, [pc, #572]	; (8002878 <HAL_ADC_ConfigChannel+0x68c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	f040 8131 	bne.w	80028a4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <HAL_ADC_ConfigChannel+0x47e>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2b09      	cmp	r3, #9
 8002660:	bf94      	ite	ls
 8002662:	2301      	movls	r3, #1
 8002664:	2300      	movhi	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	e019      	b.n	800269e <HAL_ADC_ConfigChannel+0x4b2>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800267c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e003      	b.n	800268e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2b09      	cmp	r3, #9
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d079      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_ADC_ConfigChannel+0x4d2>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	3301      	adds	r3, #1
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026bc:	e015      	b.n	80026ea <HAL_ADC_ConfigChannel+0x4fe>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e003      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	069b      	lsls	r3, r3, #26
 80026e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_ADC_ConfigChannel+0x51e>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	e017      	b.n	800273a <HAL_ADC_ConfigChannel+0x54e>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800271c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e003      	b.n	800272e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	ea42 0103 	orr.w	r1, r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x574>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	f003 021f 	and.w	r2, r3, #31
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	051b      	lsls	r3, r3, #20
 800275e:	e018      	b.n	8002792 <HAL_ADC_ConfigChannel+0x5a6>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e003      	b.n	8002784 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800277c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f003 021f 	and.w	r2, r3, #31
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002792:	430b      	orrs	r3, r1
 8002794:	e081      	b.n	800289a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x5c6>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	3301      	adds	r3, #1
 80027aa:	069b      	lsls	r3, r3, #26
 80027ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b0:	e015      	b.n	80027de <HAL_ADC_ConfigChannel+0x5f2>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e003      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	069b      	lsls	r3, r3, #26
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x612>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	e017      	b.n	800282e <HAL_ADC_ConfigChannel+0x642>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	61fb      	str	r3, [r7, #28]
  return result;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e003      	b.n	8002822 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	ea42 0103 	orr.w	r1, r2, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_ADC_ConfigChannel+0x66e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	3301      	adds	r3, #1
 8002846:	f003 021f 	and.w	r2, r3, #31
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	3b1e      	subs	r3, #30
 8002852:	051b      	lsls	r3, r3, #20
 8002854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002858:	e01e      	b.n	8002898 <HAL_ADC_ConfigChannel+0x6ac>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	613b      	str	r3, [r7, #16]
  return result;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e006      	b.n	8002884 <HAL_ADC_ConfigChannel+0x698>
 8002876:	bf00      	nop
 8002878:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	f003 021f 	and.w	r2, r3, #31
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	051b      	lsls	r3, r3, #20
 8002894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002898:	430b      	orrs	r3, r1
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	6892      	ldr	r2, [r2, #8]
 800289e:	4619      	mov	r1, r3
 80028a0:	f7ff fa3e 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_ADC_ConfigChannel+0x7bc>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d071      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b0:	483e      	ldr	r0, [pc, #248]	; (80029ac <HAL_ADC_ConfigChannel+0x7c0>)
 80028b2:	f7ff f95d 	bl	8001b70 <LL_ADC_GetCommonPathInternalCh>
 80028b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d004      	beq.n	80028ce <HAL_ADC_ConfigChannel+0x6e2>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d127      	bne.n	800291e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d121      	bne.n	800291e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e2:	d157      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ec:	4619      	mov	r1, r3
 80028ee:	482f      	ldr	r0, [pc, #188]	; (80029ac <HAL_ADC_ConfigChannel+0x7c0>)
 80028f0:	f7ff f92b 	bl	8001b4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_ADC_ConfigChannel+0x7cc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	4a30      	ldr	r2, [pc, #192]	; (80029bc <HAL_ADC_ConfigChannel+0x7d0>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800290e:	e002      	b.n	8002916 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3b01      	subs	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f9      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800291c:	e03a      	b.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d113      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x764>
 8002928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10d      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_ADC_ConfigChannel+0x7d8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02a      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002946:	4619      	mov	r1, r3
 8002948:	4818      	ldr	r0, [pc, #96]	; (80029ac <HAL_ADC_ConfigChannel+0x7c0>)
 800294a:	f7ff f8fe 	bl	8001b4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800294e:	e021      	b.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d11c      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800295a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_ADC_ConfigChannel+0x7d8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d011      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002978:	4619      	mov	r1, r3
 800297a:	480c      	ldr	r0, [pc, #48]	; (80029ac <HAL_ADC_ConfigChannel+0x7c0>)
 800297c:	f7ff f8e5 	bl	8001b4a <LL_ADC_SetCommonPathInternalCh>
 8002980:	e008      	b.n	8002994 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800299c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	37d8      	adds	r7, #216	; 0xd8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	80080000 	.word	0x80080000
 80029ac:	50000300 	.word	0x50000300
 80029b0:	c3210000 	.word	0xc3210000
 80029b4:	90c00010 	.word	0x90c00010
 80029b8:	20000044 	.word	0x20000044
 80029bc:	053e2d63 	.word	0x053e2d63
 80029c0:	c7520000 	.word	0xc7520000
 80029c4:	50000100 	.word	0x50000100
 80029c8:	cb840000 	.word	0xcb840000

080029cc <LL_ADC_IsEnabled>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <LL_ADC_IsEnabled+0x18>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <LL_ADC_IsEnabled+0x1a>
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b0a1      	sub	sp, #132	; 0x84
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e08b      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002a42:	2300      	movs	r3, #0
 8002a44:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a4e:	d102      	bne.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a50:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	e001      	b.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e06a      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ffb9 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002a80:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ffb3 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d14c      	bne.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d149      	bne.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a9a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d028      	beq.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab6:	035b      	lsls	r3, r3, #13
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ac4:	f7ff ff82 	bl	80029cc <LL_ADC_IsEnabled>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	4823      	ldr	r0, [pc, #140]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002acc:	f7ff ff7e 	bl	80029cc <LL_ADC_IsEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4323      	orrs	r3, r4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d133      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ae0:	f023 030f 	bic.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	431a      	orrs	r2, r3
 8002af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af4:	e024      	b.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b06:	f7ff ff61 	bl	80029cc <LL_ADC_IsEnabled>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4812      	ldr	r0, [pc, #72]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b0e:	f7ff ff5d 	bl	80029cc <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4323      	orrs	r3, r4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b22:	f023 030f 	bic.w	r3, r3, #15
 8002b26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2a:	e009      	b.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b3e:	e000      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3784      	adds	r7, #132	; 0x84
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	50000100 	.word	0x50000100
 8002b5c:	50000300 	.word	0x50000300

08002b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 0307 	and.w	r3, r3, #7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0b      	blt.n	8002bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <__NVIC_EnableIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d301      	bcc.n	8002cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <SysTick_Config+0x40>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cda:	210f      	movs	r1, #15
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f7ff ff8e 	bl	8002c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <SysTick_Config+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <SysTick_Config+0x40>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000e010 	.word	0xe000e010

08002d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff29 	bl	8002b60 <__NVIC_SetPriorityGrouping>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff ff40 	bl	8002ba8 <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff90 	bl	8002c54 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5f 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff33 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ffa4 	bl	8002cbc <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e054      	b.n	8002e3c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7f5b      	ldrb	r3, [r3, #29]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fb12 	bl	80013cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	791b      	ldrb	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_CRC_Init+0xc4>)
 8002dbc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0218 	bic.w	r2, r2, #24
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	e00c      	b.n	8002dea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f834 	bl	8002e48 <HAL_CRCEx_Polynomial_Set>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e028      	b.n	8002e3c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	795b      	ldrb	r3, [r3, #5]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfa:	611a      	str	r2, [r3, #16]
 8002dfc:	e004      	b.n	8002e08 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6912      	ldr	r2, [r2, #16]
 8002e06:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	04c11db7 	.word	0x04c11db7

08002e48 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e58:	231f      	movs	r3, #31
 8002e5a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e5c:	bf00      	nop
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1e5a      	subs	r2, r3, #1
 8002e62:	613a      	str	r2, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_CRCEx_Polynomial_Set+0x34>
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b18      	cmp	r3, #24
 8002e80:	d846      	bhi.n	8002f10 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002f17 	.word	0x08002f17
 8002e8c:	08002f11 	.word	0x08002f11
 8002e90:	08002f11 	.word	0x08002f11
 8002e94:	08002f11 	.word	0x08002f11
 8002e98:	08002f11 	.word	0x08002f11
 8002e9c:	08002f11 	.word	0x08002f11
 8002ea0:	08002f11 	.word	0x08002f11
 8002ea4:	08002f11 	.word	0x08002f11
 8002ea8:	08002f05 	.word	0x08002f05
 8002eac:	08002f11 	.word	0x08002f11
 8002eb0:	08002f11 	.word	0x08002f11
 8002eb4:	08002f11 	.word	0x08002f11
 8002eb8:	08002f11 	.word	0x08002f11
 8002ebc:	08002f11 	.word	0x08002f11
 8002ec0:	08002f11 	.word	0x08002f11
 8002ec4:	08002f11 	.word	0x08002f11
 8002ec8:	08002ef9 	.word	0x08002ef9
 8002ecc:	08002f11 	.word	0x08002f11
 8002ed0:	08002f11 	.word	0x08002f11
 8002ed4:	08002f11 	.word	0x08002f11
 8002ed8:	08002f11 	.word	0x08002f11
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08002f11 	.word	0x08002f11
 8002ee4:	08002f11 	.word	0x08002f11
 8002ee8:	08002eed 	.word	0x08002eed
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d913      	bls.n	8002f1a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ef6:	e010      	b.n	8002f1a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b07      	cmp	r3, #7
 8002efc:	d90f      	bls.n	8002f1e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f02:	e00c      	b.n	8002f1e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	d90b      	bls.n	8002f22 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f0e:	e008      	b.n	8002f22 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
      break;
 8002f14:	e006      	b.n	8002f24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f16:	bf00      	nop
 8002f18:	e004      	b.n	8002f24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e002      	b.n	8002f24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f22:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 0118 	bic.w	r1, r3, #24
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e08d      	b.n	8003082 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_DMA_Init+0x138>)
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d80f      	bhi.n	8002f92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <HAL_DMA_Init+0x13c>)
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_DMA_Init+0x140>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a42      	ldr	r2, [pc, #264]	; (8003098 <HAL_DMA_Init+0x144>)
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f90:	e00e      	b.n	8002fb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_DMA_Init+0x148>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a3d      	ldr	r2, [pc, #244]	; (8003094 <HAL_DMA_Init+0x140>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <HAL_DMA_Init+0x14c>)
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa1e 	bl	8003444 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003010:	d102      	bne.n	8003018 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800302c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_DMA_Init+0x104>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d80c      	bhi.n	8003058 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa3e 	bl	80034c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	e008      	b.n	800306a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40020407 	.word	0x40020407
 8003090:	bffdfff8 	.word	0xbffdfff8
 8003094:	cccccccd 	.word	0xcccccccd
 8003098:	40020000 	.word	0x40020000
 800309c:	bffdfbf8 	.word	0xbffdfbf8
 80030a0:	40020400 	.word	0x40020400

080030a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Start_IT+0x20>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e066      	b.n	8003192 <HAL_DMA_Start_IT+0xee>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d155      	bne.n	8003184 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f962 	bl	80033c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 020e 	orr.w	r2, r2, #14
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e00f      	b.n	800313c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 020a 	orr.w	r2, r2, #10
 800313a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003158:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003170:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e005      	b.n	8003190 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800318c:	2302      	movs	r3, #2
 800318e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d00d      	beq.n	80031ce <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e047      	b.n	800325e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 020e 	bic.w	r2, r2, #14
 80031dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	f003 021f 	and.w	r2, r3, #31
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800321a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00c      	beq.n	800323e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003232:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800323c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
    }
  }
  return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2204      	movs	r2, #4
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d026      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x7a>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2104      	movs	r1, #4
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d071      	beq.n	80033bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032e0:	e06c      	b.n	80033bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2202      	movs	r2, #2
 80032ec:	409a      	lsls	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02e      	beq.n	8003354 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d029      	beq.n	8003354 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 020a 	bic.w	r2, r2, #10
 800331c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f003 021f 	and.w	r2, r3, #31
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2102      	movs	r1, #2
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d038      	beq.n	80033bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003352:	e033      	b.n	80033bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2208      	movs	r2, #8
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02a      	beq.n	80033be <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d025      	beq.n	80033be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 020e 	bic.w	r2, r2, #14
 8003380:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f003 021f 	and.w	r2, r3, #31
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	fa01 f202 	lsl.w	r2, r1, r2
 8003394:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
}
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033dc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b10      	cmp	r3, #16
 8003412:	d108      	bne.n	8003426 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003424:	e007      	b.n	8003436 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	60da      	str	r2, [r3, #12]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d802      	bhi.n	800345e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e001      	b.n	8003462 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003460:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3b08      	subs	r3, #8
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	009a      	lsls	r2, r3, #2
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	461a      	mov	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800348e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2201      	movs	r2, #1
 8003498:	409a      	lsls	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40020407 	.word	0x40020407
 80034b0:	40020800 	.word	0x40020800
 80034b4:	40020820 	.word	0x40020820
 80034b8:	cccccccd 	.word	0xcccccccd
 80034bc:	40020880 	.word	0x40020880

080034c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	461a      	mov	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	1000823f 	.word	0x1000823f
 8003504:	40020940 	.word	0x40020940

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003516:	e15a      	b.n	80037ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 814c 	beq.w	80037c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d005      	beq.n	8003548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003544:	2b02      	cmp	r3, #2
 8003546:	d130      	bne.n	80035aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357e:	2201      	movs	r2, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0201 	and.w	r2, r3, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d017      	beq.n	80035e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d123      	bne.n	800363a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	6939      	ldr	r1, [r7, #16]
 8003636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a6 	beq.w	80037c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367c:	4b5b      	ldr	r3, [pc, #364]	; (80037ec <HAL_GPIO_Init+0x2e4>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	4a5a      	ldr	r2, [pc, #360]	; (80037ec <HAL_GPIO_Init+0x2e4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6613      	str	r3, [r2, #96]	; 0x60
 8003688:	4b58      	ldr	r3, [pc, #352]	; (80037ec <HAL_GPIO_Init+0x2e4>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003694:	4a56      	ldr	r2, [pc, #344]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	3302      	adds	r3, #2
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036be:	d01f      	beq.n	8003700 <HAL_GPIO_Init+0x1f8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_GPIO_Init+0x2ec>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d019      	beq.n	80036fc <HAL_GPIO_Init+0x1f4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_GPIO_Init+0x2f0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_GPIO_Init+0x1f0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a4a      	ldr	r2, [pc, #296]	; (80037fc <HAL_GPIO_Init+0x2f4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_Init+0x1ec>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a49      	ldr	r2, [pc, #292]	; (8003800 <HAL_GPIO_Init+0x2f8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x1e8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a48      	ldr	r2, [pc, #288]	; (8003804 <HAL_GPIO_Init+0x2fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_Init+0x1e4>
 80036e8:	2305      	movs	r3, #5
 80036ea:	e00a      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036ec:	2306      	movs	r3, #6
 80036ee:	e008      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036f0:	2304      	movs	r3, #4
 80036f2:	e006      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036f4:	2303      	movs	r3, #3
 80036f6:	e004      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e002      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_GPIO_Init+0x1fa>
 8003700:	2300      	movs	r3, #0
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	f002 0203 	and.w	r2, r2, #3
 8003708:	0092      	lsls	r2, r2, #2
 800370a:	4093      	lsls	r3, r2
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003712:	4937      	ldr	r1, [pc, #220]	; (80037f0 <HAL_GPIO_Init+0x2e8>)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3302      	adds	r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003744:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800374a:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_GPIO_Init+0x300>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_GPIO_Init+0x300>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_GPIO_Init+0x300>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_GPIO_Init+0x300>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_GPIO_Init+0x300>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3301      	adds	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f ae9d 	bne.w	8003518 <HAL_GPIO_Init+0x10>
  }
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40010000 	.word	0x40010000
 80037f4:	48000400 	.word	0x48000400
 80037f8:	48000800 	.word	0x48000800
 80037fc:	48000c00 	.word	0x48000c00
 8003800:	48001000 	.word	0x48001000
 8003804:	48001400 	.word	0x48001400
 8003808:	40010400 	.word	0x40010400

0800380c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
 8003818:	4613      	mov	r3, r2
 800381a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003828:	e002      	b.n	8003830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800382a:	887a      	ldrh	r2, [r7, #2]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003852:	4a05      	ldr	r2, [pc, #20]	; (8003868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f806 	bl	800386c <HAL_GPIO_EXTI_Callback>
  }
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003884:	b08b      	sub	sp, #44	; 0x2c
 8003886:	af06      	add	r7, sp, #24
 8003888:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0d7      	b.n	8003a44 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f008 fd9b 	bl	800c3e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fc87 	bl	80081ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e04c      	b.n	8003960 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	440b      	add	r3, r1
 80038d6:	3301      	adds	r3, #1
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	b298      	uxth	r0, r3
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3336      	adds	r3, #54	; 0x36
 8003904:	4602      	mov	r2, r0
 8003906:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3303      	adds	r3, #3
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	3338      	adds	r3, #56	; 0x38
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	333c      	adds	r3, #60	; 0x3c
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	3340      	adds	r3, #64	; 0x40
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	3301      	adds	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3ad      	bcc.n	80038c6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e044      	b.n	80039fa <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	440b      	add	r3, r1
 800397e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	440b      	add	r3, r1
 8003994:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	3301      	adds	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d3b5      	bcc.n	8003970 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	687e      	ldr	r6, [r7, #4]
 8003a0c:	466d      	mov	r5, sp
 8003a0e:	f106 0410 	add.w	r4, r6, #16
 8003a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	1d33      	adds	r3, r6, #4
 8003a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1e:	6838      	ldr	r0, [r7, #0]
 8003a20:	f004 fbf0 	bl	8008204 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d102      	bne.n	8003a42 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f001 fc29 	bl	8005294 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_PCD_Start+0x16>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e012      	b.n	8003a88 <HAL_PCD_Start+0x3c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 fb96 	bl	80081a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f006 fdaf 	bl	800a5dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f006 fdb4 	bl	800a60a <USB_ReadInterrupts>
 8003aa2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fb26 	bl	8004100 <PCD_EP_ISR_Handler>

    return;
 8003ab4:	e110      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f008 fd14 	bl	800c506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8fc 	bl	8003cde <HAL_PCD_SetAddress>

    return;
 8003ae6:	e0f7      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b04:	b292      	uxth	r2, r2
 8003b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b0a:	e0e5      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b2e:	e0d3      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d034      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0204 	bic.w	r2, r2, #4
 8003b4c:	b292      	uxth	r2, r2
 8003b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0208 	bic.w	r2, r2, #8
 8003b64:	b292      	uxth	r2, r2
 8003b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f008 feb6 	bl	800c8f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f008 fcf7 	bl	800c578 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003ba2:	e099      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d027      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0204 	orr.w	r2, r2, #4
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f008 fca4 	bl	800c544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003bfc:	e06c      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d040      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d12b      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0204 	orr.w	r2, r2, #4
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0208 	orr.w	r2, r2, #8
 8003c54:	b292      	uxth	r2, r2
 8003c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c78:	2101      	movs	r1, #1
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f008 fe38 	bl	800c8f0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003c80:	e02a      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f008 fc5e 	bl	800c544 <HAL_PCD_SuspendCallback>
    return;
 8003c88:	e026      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00f      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f008 fc1c 	bl	800c4ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cb2:	e011      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003cd6:	bf00      	nop
  }
}
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_PCD_SetAddress+0x1a>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e013      	b.n	8003d20 <HAL_PCD_SetAddress+0x42>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f006 fc4f 	bl	800a5b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	70fb      	strb	r3, [r7, #3]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	803b      	strh	r3, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da0e      	bge.n	8003d6c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	705a      	strb	r2, [r3, #1]
 8003d6a:	e00e      	b.n	8003d8a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	f003 0207 	and.w	r2, r3, #7
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d96:	883a      	ldrh	r2, [r7, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	78ba      	ldrb	r2, [r7, #2]
 8003da0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003db4:	78bb      	ldrb	r3, [r7, #2]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d102      	bne.n	8003dc0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_PCD_EP_Open+0xa6>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e00e      	b.n	8003dec <HAL_PCD_EP_Open+0xc4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f004 fa33 	bl	8008248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003dea:	7afb      	ldrb	r3, [r7, #11]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da0e      	bge.n	8003e26 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	e00e      	b.n	8003e44 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 0207 	and.w	r2, r3, #7
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_PCD_EP_Close+0x6a>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e00e      	b.n	8003e7c <HAL_PCD_EP_Close+0x88>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 fd7f 	bl	8008970 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	460b      	mov	r3, r1
 8003e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	7afb      	ldrb	r3, [r7, #11]
 8003e96:	f003 0207 	and.w	r2, r3, #7
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 ff32 	bl	8008d4a <USB_EPStartXfer>
 8003ee6:	e005      	b.n	8003ef4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6979      	ldr	r1, [r7, #20]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 ff2b 	bl	8008d4a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f003 0207 	and.w	r2, r3, #7
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f20:	681b      	ldr	r3, [r3, #0]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2201      	movs	r2, #1
 8003f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f86:	7afb      	ldrb	r3, [r7, #11]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6979      	ldr	r1, [r7, #20]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 fed7 	bl	8008d4a <USB_EPStartXfer>
 8003f9c:	e005      	b.n	8003faa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6979      	ldr	r1, [r7, #20]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 fed0 	bl	8008d4a <USB_EPStartXfer>
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d901      	bls.n	8003fd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e03e      	b.n	8004050 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da0e      	bge.n	8003ff8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	705a      	strb	r2, [r3, #1]
 8003ff6:	e00c      	b.n	8004012 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_PCD_EP_SetStall+0x7e>
 800402e:	2302      	movs	r3, #2
 8004030:	e00e      	b.n	8004050 <HAL_PCD_EP_SetStall+0x9c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	4618      	mov	r0, r3
 8004042:	f006 f9b8 	bl	800a3b6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d901      	bls.n	8004076 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e040      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	da0e      	bge.n	800409c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	705a      	strb	r2, [r3, #1]
 800409a:	e00e      	b.n	80040ba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_PCD_EP_ClrStall+0x82>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e00e      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0xa0>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f006 f9b5 	bl	800a458 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b096      	sub	sp, #88	; 0x58
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004108:	e39c      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004112:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004116:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004124:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 815e 	bne.w	80043ea <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800412e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d150      	bne.n	80041dc <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	81fb      	strh	r3, [r7, #14]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3328      	adds	r3, #40	; 0x28
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	4413      	add	r3, r2
 800417e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	441a      	add	r2, r3
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f008 f98a 	bl	800c4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 834a 	beq.w	8004844 <PCD_EP_ISR_Handler+0x744>
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 8345 	bne.w	8004844 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b292      	uxth	r2, r2
 80041ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041da:	e333      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80041f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d032      	beq.n	8004260 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004202:	b29b      	uxth	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	4413      	add	r3, r2
 8004214:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800421e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004220:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800422c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004232:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004234:	b29b      	uxth	r3, r3
 8004236:	f006 fa3a 	bl	800a6ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29a      	uxth	r2, r3
 8004242:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004246:	4013      	ands	r3, r2
 8004248:	823b      	strh	r3, [r7, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	8a3a      	ldrh	r2, [r7, #16]
 8004250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004254:	b292      	uxth	r2, r2
 8004256:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f008 f8ff 	bl	800c45c <HAL_PCD_SetupStageCallback>
 800425e:	e2f1      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004260:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004264:	2b00      	cmp	r3, #0
 8004266:	f280 82ed 	bge.w	8004844 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29a      	uxth	r2, r3
 8004272:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004276:	4013      	ands	r3, r2
 8004278:	83fb      	strh	r3, [r7, #30]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	8bfa      	ldrh	r2, [r7, #30]
 8004280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004284:	b292      	uxth	r2, r2
 8004286:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004290:	b29b      	uxth	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	4413      	add	r3, r2
 80042a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d019      	beq.n	80042ec <PCD_EP_ISR_Handler+0x1ec>
 80042b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c6:	6959      	ldr	r1, [r3, #20]
 80042c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f006 f9ec 	bl	800a6ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	441a      	add	r2, r3
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042e4:	2100      	movs	r1, #0
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f008 f8ca 	bl	800c480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 82a3 	bne.w	8004844 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430c:	b29b      	uxth	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4413      	add	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b3e      	cmp	r3, #62	; 0x3e
 8004324:	d918      	bls.n	8004358 <PCD_EP_ISR_Handler+0x258>
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <PCD_EP_ISR_Handler+0x240>
 800433a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433c:	3b01      	subs	r3, #1
 800433e:	647b      	str	r3, [r7, #68]	; 0x44
 8004340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004342:	b29b      	uxth	r3, r3
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	b29b      	uxth	r3, r3
 8004348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004350:	b29a      	uxth	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	e029      	b.n	80043ac <PCD_EP_ISR_Handler+0x2ac>
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d112      	bne.n	8004386 <PCD_EP_ISR_Handler+0x286>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800436a:	b29a      	uxth	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437e:	b29a      	uxth	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	e012      	b.n	80043ac <PCD_EP_ISR_Handler+0x2ac>
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
 800438e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <PCD_EP_ISR_Handler+0x2a0>
 800439a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439c:	3301      	adds	r3, #1
 800439e:	647b      	str	r3, [r7, #68]	; 0x44
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	827b      	strh	r3, [r7, #18]
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043c4:	827b      	strh	r3, [r7, #18]
 80043c6:	8a7b      	ldrh	r3, [r7, #18]
 80043c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043cc:	827b      	strh	r3, [r7, #18]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	8a7b      	ldrh	r3, [r7, #18]
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
 80043e8:	e22c      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043fe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004402:	2b00      	cmp	r3, #0
 8004404:	f280 80f6 	bge.w	80045f4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29a      	uxth	r2, r3
 800441a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800441e:	4013      	ands	r3, r2
 8004420:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800443a:	b292      	uxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800443e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004456:	7b1b      	ldrb	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d123      	bne.n	80044a4 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004464:	b29b      	uxth	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4413      	add	r3, r2
 8004476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004480:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004484:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 808e 	beq.w	80045aa <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	6959      	ldr	r1, [r3, #20]
 8004496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004498:	88da      	ldrh	r2, [r3, #6]
 800449a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800449e:	f006 f906 	bl	800a6ae <USB_ReadPMA>
 80044a2:	e082      	b.n	80045aa <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	78db      	ldrb	r3, [r3, #3]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d10a      	bne.n	80044c2 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80044ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80044b0:	461a      	mov	r2, r3
 80044b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f9d3 	bl	8004860 <HAL_PCD_EP_DB_Receive>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044c0:	e073      	b.n	80045aa <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004502:	b29b      	uxth	r3, r3
 8004504:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d022      	beq.n	8004566 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004528:	b29b      	uxth	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	4413      	add	r3, r2
 800453a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004544:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004548:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02c      	beq.n	80045aa <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	6959      	ldr	r1, [r3, #20]
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	891a      	ldrh	r2, [r3, #8]
 800455c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004560:	f006 f8a5 	bl	800a6ae <USB_ReadPMA>
 8004564:	e021      	b.n	80045aa <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	4413      	add	r3, r2
 8004580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800458a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800458e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	6959      	ldr	r1, [r3, #20]
 800459e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a0:	895a      	ldrh	r2, [r3, #10]
 80045a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045a6:	f006 f882 	bl	800a6ae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045b2:	441a      	add	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045c0:	441a      	add	r2, r3
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80045c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <PCD_EP_ISR_Handler+0x4da>
 80045ce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d206      	bcs.n	80045e8 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80045da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f007 ff4d 	bl	800c480 <HAL_PCD_DataOutStageCallback>
 80045e6:	e005      	b.n	80045f4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 fbab 	bl	8008d4a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80045f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8121 	beq.w	8004844 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004602:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	78db      	ldrb	r3, [r3, #3]
 8004656:	2b02      	cmp	r3, #2
 8004658:	f000 80a2 	beq.w	80047a0 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800465c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	7b1b      	ldrb	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8093 	beq.w	8004792 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800466c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d046      	beq.n	8004706 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d126      	bne.n	80046ce <PCD_EP_ISR_Handler+0x5ce>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468e:	b29b      	uxth	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	4413      	add	r3, r2
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	00da      	lsls	r2, r3, #3
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	e061      	b.n	8004792 <PCD_EP_ISR_Handler+0x692>
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d15d      	bne.n	8004792 <PCD_EP_ISR_Handler+0x692>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	4413      	add	r3, r2
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	00da      	lsls	r2, r3, #3
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	4413      	add	r3, r2
 80046f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	2200      	movs	r2, #0
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e045      	b.n	8004792 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d126      	bne.n	8004762 <PCD_EP_ISR_Handler+0x662>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	4413      	add	r3, r2
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
 800472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	00da      	lsls	r2, r3, #3
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	4413      	add	r3, r2
 8004736:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800473a:	633b      	str	r3, [r7, #48]	; 0x30
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004746:	b29a      	uxth	r2, r3
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475a:	b29a      	uxth	r2, r3
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e017      	b.n	8004792 <PCD_EP_ISR_Handler+0x692>
 8004762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d113      	bne.n	8004792 <PCD_EP_ISR_Handler+0x692>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004778:	4413      	add	r3, r2
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	00da      	lsls	r2, r3, #3
 8004782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004784:	4413      	add	r3, r2
 8004786:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	2200      	movs	r2, #0
 8004790:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f007 fe8c 	bl	800c4b6 <HAL_PCD_DataInStageCallback>
 800479e:	e051      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80047a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d144      	bne.n	8004836 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	4413      	add	r3, r2
 80047c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80047d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047dc:	429a      	cmp	r2, r3
 80047de:	d907      	bls.n	80047f0 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80047e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e2:	699a      	ldr	r2, [r3, #24]
 80047e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	619a      	str	r2, [r3, #24]
 80047ee:	e002      	b.n	80047f6 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80047f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f2:	2200      	movs	r2, #0
 80047f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f007 fe56 	bl	800c4b6 <HAL_PCD_DataInStageCallback>
 800480a:	e01b      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004814:	441a      	add	r2, r3
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800481a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004822:	441a      	add	r2, r3
 8004824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004826:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800482e:	4618      	mov	r0, r3
 8004830:	f004 fa8b 	bl	8008d4a <USB_EPStartXfer>
 8004834:	e006      	b.n	8004844 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004836:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800483a:	461a      	mov	r2, r3
 800483c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f917 	bl	8004a72 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800484c:	b29b      	uxth	r3, r3
 800484e:	b21b      	sxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f6ff ac5a 	blt.w	800410a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3758      	adds	r7, #88	; 0x58
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d07c      	beq.n	8004972 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004880:	b29b      	uxth	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	4413      	add	r3, r2
 8004892:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	8b7b      	ldrh	r3, [r7, #26]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d306      	bcc.n	80048b6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	8b7b      	ldrh	r3, [r7, #26]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	619a      	str	r2, [r3, #24]
 80048b4:	e002      	b.n	80048bc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d123      	bne.n	800490c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	833b      	strh	r3, [r7, #24]
 80048e0:	8b3b      	ldrh	r3, [r7, #24]
 80048e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048e6:	833b      	strh	r3, [r7, #24]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	8b3b      	ldrh	r3, [r7, #24]
 80048f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	b29b      	uxth	r3, r3
 800490a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01f      	beq.n	8004956 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	82fb      	strh	r3, [r7, #22]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8afb      	ldrh	r3, [r7, #22]
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004956:	8b7b      	ldrh	r3, [r7, #26]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8085 	beq.w	8004a68 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6959      	ldr	r1, [r3, #20]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	891a      	ldrh	r2, [r3, #8]
 800496a:	8b7b      	ldrh	r3, [r7, #26]
 800496c:	f005 fe9f 	bl	800a6ae <USB_ReadPMA>
 8004970:	e07a      	b.n	8004a68 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	4413      	add	r3, r2
 800498c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004996:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	8b7b      	ldrh	r3, [r7, #26]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d306      	bcc.n	80049b0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	8b7b      	ldrh	r3, [r7, #26]
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	619a      	str	r2, [r3, #24]
 80049ae:	e002      	b.n	80049b6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d123      	bne.n	8004a06 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	83fb      	strh	r3, [r7, #30]
 80049da:	8bfb      	ldrh	r3, [r7, #30]
 80049dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049e0:	83fb      	strh	r3, [r7, #30]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	8bfb      	ldrh	r3, [r7, #30]
 80049f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11f      	bne.n	8004a50 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	83bb      	strh	r3, [r7, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	8bbb      	ldrh	r3, [r7, #28]
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a50:	8b7b      	ldrh	r3, [r7, #26]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6959      	ldr	r1, [r3, #20]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	895a      	ldrh	r2, [r3, #10]
 8004a62:	8b7b      	ldrh	r3, [r7, #26]
 8004a64:	f005 fe23 	bl	800a6ae <USB_ReadPMA>
    }
  }

  return count;
 8004a68:	8b7b      	ldrh	r3, [r7, #26]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b0a2      	sub	sp, #136	; 0x88
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 81c5 	beq.w	8004e16 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d907      	bls.n	8004ad0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ac8:	1ad2      	subs	r2, r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	619a      	str	r2, [r3, #24]
 8004ace:	e002      	b.n	8004ad6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 80b9 	bne.w	8004c52 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d126      	bne.n	8004b36 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	4413      	add	r3, r2
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	00da      	lsls	r2, r3, #3
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e01a      	b.n	8004b6c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d116      	bne.n	8004b6c <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	4413      	add	r3, r2
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	00da      	lsls	r2, r3, #3
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	4413      	add	r3, r2
 8004b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	2200      	movs	r2, #0
 8004b6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	623b      	str	r3, [r7, #32]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d126      	bne.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x156>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	4413      	add	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	00da      	lsls	r2, r3, #3
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	e017      	b.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x186>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d113      	bne.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x186>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	4413      	add	r3, r2
 8004be0:	623b      	str	r3, [r7, #32]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	00da      	lsls	r2, r3, #3
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	4413      	add	r3, r2
 8004bec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f007 fc59 	bl	800c4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 82d2 	beq.w	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	827b      	strh	r3, [r7, #18]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	8a7b      	ldrh	r3, [r7, #18]
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]
 8004c50:	e2b0      	b.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d021      	beq.n	8004ca0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	f040 8284 	bne.w	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cc2:	441a      	add	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d309      	bcc.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	621a      	str	r2, [r3, #32]
 8004ce6:	e015      	b.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004cf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cfe:	e009      	b.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2200      	movs	r2, #0
 8004d12:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d155      	bne.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x356>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	4413      	add	r3, r2
 8004d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	00da      	lsls	r2, r3, #3
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
 8004d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d46:	2b3e      	cmp	r3, #62	; 0x3e
 8004d48:	d916      	bls.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x306>
 8004d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e043      	b.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d112      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x332>
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e02d      	b.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_PCD_EP_DB_Transmit+0x348>
 8004db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db6:	3301      	adds	r3, #1
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	029b      	lsls	r3, r3, #10
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e01b      	b.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d117      	bne.n	8004e00 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	4413      	add	r3, r2
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	00da      	lsls	r2, r3, #3
 8004dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df0:	4413      	add	r3, r2
 8004df2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6959      	ldr	r1, [r3, #20]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	891a      	ldrh	r2, [r3, #8]
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f005 fc0b 	bl	800a62a <USB_WritePMA>
 8004e14:	e1ce      	b.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d307      	bcc.n	8004e5a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	619a      	str	r2, [r3, #24]
 8004e58:	e002      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 80c4 	bne.w	8004ff2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d126      	bne.n	8004ec0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e86:	4413      	add	r3, r2
 8004e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00da      	lsls	r2, r3, #3
 8004e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e92:	4413      	add	r3, r2
 8004e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e98:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e01a      	b.n	8004ef6 <HAL_PCD_EP_DB_Transmit+0x484>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d116      	bne.n	8004ef6 <HAL_PCD_EP_DB_Transmit+0x484>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	673b      	str	r3, [r7, #112]	; 0x70
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004edc:	4413      	add	r3, r2
 8004ede:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	00da      	lsls	r2, r3, #3
 8004ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee8:	4413      	add	r3, r2
 8004eea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d12f      	bne.n	8004f64 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e017      	b.n	8004f94 <HAL_PCD_EP_DB_Transmit+0x522>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d113      	bne.n	8004f94 <HAL_PCD_EP_DB_Transmit+0x522>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	00da      	lsls	r2, r3, #3
 8004f84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f86:	4413      	add	r3, r2
 8004f88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f90:	2200      	movs	r2, #0
 8004f92:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f007 fa8b 	bl	800c4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f040 8104 	bne.w	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]
 8004ff0:	e0e0      	b.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d121      	bne.n	8005040 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005046:	2b01      	cmp	r3, #1
 8005048:	f040 80b4 	bne.w	80051b4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005054:	441a      	add	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005062:	441a      	add	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d309      	bcc.n	8005088 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	621a      	str	r2, [r3, #32]
 8005086:	e015      	b.n	80050b4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d107      	bne.n	80050a0 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800509e:	e009      	b.n	80050b4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	663b      	str	r3, [r7, #96]	; 0x60
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d155      	bne.n	800516e <HAL_PCD_EP_DB_Transmit+0x6fc>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d6:	4413      	add	r3, r2
 80050d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	00da      	lsls	r2, r3, #3
 80050e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050e8:	657b      	str	r3, [r7, #84]	; 0x54
 80050ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ec:	2b3e      	cmp	r3, #62	; 0x3e
 80050ee:	d916      	bls.n	800511e <HAL_PCD_EP_DB_Transmit+0x6ac>
 80050f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	677b      	str	r3, [r7, #116]	; 0x74
 80050f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <HAL_PCD_EP_DB_Transmit+0x694>
 8005100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005102:	3b01      	subs	r3, #1
 8005104:	677b      	str	r3, [r7, #116]	; 0x74
 8005106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005108:	b29b      	uxth	r3, r3
 800510a:	029b      	lsls	r3, r3, #10
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005116:	b29a      	uxth	r2, r3
 8005118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e040      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800511e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005120:	2b00      	cmp	r3, #0
 8005122:	d112      	bne.n	800514a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800512e:	b29a      	uxth	r2, r3
 8005130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005142:	b29a      	uxth	r2, r3
 8005144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e02a      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800514a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	677b      	str	r3, [r7, #116]	; 0x74
 8005150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515c:	3301      	adds	r3, #1
 800515e:	677b      	str	r3, [r7, #116]	; 0x74
 8005160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005162:	b29b      	uxth	r3, r3
 8005164:	029b      	lsls	r3, r3, #10
 8005166:	b29a      	uxth	r2, r3
 8005168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	e018      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d114      	bne.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005184:	4413      	add	r3, r2
 8005186:	663b      	str	r3, [r7, #96]	; 0x60
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	00da      	lsls	r2, r3, #3
 800518e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005190:	4413      	add	r3, r2
 8005192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519a:	b29a      	uxth	r2, r3
 800519c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800519e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6959      	ldr	r1, [r3, #20]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	895a      	ldrh	r2, [r3, #10]
 80051ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f005 fa3b 	bl	800a62a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ce:	823b      	strh	r3, [r7, #16]
 80051d0:	8a3b      	ldrh	r3, [r7, #16]
 80051d2:	f083 0310 	eor.w	r3, r3, #16
 80051d6:	823b      	strh	r3, [r7, #16]
 80051d8:	8a3b      	ldrh	r3, [r7, #16]
 80051da:	f083 0320 	eor.w	r3, r3, #32
 80051de:	823b      	strh	r3, [r7, #16]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	8a3b      	ldrh	r3, [r7, #16]
 80051f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3788      	adds	r7, #136	; 0x88
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	817b      	strh	r3, [r7, #10]
 800521c:	4613      	mov	r3, r2
 800521e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005220:	897b      	ldrh	r3, [r7, #10]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e009      	b.n	8005258 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005244:	897a      	ldrh	r2, [r7, #10]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d107      	bne.n	800526e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	b29a      	uxth	r2, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	80da      	strh	r2, [r3, #6]
 800526c:	e00b      	b.n	8005286 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2201      	movs	r2, #1
 8005272:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	b29a      	uxth	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b29a      	uxth	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f043 0302 	orr.w	r3, r3, #2
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d141      	bne.n	800537a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052f6:	4b4b      	ldr	r3, [pc, #300]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005302:	d131      	bne.n	8005368 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005304:	4b47      	ldr	r3, [pc, #284]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800530a:	4a46      	ldr	r2, [pc, #280]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005314:	4b43      	ldr	r3, [pc, #268]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800531c:	4a41      	ldr	r2, [pc, #260]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005324:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2232      	movs	r2, #50	; 0x32
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	4a3f      	ldr	r2, [pc, #252]	; (800542c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	0c9b      	lsrs	r3, r3, #18
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800533a:	e002      	b.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b01      	subs	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005342:	4b38      	ldr	r3, [pc, #224]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534e:	d102      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f2      	bne.n	800533c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005356:	4b33      	ldr	r3, [pc, #204]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005362:	d158      	bne.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e057      	b.n	8005418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005368:	4b2e      	ldr	r3, [pc, #184]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536e:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005378:	e04d      	b.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005380:	d141      	bne.n	8005406 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005382:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538e:	d131      	bne.n	80053f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005390:	4b24      	ldr	r3, [pc, #144]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053a0:	4b20      	ldr	r3, [pc, #128]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053a8:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2232      	movs	r2, #50	; 0x32
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	4a1c      	ldr	r2, [pc, #112]	; (800542c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	0c9b      	lsrs	r3, r3, #18
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c6:	e002      	b.n	80053ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053da:	d102      	bne.n	80053e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f2      	bne.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ee:	d112      	bne.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e011      	b.n	8005418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	4a0a      	ldr	r2, [pc, #40]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005404:	e007      	b.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800540e:	4a05      	ldr	r2, [pc, #20]	; (8005424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005414:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40007000 	.word	0x40007000
 8005428:	20000044 	.word	0x20000044
 800542c:	431bde83 	.word	0x431bde83

08005430 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4a04      	ldr	r2, [pc, #16]	; (800544c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800543a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800543e:	6093      	str	r3, [r2, #8]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40007000 	.word	0x40007000

08005450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e306      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d075      	beq.n	800555a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546e:	4b97      	ldr	r3, [pc, #604]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005478:	4b94      	ldr	r3, [pc, #592]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d102      	bne.n	800548e <HAL_RCC_OscConfig+0x3e>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d002      	beq.n	8005494 <HAL_RCC_OscConfig+0x44>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d10b      	bne.n	80054ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	4b8d      	ldr	r3, [pc, #564]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d05b      	beq.n	8005558 <HAL_RCC_OscConfig+0x108>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d157      	bne.n	8005558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e2e1      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCC_OscConfig+0x74>
 80054b6:	4b85      	ldr	r3, [pc, #532]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a84      	ldr	r2, [pc, #528]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e01d      	b.n	8005500 <HAL_RCC_OscConfig+0xb0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x98>
 80054ce:	4b7f      	ldr	r3, [pc, #508]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a7e      	ldr	r2, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	4b7c      	ldr	r3, [pc, #496]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7b      	ldr	r2, [pc, #492]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e00b      	b.n	8005500 <HAL_RCC_OscConfig+0xb0>
 80054e8:	4b78      	ldr	r3, [pc, #480]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a77      	ldr	r2, [pc, #476]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	4b75      	ldr	r3, [pc, #468]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a74      	ldr	r2, [pc, #464]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80054fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d013      	beq.n	8005530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fc fade 	bl	8001ac8 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005510:	f7fc fada 	bl	8001ac8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	; 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e2a6      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005522:	4b6a      	ldr	r3, [pc, #424]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0xc0>
 800552e:	e014      	b.n	800555a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc faca 	bl	8001ac8 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005538:	f7fc fac6 	bl	8001ac8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e292      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800554a:	4b60      	ldr	r3, [pc, #384]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0xe8>
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d075      	beq.n	8005652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005566:	4b59      	ldr	r3, [pc, #356]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005570:	4b56      	ldr	r3, [pc, #344]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d102      	bne.n	8005586 <HAL_RCC_OscConfig+0x136>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d002      	beq.n	800558c <HAL_RCC_OscConfig+0x13c>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d11f      	bne.n	80055cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800558c:	4b4f      	ldr	r3, [pc, #316]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_OscConfig+0x154>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e265      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a4:	4b49      	ldr	r3, [pc, #292]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	061b      	lsls	r3, r3, #24
 80055b2:	4946      	ldr	r1, [pc, #280]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055b8:	4b45      	ldr	r3, [pc, #276]	; (80056d0 <HAL_RCC_OscConfig+0x280>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fc fa37 	bl	8001a30 <HAL_InitTick>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d043      	beq.n	8005650 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e251      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d023      	beq.n	800561c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d4:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3c      	ldr	r2, [pc, #240]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80055da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fc fa72 	bl	8001ac8 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e8:	f7fc fa6e 	bl	8001ac8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e23a      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005606:	4b31      	ldr	r3, [pc, #196]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	061b      	lsls	r3, r3, #24
 8005614:	492d      	ldr	r1, [pc, #180]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
 800561a:	e01a      	b.n	8005652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc fa4e 	bl	8001ac8 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005630:	f7fc fa4a 	bl	8001ac8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e216      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005642:	4b22      	ldr	r3, [pc, #136]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x1e0>
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d041      	beq.n	80056e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01c      	beq.n	80056a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005676:	f7fc fa27 	bl	8001ac8 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800567e:	f7fc fa23 	bl	8001ac8 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e1ef      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005690:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 8005692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0ef      	beq.n	800567e <HAL_RCC_OscConfig+0x22e>
 800569e:	e020      	b.n	80056e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80056a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <HAL_RCC_OscConfig+0x27c>)
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b0:	f7fc fa0a 	bl	8001ac8 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056b6:	e00d      	b.n	80056d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fc fa06 	bl	8001ac8 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d906      	bls.n	80056d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1d2      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056d4:	4b8c      	ldr	r3, [pc, #560]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80056d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1ea      	bne.n	80056b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80a6 	beq.w	800583c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f0:	2300      	movs	r3, #0
 80056f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056f4:	4b84      	ldr	r3, [pc, #528]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_OscConfig+0x2b4>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <HAL_RCC_OscConfig+0x2b6>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00d      	beq.n	8005726 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	4b7f      	ldr	r3, [pc, #508]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570e:	4a7e      	ldr	r2, [pc, #504]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6593      	str	r3, [r2, #88]	; 0x58
 8005716:	4b7c      	ldr	r3, [pc, #496]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005722:	2301      	movs	r3, #1
 8005724:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005726:	4b79      	ldr	r3, [pc, #484]	; (800590c <HAL_RCC_OscConfig+0x4bc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d118      	bne.n	8005764 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005732:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCC_OscConfig+0x4bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a75      	ldr	r2, [pc, #468]	; (800590c <HAL_RCC_OscConfig+0x4bc>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573e:	f7fc f9c3 	bl	8001ac8 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fc f9bf 	bl	8001ac8 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e18b      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005758:	4b6c      	ldr	r3, [pc, #432]	; (800590c <HAL_RCC_OscConfig+0x4bc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d108      	bne.n	800577e <HAL_RCC_OscConfig+0x32e>
 800576c:	4b66      	ldr	r3, [pc, #408]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	4a65      	ldr	r2, [pc, #404]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800577c:	e024      	b.n	80057c8 <HAL_RCC_OscConfig+0x378>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b05      	cmp	r3, #5
 8005784:	d110      	bne.n	80057a8 <HAL_RCC_OscConfig+0x358>
 8005786:	4b60      	ldr	r3, [pc, #384]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	4a5e      	ldr	r2, [pc, #376]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800578e:	f043 0304 	orr.w	r3, r3, #4
 8005792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005796:	4b5c      	ldr	r3, [pc, #368]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	4a5a      	ldr	r2, [pc, #360]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057a6:	e00f      	b.n	80057c8 <HAL_RCC_OscConfig+0x378>
 80057a8:	4b57      	ldr	r3, [pc, #348]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	4a56      	ldr	r2, [pc, #344]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057b8:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	4a52      	ldr	r2, [pc, #328]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d016      	beq.n	80057fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d0:	f7fc f97a 	bl	8001ac8 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d6:	e00a      	b.n	80057ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d8:	f7fc f976 	bl	8001ac8 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e140      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ee:	4b46      	ldr	r3, [pc, #280]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ed      	beq.n	80057d8 <HAL_RCC_OscConfig+0x388>
 80057fc:	e015      	b.n	800582a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fc f963 	bl	8001ac8 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005804:	e00a      	b.n	800581c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fc f95f 	bl	8001ac8 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	; 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e129      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800581c:	4b3a      	ldr	r3, [pc, #232]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ed      	bne.n	8005806 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800582a:	7ffb      	ldrb	r3, [r7, #31]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d105      	bne.n	800583c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d03c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01c      	beq.n	800588a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005850:	4b2d      	ldr	r3, [pc, #180]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fc f932 	bl	8001ac8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005868:	f7fc f92e 	bl	8001ac8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e0fa      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800587c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <HAL_RCC_OscConfig+0x418>
 8005888:	e01b      	b.n	80058c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800588a:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 800588c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005890:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fc f915 	bl	8001ac8 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058a2:	f7fc f911 	bl	8001ac8 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0dd      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80058b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ef      	bne.n	80058a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80d1 	beq.w	8005a6e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	f000 808b 	beq.w	80059f0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d15e      	bne.n	80059a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a08      	ldr	r2, [pc, #32]	; (8005908 <HAL_RCC_OscConfig+0x4b8>)
 80058e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fc f8eb 	bl	8001ac8 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f4:	e00c      	b.n	8005910 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f6:	f7fc f8e7 	bl	8001ac8 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d905      	bls.n	8005910 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0b3      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
 8005908:	40021000 	.word	0x40021000
 800590c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005910:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ec      	bne.n	80058f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800591c:	4b56      	ldr	r3, [pc, #344]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	4b56      	ldr	r3, [pc, #344]	; (8005a7c <HAL_RCC_OscConfig+0x62c>)
 8005922:	4013      	ands	r3, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6a11      	ldr	r1, [r2, #32]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800592c:	3a01      	subs	r2, #1
 800592e:	0112      	lsls	r2, r2, #4
 8005930:	4311      	orrs	r1, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005936:	0212      	lsls	r2, r2, #8
 8005938:	4311      	orrs	r1, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800593e:	0852      	lsrs	r2, r2, #1
 8005940:	3a01      	subs	r2, #1
 8005942:	0552      	lsls	r2, r2, #21
 8005944:	4311      	orrs	r1, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800594a:	0852      	lsrs	r2, r2, #1
 800594c:	3a01      	subs	r2, #1
 800594e:	0652      	lsls	r2, r2, #25
 8005950:	4311      	orrs	r1, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005956:	06d2      	lsls	r2, r2, #27
 8005958:	430a      	orrs	r2, r1
 800595a:	4947      	ldr	r1, [pc, #284]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 800595c:	4313      	orrs	r3, r2
 800595e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005960:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a44      	ldr	r2, [pc, #272]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 8005966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800596c:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a41      	ldr	r2, [pc, #260]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005976:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fc f8a6 	bl	8001ac8 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005980:	f7fc f8a2 	bl	8001ac8 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e06e      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005992:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x530>
 800599e:	e066      	b.n	8005a6e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a34      	ldr	r2, [pc, #208]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a31      	ldr	r2, [pc, #196]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80059b8:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fc f87e 	bl	8001ac8 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fc f87a 	bl	8001ac8 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e046      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e2:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x580>
 80059ee:	e03e      	b.n	8005a6e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e039      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80059fc:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <HAL_RCC_OscConfig+0x628>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d12c      	bne.n	8005a6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d123      	bne.n	8005a6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d11b      	bne.n	8005a6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d113      	bne.n	8005a6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d109      	bne.n	8005a6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	3b01      	subs	r3, #1
 8005a64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	019f800c 	.word	0x019f800c

08005a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e11e      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a98:	4b91      	ldr	r3, [pc, #580]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d910      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	4b8e      	ldr	r3, [pc, #568]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f023 020f 	bic.w	r2, r3, #15
 8005aae:	498c      	ldr	r1, [pc, #560]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b8a      	ldr	r3, [pc, #552]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e106      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d073      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d129      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005adc:	4b81      	ldr	r3, [pc, #516]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0f4      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005aec:	f000 f966 	bl	8005dbc <RCC_GetSysClockFreqFromPLLSource>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4a7c      	ldr	r2, [pc, #496]	; (8005ce8 <HAL_RCC_ClockConfig+0x268>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d93f      	bls.n	8005b7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005afa:	4b7a      	ldr	r3, [pc, #488]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d033      	beq.n	8005b7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12f      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b1a:	4b72      	ldr	r3, [pc, #456]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b22:	4a70      	ldr	r2, [pc, #448]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e024      	b.n	8005b7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d107      	bne.n	8005b48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b38:	4b6a      	ldr	r3, [pc, #424]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0c6      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b48:	4b66      	ldr	r3, [pc, #408]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0be      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b58:	f000 f8ce 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4a61      	ldr	r2, [pc, #388]	; (8005ce8 <HAL_RCC_ClockConfig+0x268>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d909      	bls.n	8005b7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b66:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6e:	4a5d      	ldr	r2, [pc, #372]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b7a:	4b5a      	ldr	r3, [pc, #360]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f023 0203 	bic.w	r2, r3, #3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4957      	ldr	r1, [pc, #348]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8c:	f7fb ff9c 	bl	8001ac8 <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b94:	f7fb ff98 	bl	8001ac8 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e095      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	4b4e      	ldr	r3, [pc, #312]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 020c 	and.w	r2, r3, #12
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d1eb      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bd4:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4a42      	ldr	r2, [pc, #264]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005bda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005bec:	4b3d      	ldr	r3, [pc, #244]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bf4:	4a3b      	ldr	r2, [pc, #236]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4936      	ldr	r1, [pc, #216]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d105      	bne.n	8005c22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c16:	4b33      	ldr	r3, [pc, #204]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4a32      	ldr	r2, [pc, #200]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c22:	4b2f      	ldr	r3, [pc, #188]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d21d      	bcs.n	8005c6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c30:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f023 020f 	bic.w	r2, r3, #15
 8005c38:	4929      	ldr	r1, [pc, #164]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c40:	f7fb ff42 	bl	8001ac8 <HAL_GetTick>
 8005c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c48:	f7fb ff3e 	bl	8001ac8 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e03b      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d1ed      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4917      	ldr	r1, [pc, #92]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	490f      	ldr	r1, [pc, #60]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005caa:	f000 f825 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCC_ClockConfig+0x264>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	490c      	ldr	r1, [pc, #48]	; (8005cec <HAL_RCC_ClockConfig+0x26c>)
 8005cbc:	5ccb      	ldrb	r3, [r1, r3]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x270>)
 8005cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_ClockConfig+0x274>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fb feae 	bl	8001a30 <HAL_InitTick>
 8005cd4:	4603      	mov	r3, r0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40022000 	.word	0x40022000
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	04c4b400 	.word	0x04c4b400
 8005cec:	0800cac4 	.word	0x0800cac4
 8005cf0:	20000044 	.word	0x20000044
 8005cf4:	20000048 	.word	0x20000048

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d102      	bne.n	8005d10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	e047      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d10:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d1e:	613b      	str	r3, [r7, #16]
 8005d20:	e03e      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d22:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d136      	bne.n	8005d9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	3301      	adds	r3, #1
 8005d44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d10c      	bne.n	8005d66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d56:	68d2      	ldr	r2, [r2, #12]
 8005d58:	0a12      	lsrs	r2, r2, #8
 8005d5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	617b      	str	r3, [r7, #20]
      break;
 8005d64:	e00c      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d66:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d70:	68d2      	ldr	r2, [r2, #12]
 8005d72:	0a12      	lsrs	r2, r2, #8
 8005d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d78:	fb02 f303 	mul.w	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]
      break;
 8005d7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	0e5b      	lsrs	r3, r3, #25
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e001      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005da0:	693b      	ldr	r3, [r7, #16]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40021000 	.word	0x40021000
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	007a1200 	.word	0x007a1200

08005dbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dc2:	4b1e      	ldr	r3, [pc, #120]	; (8005e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d10c      	bne.n	8005dfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de0:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dea:	68d2      	ldr	r2, [r2, #12]
 8005dec:	0a12      	lsrs	r2, r2, #8
 8005dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	617b      	str	r3, [r7, #20]
    break;
 8005df8:	e00c      	b.n	8005e14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dfa:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e04:	68d2      	ldr	r2, [r2, #12]
 8005e06:	0a12      	lsrs	r2, r2, #8
 8005e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
    break;
 8005e12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	0e5b      	lsrs	r3, r3, #25
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e2e:	687b      	ldr	r3, [r7, #4]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	007a1200 	.word	0x007a1200
 8005e44:	00f42400 	.word	0x00f42400

08005e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e50:	2300      	movs	r3, #0
 8005e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e54:	2300      	movs	r3, #0
 8005e56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8098 	beq.w	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e66:	2300      	movs	r3, #0
 8005e68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6a:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e80:	6593      	str	r3, [r2, #88]	; 0x58
 8005e82:	4b3d      	ldr	r3, [pc, #244]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e92:	4b3a      	ldr	r3, [pc, #232]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a39      	ldr	r2, [pc, #228]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e9e:	f7fb fe13 	bl	8001ac8 <HAL_GetTick>
 8005ea2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea4:	e009      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea6:	f7fb fe0f 	bl	8001ac8 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d902      	bls.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	74fb      	strb	r3, [r7, #19]
        break;
 8005eb8:	e005      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0ef      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ec6:	7cfb      	ldrb	r3, [r7, #19]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d159      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ecc:	4b2a      	ldr	r3, [pc, #168]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01e      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d019      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ee8:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f14:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fb fdcf 	bl	8001ac8 <HAL_GetTick>
 8005f2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f2c:	e00b      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fb fdcb 	bl	8001ac8 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d902      	bls.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	74fb      	strb	r3, [r7, #19]
            break;
 8005f44:	e006      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0ec      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	4903      	ldr	r1, [pc, #12]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f70:	e008      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	74bb      	strb	r3, [r7, #18]
 8005f76:	e005      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f80:	7cfb      	ldrb	r3, [r7, #19]
 8005f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f84:	7c7b      	ldrb	r3, [r7, #17]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d105      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f8a:	4ba6      	ldr	r3, [pc, #664]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	4aa5      	ldr	r2, [pc, #660]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fa2:	4ba0      	ldr	r3, [pc, #640]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f023 0203 	bic.w	r2, r3, #3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	499c      	ldr	r1, [pc, #624]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fc4:	4b97      	ldr	r3, [pc, #604]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f023 020c 	bic.w	r2, r3, #12
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4994      	ldr	r1, [pc, #592]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fe6:	4b8f      	ldr	r3, [pc, #572]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	498b      	ldr	r1, [pc, #556]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006008:	4b86      	ldr	r3, [pc, #536]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	4983      	ldr	r1, [pc, #524]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800602a:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	497a      	ldr	r1, [pc, #488]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800604c:	4b75      	ldr	r3, [pc, #468]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	4972      	ldr	r1, [pc, #456]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800606e:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	4969      	ldr	r1, [pc, #420]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	4961      	ldr	r1, [pc, #388]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060b2:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	4958      	ldr	r1, [pc, #352]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d015      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060d4:	4b53      	ldr	r3, [pc, #332]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	4950      	ldr	r1, [pc, #320]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f2:	d105      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f4:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4a4a      	ldr	r2, [pc, #296]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800610c:	4b45      	ldr	r3, [pc, #276]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	4942      	ldr	r1, [pc, #264]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800612a:	d105      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800612c:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	4a3c      	ldr	r2, [pc, #240]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006136:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d015      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006144:	4b37      	ldr	r3, [pc, #220]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	4934      	ldr	r1, [pc, #208]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006162:	d105      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	4a2e      	ldr	r2, [pc, #184]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800616e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d015      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800617c:	4b29      	ldr	r3, [pc, #164]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618a:	4926      	ldr	r1, [pc, #152]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800619a:	d105      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619c:	4b21      	ldr	r3, [pc, #132]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a20      	ldr	r2, [pc, #128]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061b4:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	4918      	ldr	r1, [pc, #96]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d2:	d105      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d4:	4b13      	ldr	r3, [pc, #76]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d015      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061ec:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	490a      	ldr	r1, [pc, #40]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620a:	d105      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a04      	ldr	r2, [pc, #16]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006216:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006218:	7cbb      	ldrb	r3, [r7, #18]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	40021000 	.word	0x40021000

08006228 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d066      	beq.n	8006308 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb f8dc 	bl	800140c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	22ca      	movs	r2, #202	; 0xca
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2253      	movs	r2, #83	; 0x53
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f876 	bl	800635e <RTC_EnterInitMode>
 8006272:	4603      	mov	r3, r0
 8006274:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d13a      	bne.n	80062f2 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6999      	ldr	r1, [r3, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68d9      	ldr	r1, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	041a      	lsls	r2, r3, #16
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f882 	bl	80063ca <RTC_ExitInitMode>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d110      	bne.n	80062f2 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1a      	ldr	r2, [r3, #32]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	22ff      	movs	r2, #255	; 0xff
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0220 	bic.w	r2, r2, #32
 8006328:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800632a:	f7fb fbcd 	bl	8001ac8 <HAL_GetTick>
 800632e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006330:	e009      	b.n	8006346 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006332:	f7fb fbc9 	bl	8001ac8 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006340:	d901      	bls.n	8006346 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e007      	b.n	8006356 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ee      	beq.n	8006332 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d123      	bne.n	80063c0 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006386:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006388:	f7fb fb9e 	bl	8001ac8 <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800638e:	e00d      	b.n	80063ac <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006390:	f7fb fb9a 	bl	8001ac8 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800639e:	d905      	bls.n	80063ac <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2203      	movs	r2, #3
 80063a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <RTC_EnterInitMode+0x62>
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d1e7      	bne.n	8006390 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ff8c 	bl	8006312 <HAL_RTC_WaitForSynchro>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2203      	movs	r2, #3
 8006404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e01b      	b.n	8006446 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0220 	bic.w	r2, r2, #32
 800641c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ff77 	bl	8006312 <HAL_RTC_WaitForSynchro>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2203      	movs	r2, #3
 800642e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0220 	orr.w	r2, r2, #32
 8006444:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e049      	b.n	80064f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fb f90c 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f001 f972 	bl	8007778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e049      	b.n	80065a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fa ffad 	bl	8001484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f001 f91b 	bl	8007778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_TIM_PWM_Start+0x24>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e03c      	b.n	800664a <HAL_TIM_PWM_Start+0x9e>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d109      	bne.n	80065ea <HAL_TIM_PWM_Start+0x3e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	bf14      	ite	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	2300      	moveq	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	e02f      	b.n	800664a <HAL_TIM_PWM_Start+0x9e>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d109      	bne.n	8006604 <HAL_TIM_PWM_Start+0x58>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e022      	b.n	800664a <HAL_TIM_PWM_Start+0x9e>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b0c      	cmp	r3, #12
 8006608:	d109      	bne.n	800661e <HAL_TIM_PWM_Start+0x72>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b01      	cmp	r3, #1
 8006614:	bf14      	ite	ne
 8006616:	2301      	movne	r3, #1
 8006618:	2300      	moveq	r3, #0
 800661a:	b2db      	uxtb	r3, r3
 800661c:	e015      	b.n	800664a <HAL_TIM_PWM_Start+0x9e>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b10      	cmp	r3, #16
 8006622:	d109      	bne.n	8006638 <HAL_TIM_PWM_Start+0x8c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	e008      	b.n	800664a <HAL_TIM_PWM_Start+0x9e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e097      	b.n	8006782 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <HAL_TIM_PWM_Start+0xb6>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006660:	e023      	b.n	80066aa <HAL_TIM_PWM_Start+0xfe>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b04      	cmp	r3, #4
 8006666:	d104      	bne.n	8006672 <HAL_TIM_PWM_Start+0xc6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006670:	e01b      	b.n	80066aa <HAL_TIM_PWM_Start+0xfe>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d104      	bne.n	8006682 <HAL_TIM_PWM_Start+0xd6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006680:	e013      	b.n	80066aa <HAL_TIM_PWM_Start+0xfe>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b0c      	cmp	r3, #12
 8006686:	d104      	bne.n	8006692 <HAL_TIM_PWM_Start+0xe6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006690:	e00b      	b.n	80066aa <HAL_TIM_PWM_Start+0xfe>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b10      	cmp	r3, #16
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_PWM_Start+0xf6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a0:	e003      	b.n	80066aa <HAL_TIM_PWM_Start+0xfe>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2201      	movs	r2, #1
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fbe6 	bl	8007e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a33      	ldr	r2, [pc, #204]	; (800678c <HAL_TIM_PWM_Start+0x1e0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <HAL_TIM_PWM_Start+0x13e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a32      	ldr	r2, [pc, #200]	; (8006790 <HAL_TIM_PWM_Start+0x1e4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00e      	beq.n	80066ea <HAL_TIM_PWM_Start+0x13e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a30      	ldr	r2, [pc, #192]	; (8006794 <HAL_TIM_PWM_Start+0x1e8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d009      	beq.n	80066ea <HAL_TIM_PWM_Start+0x13e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2f      	ldr	r2, [pc, #188]	; (8006798 <HAL_TIM_PWM_Start+0x1ec>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d004      	beq.n	80066ea <HAL_TIM_PWM_Start+0x13e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a2d      	ldr	r2, [pc, #180]	; (800679c <HAL_TIM_PWM_Start+0x1f0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <HAL_TIM_PWM_Start+0x142>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <HAL_TIM_PWM_Start+0x144>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006702:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a20      	ldr	r2, [pc, #128]	; (800678c <HAL_TIM_PWM_Start+0x1e0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d018      	beq.n	8006740 <HAL_TIM_PWM_Start+0x194>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006716:	d013      	beq.n	8006740 <HAL_TIM_PWM_Start+0x194>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <HAL_TIM_PWM_Start+0x1f4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00e      	beq.n	8006740 <HAL_TIM_PWM_Start+0x194>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_TIM_PWM_Start+0x1f8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d009      	beq.n	8006740 <HAL_TIM_PWM_Start+0x194>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a17      	ldr	r2, [pc, #92]	; (8006790 <HAL_TIM_PWM_Start+0x1e4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_TIM_PWM_Start+0x194>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a16      	ldr	r2, [pc, #88]	; (8006794 <HAL_TIM_PWM_Start+0x1e8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d115      	bne.n	800676c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <HAL_TIM_PWM_Start+0x1fc>)
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b06      	cmp	r3, #6
 8006750:	d015      	beq.n	800677e <HAL_TIM_PWM_Start+0x1d2>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d011      	beq.n	800677e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676a:	e008      	b.n	800677e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e000      	b.n	8006780 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40013400 	.word	0x40013400
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	00010007 	.word	0x00010007

080067ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e03c      	b.n	8006852 <HAL_TIM_PWM_Start_DMA+0xa6>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d109      	bne.n	80067f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	bf0c      	ite	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	2300      	movne	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e02f      	b.n	8006852 <HAL_TIM_PWM_Start_DMA+0xa6>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d109      	bne.n	800680c <HAL_TIM_PWM_Start_DMA+0x60>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e022      	b.n	8006852 <HAL_TIM_PWM_Start_DMA+0xa6>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d109      	bne.n	8006826 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	e015      	b.n	8006852 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b10      	cmp	r3, #16
 800682a:	d109      	bne.n	8006840 <HAL_TIM_PWM_Start_DMA+0x94>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e008      	b.n	8006852 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006856:	2302      	movs	r3, #2
 8006858:	e1a6      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e03c      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x142>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d109      	bne.n	800688e <HAL_TIM_PWM_Start_DMA+0xe2>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	e02f      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x142>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e022      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x142>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b0c      	cmp	r3, #12
 80068ac:	d109      	bne.n	80068c2 <HAL_TIM_PWM_Start_DMA+0x116>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e015      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x142>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d109      	bne.n	80068dc <HAL_TIM_PWM_Start_DMA+0x130>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e008      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x142>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d034      	beq.n	800695c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_PWM_Start_DMA+0x156>
 80068f8:	887b      	ldrh	r3, [r7, #2]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e152      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_TIM_PWM_Start_DMA+0x166>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006910:	e026      	b.n	8006960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b04      	cmp	r3, #4
 8006916:	d104      	bne.n	8006922 <HAL_TIM_PWM_Start_DMA+0x176>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006920:	e01e      	b.n	8006960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d104      	bne.n	8006932 <HAL_TIM_PWM_Start_DMA+0x186>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006930:	e016      	b.n	8006960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d104      	bne.n	8006942 <HAL_TIM_PWM_Start_DMA+0x196>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006940:	e00e      	b.n	8006960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b10      	cmp	r3, #16
 8006946:	d104      	bne.n	8006952 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006950:	e006      	b.n	8006960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2202      	movs	r2, #2
 8006956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800695a:	e001      	b.n	8006960 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e123      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b0c      	cmp	r3, #12
 8006964:	f200 80ae 	bhi.w	8006ac4 <HAL_TIM_PWM_Start_DMA+0x318>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	080069a5 	.word	0x080069a5
 8006974:	08006ac5 	.word	0x08006ac5
 8006978:	08006ac5 	.word	0x08006ac5
 800697c:	08006ac5 	.word	0x08006ac5
 8006980:	080069ed 	.word	0x080069ed
 8006984:	08006ac5 	.word	0x08006ac5
 8006988:	08006ac5 	.word	0x08006ac5
 800698c:	08006ac5 	.word	0x08006ac5
 8006990:	08006a35 	.word	0x08006a35
 8006994:	08006ac5 	.word	0x08006ac5
 8006998:	08006ac5 	.word	0x08006ac5
 800699c:	08006ac5 	.word	0x08006ac5
 80069a0:	08006a7d 	.word	0x08006a7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	4a81      	ldr	r2, [pc, #516]	; (8006bb0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	4a80      	ldr	r2, [pc, #512]	; (8006bb4 <HAL_TIM_PWM_Start_DMA+0x408>)
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	4a7f      	ldr	r2, [pc, #508]	; (8006bb8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80069ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3334      	adds	r3, #52	; 0x34
 80069c8:	461a      	mov	r2, r3
 80069ca:	887b      	ldrh	r3, [r7, #2]
 80069cc:	f7fc fb6a 	bl	80030a4 <HAL_DMA_Start_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e0e6      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e8:	60da      	str	r2, [r3, #12]
      break;
 80069ea:	e06e      	b.n	8006aca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	4a6f      	ldr	r2, [pc, #444]	; (8006bb0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80069f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	4a6e      	ldr	r2, [pc, #440]	; (8006bb4 <HAL_TIM_PWM_Start_DMA+0x408>)
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	4a6d      	ldr	r2, [pc, #436]	; (8006bb8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3338      	adds	r3, #56	; 0x38
 8006a10:	461a      	mov	r2, r3
 8006a12:	887b      	ldrh	r3, [r7, #2]
 8006a14:	f7fc fb46 	bl	80030a4 <HAL_DMA_Start_IT>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e0c2      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a30:	60da      	str	r2, [r3, #12]
      break;
 8006a32:	e04a      	b.n	8006aca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	4a5d      	ldr	r2, [pc, #372]	; (8006bb0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4a5c      	ldr	r2, [pc, #368]	; (8006bb4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4a5b      	ldr	r2, [pc, #364]	; (8006bb8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	333c      	adds	r3, #60	; 0x3c
 8006a58:	461a      	mov	r2, r3
 8006a5a:	887b      	ldrh	r3, [r7, #2]
 8006a5c:	f7fc fb22 	bl	80030a4 <HAL_DMA_Start_IT>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e09e      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a78:	60da      	str	r2, [r3, #12]
      break;
 8006a7a:	e026      	b.n	8006aca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	4a4b      	ldr	r2, [pc, #300]	; (8006bb0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006a82:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	4a4a      	ldr	r2, [pc, #296]	; (8006bb4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	4a49      	ldr	r2, [pc, #292]	; (8006bb8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006a92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3340      	adds	r3, #64	; 0x40
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	f7fc fafe 	bl	80030a4 <HAL_DMA_Start_IT>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e07a      	b.n	8006ba8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ac0:	60da      	str	r2, [r3, #12]
      break;
 8006ac2:	e002      	b.n	8006aca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d16a      	bne.n	8006ba6 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f9d3 	bl	8007e84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a36      	ldr	r2, [pc, #216]	; (8006bbc <HAL_TIM_PWM_Start_DMA+0x410>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <HAL_TIM_PWM_Start_DMA+0x364>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a34      	ldr	r2, [pc, #208]	; (8006bc0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00e      	beq.n	8006b10 <HAL_TIM_PWM_Start_DMA+0x364>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_TIM_PWM_Start_DMA+0x364>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a31      	ldr	r2, [pc, #196]	; (8006bc8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIM_PWM_Start_DMA+0x364>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a30      	ldr	r2, [pc, #192]	; (8006bcc <HAL_TIM_PWM_Start_DMA+0x420>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_PWM_Start_DMA+0x368>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <HAL_TIM_PWM_Start_DMA+0x36a>
 8006b14:	2300      	movs	r3, #0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a23      	ldr	r2, [pc, #140]	; (8006bbc <HAL_TIM_PWM_Start_DMA+0x410>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d018      	beq.n	8006b66 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3c:	d013      	beq.n	8006b66 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a23      	ldr	r2, [pc, #140]	; (8006bd0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00e      	beq.n	8006b66 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a21      	ldr	r2, [pc, #132]	; (8006bd4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d009      	beq.n	8006b66 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d004      	beq.n	8006b66 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a18      	ldr	r2, [pc, #96]	; (8006bc4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d115      	bne.n	8006b92 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d015      	beq.n	8006ba4 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7e:	d011      	beq.n	8006ba4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b90:	e008      	b.n	8006ba4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e000      	b.n	8006ba6 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	08007667 	.word	0x08007667
 8006bb4:	0800770f 	.word	0x0800770f
 8006bb8:	080075d5 	.word	0x080075d5
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40013400 	.word	0x40013400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	00010007 	.word	0x00010007

08006bdc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b0c      	cmp	r3, #12
 8006bee:	d855      	bhi.n	8006c9c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c2d 	.word	0x08006c2d
 8006bfc:	08006c9d 	.word	0x08006c9d
 8006c00:	08006c9d 	.word	0x08006c9d
 8006c04:	08006c9d 	.word	0x08006c9d
 8006c08:	08006c49 	.word	0x08006c49
 8006c0c:	08006c9d 	.word	0x08006c9d
 8006c10:	08006c9d 	.word	0x08006c9d
 8006c14:	08006c9d 	.word	0x08006c9d
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c9d 	.word	0x08006c9d
 8006c20:	08006c9d 	.word	0x08006c9d
 8006c24:	08006c9d 	.word	0x08006c9d
 8006c28:	08006c81 	.word	0x08006c81
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fc faaa 	bl	800319a <HAL_DMA_Abort_IT>
      break;
 8006c46:	e02c      	b.n	8006ca2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fc fa9c 	bl	800319a <HAL_DMA_Abort_IT>
      break;
 8006c62:	e01e      	b.n	8006ca2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fc fa8e 	bl	800319a <HAL_DMA_Abort_IT>
      break;
 8006c7e:	e010      	b.n	8006ca2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fc fa80 	bl	800319a <HAL_DMA_Abort_IT>
      break;
 8006c9a:	e002      	b.n	8006ca2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f040 8081 	bne.w	8006dac <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 f8e6 	bl	8007e84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3e      	ldr	r2, [pc, #248]	; (8006db8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3b      	ldr	r2, [pc, #236]	; (8006dc0 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a3a      	ldr	r2, [pc, #232]	; (8006dc4 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a38      	ldr	r2, [pc, #224]	; (8006dc8 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_PWM_Stop_DMA+0x112>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d017      	beq.n	8006d24 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10f      	bne.n	8006d24 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a1a      	ldr	r2, [r3, #32]
 8006d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10f      	bne.n	8006d54 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	f244 4344 	movw	r3, #17476	; 0x4444
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_TIM_PWM_Stop_DMA+0x188>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d62:	e023      	b.n	8006dac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d104      	bne.n	8006d74 <HAL_TIM_PWM_Stop_DMA+0x198>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d72:	e01b      	b.n	8006dac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d104      	bne.n	8006d84 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d82:	e013      	b.n	8006dac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b0c      	cmp	r3, #12
 8006d88:	d104      	bne.n	8006d94 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d92:	e00b      	b.n	8006dac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d104      	bne.n	8006da4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da2:	e003      	b.n	8006dac <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40013400 	.word	0x40013400
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e097      	b.n	8006f10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fa fb8b 	bl	8001510 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f000 fca9 	bl	8007778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e6c:	f023 030c 	bic.w	r3, r3, #12
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	031b      	lsls	r3, r3, #12
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d110      	bne.n	8006f6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d102      	bne.n	8006f54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f4e:	7b7b      	ldrb	r3, [r7, #13]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e069      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f68:	e031      	b.n	8006fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d110      	bne.n	8006f92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f76:	7b3b      	ldrb	r3, [r7, #12]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d001      	beq.n	8006f80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e055      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f90:	e01d      	b.n	8006fce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d105      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f9e:	7b7b      	ldrb	r3, [r7, #13]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d102      	bne.n	8006faa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fa4:	7b3b      	ldrb	r3, [r7, #12]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d001      	beq.n	8006fae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e03e      	b.n	800702c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_TIM_Encoder_Start+0xc4>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d008      	beq.n	8006fec <HAL_TIM_Encoder_Start+0xd4>
 8006fda:	e00f      	b.n	8006ffc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 ff4d 	bl	8007e84 <TIM_CCxChannelCmd>
      break;
 8006fea:	e016      	b.n	800701a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 ff45 	bl	8007e84 <TIM_CCxChannelCmd>
      break;
 8006ffa:	e00e      	b.n	800701a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2201      	movs	r2, #1
 8007002:	2100      	movs	r1, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f000 ff3d 	bl	8007e84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2201      	movs	r2, #1
 8007010:	2104      	movs	r1, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f000 ff36 	bl	8007e84 <TIM_CCxChannelCmd>
      break;
 8007018:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b02      	cmp	r3, #2
 8007048:	d122      	bne.n	8007090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b02      	cmp	r3, #2
 8007056:	d11b      	bne.n	8007090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0202 	mvn.w	r2, #2
 8007060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa7a 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa6c 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa7d 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b04      	cmp	r3, #4
 800709c:	d122      	bne.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11b      	bne.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0204 	mvn.w	r2, #4
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa50 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa42 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa53 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0208 	mvn.w	r2, #8
 8007108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2204      	movs	r2, #4
 800710e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa26 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa18 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa29 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b10      	cmp	r3, #16
 8007144:	d122      	bne.n	800718c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b10      	cmp	r3, #16
 8007152:	d11b      	bne.n	800718c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0210 	mvn.w	r2, #16
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2208      	movs	r2, #8
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9fc 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9ee 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9ff 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b01      	cmp	r3, #1
 8007198:	d10e      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d107      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0201 	mvn.w	r2, #1
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7f9 f918 	bl	80003e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d10e      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d0:	2b80      	cmp	r3, #128	; 0x80
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 ffa2 	bl	8008128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d10e      	bne.n	8007212 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b80      	cmp	r3, #128	; 0x80
 8007200:	d107      	bne.n	8007212 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800720a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 ff95 	bl	800813c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d10e      	bne.n	800723e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d107      	bne.n	800723e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9b7 	bl	80075ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b20      	cmp	r3, #32
 800724a:	d10e      	bne.n	800726a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b20      	cmp	r3, #32
 8007258:	d107      	bne.n	800726a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f06f 0220 	mvn.w	r2, #32
 8007262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 ff55 	bl	8008114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007278:	d10f      	bne.n	800729a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007288:	d107      	bne.n	800729a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 ff5b 	bl	8008150 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a8:	d10f      	bne.n	80072ca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80072c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 ff4d 	bl	8008164 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d8:	d10f      	bne.n	80072fa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072e8:	d107      	bne.n	80072fa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80072f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 ff3f 	bl	8008178 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007308:	d10f      	bne.n	800732a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007318:	d107      	bne.n	800732a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 ff31 	bl	800818c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800734e:	2302      	movs	r3, #2
 8007350:	e0ff      	b.n	8007552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b14      	cmp	r3, #20
 800735e:	f200 80f0 	bhi.w	8007542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007543 	.word	0x08007543
 8007370:	08007543 	.word	0x08007543
 8007374:	08007543 	.word	0x08007543
 8007378:	080073fd 	.word	0x080073fd
 800737c:	08007543 	.word	0x08007543
 8007380:	08007543 	.word	0x08007543
 8007384:	08007543 	.word	0x08007543
 8007388:	0800743f 	.word	0x0800743f
 800738c:	08007543 	.word	0x08007543
 8007390:	08007543 	.word	0x08007543
 8007394:	08007543 	.word	0x08007543
 8007398:	0800747f 	.word	0x0800747f
 800739c:	08007543 	.word	0x08007543
 80073a0:	08007543 	.word	0x08007543
 80073a4:	08007543 	.word	0x08007543
 80073a8:	080074c1 	.word	0x080074c1
 80073ac:	08007543 	.word	0x08007543
 80073b0:	08007543 	.word	0x08007543
 80073b4:	08007543 	.word	0x08007543
 80073b8:	08007501 	.word	0x08007501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa68 	bl	8007898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0204 	bic.w	r2, r2, #4
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	619a      	str	r2, [r3, #24]
      break;
 80073fa:	e0a5      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fad8 	bl	80079b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6999      	ldr	r1, [r3, #24]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	021a      	lsls	r2, r3, #8
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	619a      	str	r2, [r3, #24]
      break;
 800743c:	e084      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fb41 	bl	8007acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0204 	bic.w	r2, r2, #4
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
      break;
 800747c:	e064      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fba9 	bl	8007bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69d9      	ldr	r1, [r3, #28]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	021a      	lsls	r2, r3, #8
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	61da      	str	r2, [r3, #28]
      break;
 80074be:	e043      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc12 	bl	8007cf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0208 	orr.w	r2, r2, #8
 80074da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0204 	bic.w	r2, r2, #4
 80074ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80074fe:	e023      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fc56 	bl	8007db8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800751a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007540:	e002      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	75fb      	strb	r3, [r7, #23]
      break;
 8007546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop

0800755c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d107      	bne.n	80075fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075fa:	e02a      	b.n	8007652 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d107      	bne.n	8007616 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2202      	movs	r2, #2
 800760a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007614:	e01d      	b.n	8007652 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d107      	bne.n	8007630 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2204      	movs	r2, #4
 8007624:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800762e:	e010      	b.n	8007652 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	429a      	cmp	r2, r3
 8007638:	d107      	bne.n	800764a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2208      	movs	r2, #8
 800763e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007648:	e003      	b.n	8007652 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff ffb4 	bl	80075c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	771a      	strb	r2, [r3, #28]
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d10b      	bne.n	8007696 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d136      	bne.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007694:	e031      	b.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d10b      	bne.n	80076b8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2202      	movs	r2, #2
 80076a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d125      	bne.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b6:	e020      	b.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d10b      	bne.n	80076da <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2204      	movs	r2, #4
 80076c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d114      	bne.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d8:	e00f      	b.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d10a      	bne.n	80076fa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2208      	movs	r2, #8
 80076e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff ff42 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	771a      	strb	r2, [r3, #28]
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d103      	bne.n	800772e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	771a      	strb	r2, [r3, #28]
 800772c:	e019      	b.n	8007762 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d103      	bne.n	8007740 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2202      	movs	r2, #2
 800773c:	771a      	strb	r2, [r3, #28]
 800773e:	e010      	b.n	8007762 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	429a      	cmp	r2, r3
 8007748:	d103      	bne.n	8007752 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2204      	movs	r2, #4
 800774e:	771a      	strb	r2, [r3, #28]
 8007750:	e007      	b.n	8007762 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	d102      	bne.n	8007762 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2208      	movs	r2, #8
 8007760:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff ff18 	bl	8007598 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	771a      	strb	r2, [r3, #28]
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a3c      	ldr	r2, [pc, #240]	; (800787c <TIM_Base_SetConfig+0x104>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00f      	beq.n	80077b0 <TIM_Base_SetConfig+0x38>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007796:	d00b      	beq.n	80077b0 <TIM_Base_SetConfig+0x38>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a39      	ldr	r2, [pc, #228]	; (8007880 <TIM_Base_SetConfig+0x108>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d007      	beq.n	80077b0 <TIM_Base_SetConfig+0x38>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a38      	ldr	r2, [pc, #224]	; (8007884 <TIM_Base_SetConfig+0x10c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d003      	beq.n	80077b0 <TIM_Base_SetConfig+0x38>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a37      	ldr	r2, [pc, #220]	; (8007888 <TIM_Base_SetConfig+0x110>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d108      	bne.n	80077c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a2d      	ldr	r2, [pc, #180]	; (800787c <TIM_Base_SetConfig+0x104>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d01b      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d0:	d017      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <TIM_Base_SetConfig+0x108>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a29      	ldr	r2, [pc, #164]	; (8007884 <TIM_Base_SetConfig+0x10c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00f      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <TIM_Base_SetConfig+0x110>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00b      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a27      	ldr	r2, [pc, #156]	; (800788c <TIM_Base_SetConfig+0x114>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d007      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a26      	ldr	r2, [pc, #152]	; (8007890 <TIM_Base_SetConfig+0x118>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d003      	beq.n	8007802 <TIM_Base_SetConfig+0x8a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <TIM_Base_SetConfig+0x11c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d108      	bne.n	8007814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a10      	ldr	r2, [pc, #64]	; (800787c <TIM_Base_SetConfig+0x104>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00f      	beq.n	8007860 <TIM_Base_SetConfig+0xe8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a11      	ldr	r2, [pc, #68]	; (8007888 <TIM_Base_SetConfig+0x110>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00b      	beq.n	8007860 <TIM_Base_SetConfig+0xe8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a10      	ldr	r2, [pc, #64]	; (800788c <TIM_Base_SetConfig+0x114>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d007      	beq.n	8007860 <TIM_Base_SetConfig+0xe8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a0f      	ldr	r2, [pc, #60]	; (8007890 <TIM_Base_SetConfig+0x118>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <TIM_Base_SetConfig+0xe8>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a0e      	ldr	r2, [pc, #56]	; (8007894 <TIM_Base_SetConfig+0x11c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d103      	bne.n	8007868 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	615a      	str	r2, [r3, #20]
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40000400 	.word	0x40000400
 8007884:	40000800 	.word	0x40000800
 8007888:	40013400 	.word	0x40013400
 800788c:	40014000 	.word	0x40014000
 8007890:	40014400 	.word	0x40014400
 8007894:	40014800 	.word	0x40014800

08007898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f023 0302 	bic.w	r3, r3, #2
 80078e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a2c      	ldr	r2, [pc, #176]	; (80079a4 <TIM_OC1_SetConfig+0x10c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00f      	beq.n	8007918 <TIM_OC1_SetConfig+0x80>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a2b      	ldr	r2, [pc, #172]	; (80079a8 <TIM_OC1_SetConfig+0x110>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_OC1_SetConfig+0x80>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a2a      	ldr	r2, [pc, #168]	; (80079ac <TIM_OC1_SetConfig+0x114>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_OC1_SetConfig+0x80>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a29      	ldr	r2, [pc, #164]	; (80079b0 <TIM_OC1_SetConfig+0x118>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_OC1_SetConfig+0x80>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a28      	ldr	r2, [pc, #160]	; (80079b4 <TIM_OC1_SetConfig+0x11c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d10c      	bne.n	8007932 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f023 0308 	bic.w	r3, r3, #8
 800791e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f023 0304 	bic.w	r3, r3, #4
 8007930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <TIM_OC1_SetConfig+0x10c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <TIM_OC1_SetConfig+0xc2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a1a      	ldr	r2, [pc, #104]	; (80079a8 <TIM_OC1_SetConfig+0x110>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_OC1_SetConfig+0xc2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a19      	ldr	r2, [pc, #100]	; (80079ac <TIM_OC1_SetConfig+0x114>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_OC1_SetConfig+0xc2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <TIM_OC1_SetConfig+0x118>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_OC1_SetConfig+0xc2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a17      	ldr	r2, [pc, #92]	; (80079b4 <TIM_OC1_SetConfig+0x11c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d111      	bne.n	800797e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	4313      	orrs	r3, r2
 8007972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	621a      	str	r2, [r3, #32]
}
 8007998:	bf00      	nop
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40013400 	.word	0x40013400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	f023 0210 	bic.w	r2, r3, #16
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f023 0320 	bic.w	r3, r3, #32
 8007a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a28      	ldr	r2, [pc, #160]	; (8007ab8 <TIM_OC2_SetConfig+0x100>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_OC2_SetConfig+0x6c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a27      	ldr	r2, [pc, #156]	; (8007abc <TIM_OC2_SetConfig+0x104>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10d      	bne.n	8007a40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <TIM_OC2_SetConfig+0x100>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00f      	beq.n	8007a68 <TIM_OC2_SetConfig+0xb0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <TIM_OC2_SetConfig+0x104>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00b      	beq.n	8007a68 <TIM_OC2_SetConfig+0xb0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <TIM_OC2_SetConfig+0x108>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d007      	beq.n	8007a68 <TIM_OC2_SetConfig+0xb0>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <TIM_OC2_SetConfig+0x10c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d003      	beq.n	8007a68 <TIM_OC2_SetConfig+0xb0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <TIM_OC2_SetConfig+0x110>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d113      	bne.n	8007a90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	621a      	str	r2, [r3, #32]
}
 8007aaa:	bf00      	nop
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40013400 	.word	0x40013400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800

08007acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0303 	bic.w	r3, r3, #3
 8007b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <TIM_OC3_SetConfig+0xfc>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_OC3_SetConfig+0x6a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <TIM_OC3_SetConfig+0x100>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d10d      	bne.n	8007b52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1c      	ldr	r2, [pc, #112]	; (8007bc8 <TIM_OC3_SetConfig+0xfc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00f      	beq.n	8007b7a <TIM_OC3_SetConfig+0xae>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1b      	ldr	r2, [pc, #108]	; (8007bcc <TIM_OC3_SetConfig+0x100>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00b      	beq.n	8007b7a <TIM_OC3_SetConfig+0xae>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a1a      	ldr	r2, [pc, #104]	; (8007bd0 <TIM_OC3_SetConfig+0x104>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <TIM_OC3_SetConfig+0xae>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a19      	ldr	r2, [pc, #100]	; (8007bd4 <TIM_OC3_SetConfig+0x108>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_OC3_SetConfig+0xae>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <TIM_OC3_SetConfig+0x10c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d113      	bne.n	8007ba2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	621a      	str	r2, [r3, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	40012c00 	.word	0x40012c00
 8007bcc:	40013400 	.word	0x40013400
 8007bd0:	40014000 	.word	0x40014000
 8007bd4:	40014400 	.word	0x40014400
 8007bd8:	40014800 	.word	0x40014800

08007bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a28      	ldr	r2, [pc, #160]	; (8007cdc <TIM_OC4_SetConfig+0x100>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_OC4_SetConfig+0x6c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a27      	ldr	r2, [pc, #156]	; (8007ce0 <TIM_OC4_SetConfig+0x104>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d10d      	bne.n	8007c64 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1d      	ldr	r2, [pc, #116]	; (8007cdc <TIM_OC4_SetConfig+0x100>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00f      	beq.n	8007c8c <TIM_OC4_SetConfig+0xb0>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ce0 <TIM_OC4_SetConfig+0x104>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <TIM_OC4_SetConfig+0xb0>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <TIM_OC4_SetConfig+0x108>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d007      	beq.n	8007c8c <TIM_OC4_SetConfig+0xb0>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ce8 <TIM_OC4_SetConfig+0x10c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_OC4_SetConfig+0xb0>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a19      	ldr	r2, [pc, #100]	; (8007cec <TIM_OC4_SetConfig+0x110>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d113      	bne.n	8007cb4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	019b      	lsls	r3, r3, #6
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	019b      	lsls	r3, r3, #6
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40012c00 	.word	0x40012c00
 8007ce0:	40013400 	.word	0x40013400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800

08007cf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <TIM_OC5_SetConfig+0xb4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_OC5_SetConfig+0x7a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <TIM_OC5_SetConfig+0xb8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_OC5_SetConfig+0x7a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <TIM_OC5_SetConfig+0xbc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_OC5_SetConfig+0x7a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <TIM_OC5_SetConfig+0xc0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_OC5_SetConfig+0x7a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <TIM_OC5_SetConfig+0xc4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d109      	bne.n	8007d7e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	621a      	str	r2, [r3, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	40012c00 	.word	0x40012c00
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40014000 	.word	0x40014000
 8007db0:	40014400 	.word	0x40014400
 8007db4:	40014800 	.word	0x40014800

08007db8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	051b      	lsls	r3, r3, #20
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a18      	ldr	r2, [pc, #96]	; (8007e70 <TIM_OC6_SetConfig+0xb8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00f      	beq.n	8007e34 <TIM_OC6_SetConfig+0x7c>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a17      	ldr	r2, [pc, #92]	; (8007e74 <TIM_OC6_SetConfig+0xbc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00b      	beq.n	8007e34 <TIM_OC6_SetConfig+0x7c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a16      	ldr	r2, [pc, #88]	; (8007e78 <TIM_OC6_SetConfig+0xc0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d007      	beq.n	8007e34 <TIM_OC6_SetConfig+0x7c>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <TIM_OC6_SetConfig+0xc4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <TIM_OC6_SetConfig+0x7c>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a14      	ldr	r2, [pc, #80]	; (8007e80 <TIM_OC6_SetConfig+0xc8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d109      	bne.n	8007e48 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	029b      	lsls	r3, r3, #10
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	621a      	str	r2, [r3, #32]
}
 8007e62:	bf00      	nop
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40013400 	.word	0x40013400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800

08007e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	2201      	movs	r2, #1
 8007e98:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1a      	ldr	r2, [r3, #32]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	43db      	mvns	r3, r3
 8007ea6:	401a      	ands	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1a      	ldr	r2, [r3, #32]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e065      	b.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2c      	ldr	r2, [pc, #176]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a2b      	ldr	r2, [pc, #172]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d108      	bne.n	8007f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d018      	beq.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5e:	d013      	beq.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00e      	beq.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d009      	beq.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a12      	ldr	r2, [pc, #72]	; (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d004      	beq.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a13      	ldr	r2, [pc, #76]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d10c      	bne.n	8007fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40013400 	.word	0x40013400
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40014000 	.word	0x40014000

08007fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e087      	b.n	8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a27      	ldr	r2, [pc, #156]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a25      	ldr	r2, [pc, #148]	; (8008110 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d106      	bne.n	800808c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1e      	ldr	r2, [pc, #120]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d004      	beq.n	80080a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1d      	ldr	r2, [pc, #116]	; (8008110 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d126      	bne.n	80080ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	051b      	lsls	r3, r3, #20
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0e      	ldr	r2, [pc, #56]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d004      	beq.n	80080e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a0d      	ldr	r2, [pc, #52]	; (8008110 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d106      	bne.n	80080ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40013400 	.word	0x40013400

08008114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081d6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	43db      	mvns	r3, r3
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4013      	ands	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008204:	b084      	sub	sp, #16
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	f107 0014 	add.w	r0, r7, #20
 8008212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	b004      	add	sp, #16
 8008244:	4770      	bx	lr
	...

08008248 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008248:	b480      	push	{r7}
 800824a:	b09d      	sub	sp, #116	; 0x74
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	78db      	ldrb	r3, [r3, #3]
 8008276:	2b03      	cmp	r3, #3
 8008278:	d81f      	bhi.n	80082ba <USB_ActivateEndpoint+0x72>
 800827a:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <USB_ActivateEndpoint+0x38>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	08008291 	.word	0x08008291
 8008284:	080082ad 	.word	0x080082ad
 8008288:	080082c3 	.word	0x080082c3
 800828c:	0800829f 	.word	0x0800829f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008290:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008298:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800829c:	e012      	b.n	80082c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800829e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80082a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082aa:	e00b      	b.n	80082c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80082b8:	e004      	b.n	80082c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80082c0:	e000      	b.n	80082c4 <USB_ActivateEndpoint+0x7c>
      break;
 80082c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	441a      	add	r2, r3
 80082ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	b21a      	sxth	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b21b      	sxth	r3, r3
 8008306:	4313      	orrs	r3, r2
 8008308:	b21b      	sxth	r3, r3
 800830a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800831c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832c:	b29b      	uxth	r3, r3
 800832e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	7b1b      	ldrb	r3, [r3, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 8149 	bne.w	80085cc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8084 	beq.w	800844c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	61bb      	str	r3, [r7, #24]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834e:	b29b      	uxth	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	4413      	add	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	00da      	lsls	r2, r3, #3
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	88db      	ldrh	r3, [r3, #6]
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	b29b      	uxth	r3, r3
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	827b      	strh	r3, [r7, #18]
 8008386:	8a7b      	ldrh	r3, [r7, #18]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01b      	beq.n	80083c8 <USB_ActivateEndpoint+0x180>
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	823b      	strh	r3, [r7, #16]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	441a      	add	r2, r3
 80083b2:	8a3b      	ldrh	r3, [r7, #16]
 80083b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	78db      	ldrb	r3, [r3, #3]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d020      	beq.n	8008412 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e6:	81bb      	strh	r3, [r7, #12]
 80083e8:	89bb      	ldrh	r3, [r7, #12]
 80083ea:	f083 0320 	eor.w	r3, r3, #32
 80083ee:	81bb      	strh	r3, [r7, #12]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	441a      	add	r2, r3
 80083fa:	89bb      	ldrh	r3, [r7, #12]
 80083fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840c:	b29b      	uxth	r3, r3
 800840e:	8013      	strh	r3, [r2, #0]
 8008410:	e2a6      	b.n	8008960 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008428:	81fb      	strh	r3, [r7, #14]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	441a      	add	r2, r3
 8008434:	89fb      	ldrh	r3, [r7, #14]
 8008436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]
 800844a:	e289      	b.n	8008960 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	633b      	str	r3, [r7, #48]	; 0x30
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	4413      	add	r3, r2
 800845e:	633b      	str	r3, [r7, #48]	; 0x30
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	00da      	lsls	r2, r3, #3
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	4413      	add	r3, r2
 800846a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	88db      	ldrh	r3, [r3, #6]
 8008474:	085b      	lsrs	r3, r3, #1
 8008476:	b29b      	uxth	r3, r3
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800848a:	b29b      	uxth	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	4413      	add	r3, r2
 8008492:	62bb      	str	r3, [r7, #40]	; 0x28
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	00da      	lsls	r2, r3, #3
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	4413      	add	r3, r2
 800849e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b3e      	cmp	r3, #62	; 0x3e
 80084aa:	d918      	bls.n	80084de <USB_ActivateEndpoint+0x296>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <USB_ActivateEndpoint+0x27e>
 80084c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c2:	3b01      	subs	r3, #1
 80084c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80084c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	029b      	lsls	r3, r3, #10
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	e029      	b.n	8008532 <USB_ActivateEndpoint+0x2ea>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d112      	bne.n	800850c <USB_ActivateEndpoint+0x2c4>
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008504:	b29a      	uxth	r2, r3
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	801a      	strh	r2, [r3, #0]
 800850a:	e012      	b.n	8008532 <USB_ActivateEndpoint+0x2ea>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	66bb      	str	r3, [r7, #104]	; 0x68
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <USB_ActivateEndpoint+0x2de>
 8008520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008522:	3301      	adds	r3, #1
 8008524:	66bb      	str	r3, [r7, #104]	; 0x68
 8008526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008528:	b29b      	uxth	r3, r3
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	b29a      	uxth	r2, r3
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01b      	beq.n	8008582 <USB_ActivateEndpoint+0x33a>
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008560:	843b      	strh	r3, [r7, #32]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	441a      	add	r2, r3
 800856c:	8c3b      	ldrh	r3, [r7, #32]
 800856e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800857a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800857e:	b29b      	uxth	r3, r3
 8008580:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	b29b      	uxth	r3, r3
 8008590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008598:	83fb      	strh	r3, [r7, #30]
 800859a:	8bfb      	ldrh	r3, [r7, #30]
 800859c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085a0:	83fb      	strh	r3, [r7, #30]
 80085a2:	8bfb      	ldrh	r3, [r7, #30]
 80085a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085a8:	83fb      	strh	r3, [r7, #30]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	441a      	add	r2, r3
 80085b4:	8bfb      	ldrh	r3, [r7, #30]
 80085b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	8013      	strh	r3, [r2, #0]
 80085ca:	e1c9      	b.n	8008960 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	78db      	ldrb	r3, [r3, #3]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d11e      	bne.n	8008612 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80085fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008604:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860c:	b29b      	uxth	r3, r3
 800860e:	8013      	strh	r3, [r2, #0]
 8008610:	e01d      	b.n	800864e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008628:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	441a      	add	r2, r3
 8008636:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800863a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864a:	b29b      	uxth	r3, r3
 800864c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008658:	b29b      	uxth	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800865e:	4413      	add	r3, r2
 8008660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	00da      	lsls	r2, r3, #3
 8008668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800866a:	4413      	add	r3, r2
 800866c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008670:	65bb      	str	r3, [r7, #88]	; 0x58
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	891b      	ldrh	r3, [r3, #8]
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	b29b      	uxth	r3, r3
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	657b      	str	r3, [r7, #84]	; 0x54
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800868c:	b29b      	uxth	r3, r3
 800868e:	461a      	mov	r2, r3
 8008690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008692:	4413      	add	r3, r2
 8008694:	657b      	str	r3, [r7, #84]	; 0x54
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	00da      	lsls	r2, r3, #3
 800869c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800869e:	4413      	add	r3, r2
 80086a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086a4:	653b      	str	r3, [r7, #80]	; 0x50
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	895b      	ldrh	r3, [r3, #10]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 8093 	bne.w	80087e6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80086d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80086d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01b      	beq.n	8008714 <USB_ActivateEndpoint+0x4cc>
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800870c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008722:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01b      	beq.n	8008764 <USB_ActivateEndpoint+0x51c>
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008742:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	441a      	add	r2, r3
 800874e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877a:	873b      	strh	r3, [r7, #56]	; 0x38
 800877c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800877e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008782:	873b      	strh	r3, [r7, #56]	; 0x38
 8008784:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008786:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800878a:	873b      	strh	r3, [r7, #56]	; 0x38
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	441a      	add	r2, r3
 8008796:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	441a      	add	r2, r3
 80087ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	8013      	strh	r3, [r2, #0]
 80087e4:	e0bc      	b.n	8008960 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80087f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80087fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01d      	beq.n	800883e <USB_ActivateEndpoint+0x5f6>
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008818:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	441a      	add	r2, r3
 8008826:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800882a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883a:	b29b      	uxth	r3, r3
 800883c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800884e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01d      	beq.n	8008896 <USB_ActivateEndpoint+0x64e>
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29b      	uxth	r3, r3
 8008868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008870:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	441a      	add	r2, r3
 800887e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800888a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008892:	b29b      	uxth	r3, r3
 8008894:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d024      	beq.n	80088e8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088bc:	f083 0320 	eor.w	r3, r3, #32
 80088c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	441a      	add	r2, r3
 80088ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8013      	strh	r3, [r2, #0]
 80088e6:	e01d      	b.n	8008924 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	b29b      	uxth	r3, r3
 8008932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	441a      	add	r2, r3
 8008948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800894c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	b29b      	uxth	r3, r3
 800895e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008964:	4618      	mov	r0, r3
 8008966:	3774      	adds	r7, #116	; 0x74
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008970:	b480      	push	{r7}
 8008972:	b08d      	sub	sp, #52	; 0x34
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	7b1b      	ldrb	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 808e 	bne.w	8008aa0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d044      	beq.n	8008a16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	81bb      	strh	r3, [r7, #12]
 800899a:	89bb      	ldrh	r3, [r7, #12]
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01b      	beq.n	80089dc <USB_DeactivateEndpoint+0x6c>
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	817b      	strh	r3, [r7, #10]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	897b      	ldrh	r3, [r7, #10]
 80089c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089d8:	b29b      	uxth	r3, r3
 80089da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f2:	813b      	strh	r3, [r7, #8]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	441a      	add	r2, r3
 80089fe:	893b      	ldrh	r3, [r7, #8]
 8008a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	8013      	strh	r3, [r2, #0]
 8008a14:	e192      	b.n	8008d3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	827b      	strh	r3, [r7, #18]
 8008a24:	8a7b      	ldrh	r3, [r7, #18]
 8008a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d01b      	beq.n	8008a66 <USB_DeactivateEndpoint+0xf6>
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a44:	823b      	strh	r3, [r7, #16]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	441a      	add	r2, r3
 8008a50:	8a3b      	ldrh	r3, [r7, #16]
 8008a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7c:	81fb      	strh	r3, [r7, #14]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	441a      	add	r2, r3
 8008a88:	89fb      	ldrh	r3, [r7, #14]
 8008a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	8013      	strh	r3, [r2, #0]
 8008a9e:	e14d      	b.n	8008d3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 80a5 	bne.w	8008bf4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	843b      	strh	r3, [r7, #32]
 8008ab8:	8c3b      	ldrh	r3, [r7, #32]
 8008aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01b      	beq.n	8008afa <USB_DeactivateEndpoint+0x18a>
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad8:	83fb      	strh	r3, [r7, #30]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	441a      	add	r2, r3
 8008ae4:	8bfb      	ldrh	r3, [r7, #30]
 8008ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	83bb      	strh	r3, [r7, #28]
 8008b08:	8bbb      	ldrh	r3, [r7, #28]
 8008b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01b      	beq.n	8008b4a <USB_DeactivateEndpoint+0x1da>
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b28:	837b      	strh	r3, [r7, #26]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	441a      	add	r2, r3
 8008b34:	8b7b      	ldrh	r3, [r7, #26]
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b60:	833b      	strh	r3, [r7, #24]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	8b3b      	ldrh	r3, [r7, #24]
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b98:	82fb      	strh	r3, [r7, #22]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd0:	82bb      	strh	r3, [r7, #20]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	8abb      	ldrh	r3, [r7, #20]
 8008bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8013      	strh	r3, [r2, #0]
 8008bf2:	e0a3      	b.n	8008d3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01b      	beq.n	8008c44 <USB_DeactivateEndpoint+0x2d4>
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	441a      	add	r2, r3
 8008c2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008c52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01b      	beq.n	8008c94 <USB_DeactivateEndpoint+0x324>
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c72:	853b      	strh	r3, [r7, #40]	; 0x28
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	441a      	add	r2, r3
 8008c7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	441a      	add	r2, r3
 8008d26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3734      	adds	r7, #52	; 0x34
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b0c2      	sub	sp, #264	; 0x108
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d58:	6018      	str	r0, [r3, #0]
 8008d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d62:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f040 867b 	bne.w	8009a6c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d908      	bls.n	8008da4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008da2:	e007      	b.n	8008db4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	7b1b      	ldrb	r3, [r3, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d13a      	bne.n	8008e3a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6959      	ldr	r1, [r3, #20]
 8008dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	88da      	ldrh	r2, [r3, #6]
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008de6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	f001 fc1d 	bl	800a62a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4413      	add	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	00da      	lsls	r2, r3, #3
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4413      	add	r3, r2
 8008e26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	801a      	strh	r2, [r3, #0]
 8008e36:	f000 bde3 	b.w	8009a00 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	78db      	ldrb	r3, [r3, #3]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	f040 843a 	bne.w	80096c0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	f240 83b7 	bls.w	80095d8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	441a      	add	r2, r3
 8008eae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a1a      	ldr	r2, [r3, #32]
 8008ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed6:	1ad2      	subs	r2, r2, r3
 8008ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 81b3 	beq.w	8009272 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	633b      	str	r3, [r7, #48]	; 0x30
 8008f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d16d      	bne.n	8009004 <USB_EPStartXfer+0x2ba>
 8008f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	4413      	add	r3, r2
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	00da      	lsls	r2, r3, #3
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f68:	2b3e      	cmp	r3, #62	; 0x3e
 8008f6a:	d91c      	bls.n	8008fa6 <USB_EPStartXfer+0x25c>
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7a:	f003 031f 	and.w	r3, r3, #31
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <USB_EPStartXfer+0x242>
 8008f82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f86:	3b01      	subs	r3, #1
 8008f88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	029b      	lsls	r3, r3, #10
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	e053      	b.n	800904e <USB_EPStartXfer+0x304>
 8008fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d112      	bne.n	8008fd4 <USB_EPStartXfer+0x28a>
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	e03c      	b.n	800904e <USB_EPStartXfer+0x304>
 8008fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <USB_EPStartXfer+0x2aa>
 8008fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008fee:	3301      	adds	r3, #1
 8008ff0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	029b      	lsls	r3, r3, #10
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	e024      	b.n	800904e <USB_EPStartXfer+0x304>
 8009004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d11c      	bne.n	800904e <USB_EPStartXfer+0x304>
 8009014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009022:	b29b      	uxth	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	4413      	add	r3, r2
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
 800902c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	00da      	lsls	r2, r3, #3
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	4413      	add	r3, r2
 800903e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009048:	b29a      	uxth	r2, r3
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	895b      	ldrh	r3, [r3, #10]
 800905a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800905e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6959      	ldr	r1, [r3, #20]
 800906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906e:	b29b      	uxth	r3, r3
 8009070:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009074:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009078:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800907c:	6800      	ldr	r0, [r0, #0]
 800907e:	f001 fad4 	bl	800a62a <USB_WritePMA>
            ep->xfer_buff += len;
 8009082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	695a      	ldr	r2, [r3, #20]
 800908e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009092:	441a      	add	r2, r3
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6a1a      	ldr	r2, [r3, #32]
 80090ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d90f      	bls.n	80090dc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6a1a      	ldr	r2, [r3, #32]
 80090c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090cc:	1ad2      	subs	r2, r2, r3
 80090ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	621a      	str	r2, [r3, #32]
 80090da:	e00e      	b.n	80090fa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80090dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80090ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d16d      	bne.n	80091e6 <USB_EPStartXfer+0x49c>
 800910a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009124:	b29b      	uxth	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	4413      	add	r3, r2
 800912c:	61bb      	str	r3, [r7, #24]
 800912e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	00da      	lsls	r2, r3, #3
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	4413      	add	r3, r2
 8009140:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	2b3e      	cmp	r3, #62	; 0x3e
 800914c:	d91c      	bls.n	8009188 <USB_EPStartXfer+0x43e>
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <USB_EPStartXfer+0x424>
 8009164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009168:	3b01      	subs	r3, #1
 800916a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800916e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009172:	b29b      	uxth	r3, r3
 8009174:	029b      	lsls	r3, r3, #10
 8009176:	b29b      	uxth	r3, r3
 8009178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009180:	b29a      	uxth	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	e059      	b.n	800923c <USB_EPStartXfer+0x4f2>
 8009188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918c:	2b00      	cmp	r3, #0
 800918e:	d112      	bne.n	80091b6 <USB_EPStartXfer+0x46c>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800919a:	b29a      	uxth	r2, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	801a      	strh	r2, [r3, #0]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e042      	b.n	800923c <USB_EPStartXfer+0x4f2>
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <USB_EPStartXfer+0x48c>
 80091cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d0:	3301      	adds	r3, #1
 80091d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091da:	b29b      	uxth	r3, r3
 80091dc:	029b      	lsls	r3, r3, #10
 80091de:	b29a      	uxth	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	801a      	strh	r2, [r3, #0]
 80091e4:	e02a      	b.n	800923c <USB_EPStartXfer+0x4f2>
 80091e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d122      	bne.n	800923c <USB_EPStartXfer+0x4f2>
 80091f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009210:	b29b      	uxth	r3, r3
 8009212:	461a      	mov	r2, r3
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	4413      	add	r3, r2
 8009218:	623b      	str	r3, [r7, #32]
 800921a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	00da      	lsls	r2, r3, #3
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	4413      	add	r3, r2
 800922c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009230:	61fb      	str	r3, [r7, #28]
 8009232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009236:	b29a      	uxth	r2, r3
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800923c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	891b      	ldrh	r3, [r3, #8]
 8009248:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800924c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6959      	ldr	r1, [r3, #20]
 8009258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925c:	b29b      	uxth	r3, r3
 800925e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009262:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009266:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	f001 f9dd 	bl	800a62a <USB_WritePMA>
 8009270:	e3c6      	b.n	8009a00 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d16d      	bne.n	800935e <USB_EPStartXfer+0x614>
 8009282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	64bb      	str	r3, [r7, #72]	; 0x48
 800928e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800929c:	b29b      	uxth	r3, r3
 800929e:	461a      	mov	r2, r3
 80092a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a2:	4413      	add	r3, r2
 80092a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80092a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	00da      	lsls	r2, r3, #3
 80092b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092b6:	4413      	add	r3, r2
 80092b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092bc:	647b      	str	r3, [r7, #68]	; 0x44
 80092be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c2:	2b3e      	cmp	r3, #62	; 0x3e
 80092c4:	d91c      	bls.n	8009300 <USB_EPStartXfer+0x5b6>
 80092c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <USB_EPStartXfer+0x59c>
 80092dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092e0:	3b01      	subs	r3, #1
 80092e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80092e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	e059      	b.n	80093b4 <USB_EPStartXfer+0x66a>
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009304:	2b00      	cmp	r3, #0
 8009306:	d112      	bne.n	800932e <USB_EPStartXfer+0x5e4>
 8009308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009312:	b29a      	uxth	r2, r3
 8009314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009326:	b29a      	uxth	r2, r3
 8009328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e042      	b.n	80093b4 <USB_EPStartXfer+0x66a>
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <USB_EPStartXfer+0x604>
 8009344:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009348:	3301      	adds	r3, #1
 800934a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800934e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009352:	b29b      	uxth	r3, r3
 8009354:	029b      	lsls	r3, r3, #10
 8009356:	b29a      	uxth	r2, r3
 8009358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800935a:	801a      	strh	r2, [r3, #0]
 800935c:	e02a      	b.n	80093b4 <USB_EPStartXfer+0x66a>
 800935e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d122      	bne.n	80093b4 <USB_EPStartXfer+0x66a>
 800936e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	653b      	str	r3, [r7, #80]	; 0x50
 800937a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009388:	b29b      	uxth	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800938e:	4413      	add	r3, r2
 8009390:	653b      	str	r3, [r7, #80]	; 0x50
 8009392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	00da      	lsls	r2, r3, #3
 80093a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a2:	4413      	add	r3, r2
 80093a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	891b      	ldrh	r3, [r3, #8]
 80093c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6959      	ldr	r1, [r3, #20]
 80093d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093e2:	6800      	ldr	r0, [r0, #0]
 80093e4:	f001 f921 	bl	800a62a <USB_WritePMA>
            ep->xfer_buff += len;
 80093e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	695a      	ldr	r2, [r3, #20]
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f8:	441a      	add	r2, r3
 80093fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6a1a      	ldr	r2, [r3, #32]
 8009412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	429a      	cmp	r2, r3
 8009420:	d90f      	bls.n	8009442 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6a1a      	ldr	r2, [r3, #32]
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	621a      	str	r2, [r3, #32]
 8009440:	e00e      	b.n	8009460 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2200      	movs	r2, #0
 800945e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
 800946c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d16d      	bne.n	8009558 <USB_EPStartXfer+0x80e>
 800947c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	63bb      	str	r3, [r7, #56]	; 0x38
 8009488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009496:	b29b      	uxth	r3, r3
 8009498:	461a      	mov	r2, r3
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	4413      	add	r3, r2
 800949e:	63bb      	str	r3, [r7, #56]	; 0x38
 80094a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	00da      	lsls	r2, r3, #3
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	4413      	add	r3, r2
 80094b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094b6:	637b      	str	r3, [r7, #52]	; 0x34
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094bc:	2b3e      	cmp	r3, #62	; 0x3e
 80094be:	d91c      	bls.n	80094fa <USB_EPStartXfer+0x7b0>
 80094c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <USB_EPStartXfer+0x796>
 80094d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094da:	3b01      	subs	r3, #1
 80094dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	029b      	lsls	r3, r3, #10
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	e053      	b.n	80095a2 <USB_EPStartXfer+0x858>
 80094fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d112      	bne.n	8009528 <USB_EPStartXfer+0x7de>
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800950c:	b29a      	uxth	r2, r3
 800950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	b29b      	uxth	r3, r3
 8009518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800951c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009520:	b29a      	uxth	r2, r3
 8009522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009524:	801a      	strh	r2, [r3, #0]
 8009526:	e03c      	b.n	80095a2 <USB_EPStartXfer+0x858>
 8009528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952c:	085b      	lsrs	r3, r3, #1
 800952e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <USB_EPStartXfer+0x7fe>
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009542:	3301      	adds	r3, #1
 8009544:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	b29b      	uxth	r3, r3
 800954e:	029b      	lsls	r3, r3, #10
 8009550:	b29a      	uxth	r2, r3
 8009552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009554:	801a      	strh	r2, [r3, #0]
 8009556:	e024      	b.n	80095a2 <USB_EPStartXfer+0x858>
 8009558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d11c      	bne.n	80095a2 <USB_EPStartXfer+0x858>
 8009568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957c:	4413      	add	r3, r2
 800957e:	643b      	str	r3, [r7, #64]	; 0x40
 8009580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	00da      	lsls	r2, r3, #3
 800958e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009590:	4413      	add	r3, r2
 8009592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800959c:	b29a      	uxth	r2, r3
 800959e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	895b      	ldrh	r3, [r3, #10]
 80095ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6959      	ldr	r1, [r3, #20]
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80095c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80095cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80095d0:	6800      	ldr	r0, [r0, #0]
 80095d2:	f001 f82a 	bl	800a62a <USB_WritePMA>
 80095d6:	e213      	b.n	8009a00 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80095d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80095e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	441a      	add	r2, r3
 800962c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009640:	b29b      	uxth	r3, r3
 8009642:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965e:	b29b      	uxth	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009664:	4413      	add	r3, r2
 8009666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	00da      	lsls	r2, r3, #3
 8009676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009678:	4413      	add	r3, r2
 800967a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800967e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009684:	b29a      	uxth	r2, r3
 8009686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009688:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800968a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	891b      	ldrh	r3, [r3, #8]
 8009696:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800969a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6959      	ldr	r1, [r3, #20]
 80096a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096b8:	6800      	ldr	r0, [r0, #0]
 80096ba:	f000 ffb6 	bl	800a62a <USB_WritePMA>
 80096be:	e19f      	b.n	8009a00 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80096c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6a1a      	ldr	r2, [r3, #32]
 80096cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80bc 	beq.w	800987e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	673b      	str	r3, [r7, #112]	; 0x70
 8009712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	785b      	ldrb	r3, [r3, #1]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d16d      	bne.n	80097fe <USB_EPStartXfer+0xab4>
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	66bb      	str	r3, [r7, #104]	; 0x68
 800972e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800973c:	b29b      	uxth	r3, r3
 800973e:	461a      	mov	r2, r3
 8009740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009742:	4413      	add	r3, r2
 8009744:	66bb      	str	r3, [r7, #104]	; 0x68
 8009746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	00da      	lsls	r2, r3, #3
 8009754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009756:	4413      	add	r3, r2
 8009758:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800975c:	667b      	str	r3, [r7, #100]	; 0x64
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009762:	2b3e      	cmp	r3, #62	; 0x3e
 8009764:	d91c      	bls.n	80097a0 <USB_EPStartXfer+0xa56>
 8009766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009774:	f003 031f 	and.w	r3, r3, #31
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <USB_EPStartXfer+0xa3c>
 800977c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009780:	3b01      	subs	r3, #1
 8009782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009786:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800978a:	b29b      	uxth	r3, r3
 800978c:	029b      	lsls	r3, r3, #10
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009798:	b29a      	uxth	r2, r3
 800979a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	e053      	b.n	8009848 <USB_EPStartXfer+0xafe>
 80097a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d112      	bne.n	80097ce <USB_EPStartXfer+0xa84>
 80097a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097b6:	801a      	strh	r2, [r3, #0]
 80097b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ca:	801a      	strh	r2, [r3, #0]
 80097cc:	e03c      	b.n	8009848 <USB_EPStartXfer+0xafe>
 80097ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <USB_EPStartXfer+0xaa4>
 80097e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097e8:	3301      	adds	r3, #1
 80097ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	029b      	lsls	r3, r3, #10
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097fa:	801a      	strh	r2, [r3, #0]
 80097fc:	e024      	b.n	8009848 <USB_EPStartXfer+0xafe>
 80097fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	785b      	ldrb	r3, [r3, #1]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d11c      	bne.n	8009848 <USB_EPStartXfer+0xafe>
 800980e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800981c:	b29b      	uxth	r3, r3
 800981e:	461a      	mov	r2, r3
 8009820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009822:	4413      	add	r3, r2
 8009824:	673b      	str	r3, [r7, #112]	; 0x70
 8009826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	00da      	lsls	r2, r3, #3
 8009834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009836:	4413      	add	r3, r2
 8009838:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800983c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009842:	b29a      	uxth	r2, r3
 8009844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009846:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	895b      	ldrh	r3, [r3, #10]
 8009854:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6959      	ldr	r1, [r3, #20]
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009868:	b29b      	uxth	r3, r3
 800986a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800986e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009872:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009876:	6800      	ldr	r0, [r0, #0]
 8009878:	f000 fed7 	bl	800a62a <USB_WritePMA>
 800987c:	e0c0      	b.n	8009a00 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800987e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d16d      	bne.n	800996a <USB_EPStartXfer+0xc20>
 800988e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	67fb      	str	r3, [r7, #124]	; 0x7c
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098ae:	4413      	add	r3, r2
 80098b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	00da      	lsls	r2, r3, #3
 80098c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098c2:	4413      	add	r3, r2
 80098c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ce:	2b3e      	cmp	r3, #62	; 0x3e
 80098d0:	d91c      	bls.n	800990c <USB_EPStartXfer+0xbc2>
 80098d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <USB_EPStartXfer+0xba8>
 80098e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80098ec:	3b01      	subs	r3, #1
 80098ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80098f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	029b      	lsls	r3, r3, #10
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009904:	b29a      	uxth	r2, r3
 8009906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009908:	801a      	strh	r2, [r3, #0]
 800990a:	e05f      	b.n	80099cc <USB_EPStartXfer+0xc82>
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009910:	2b00      	cmp	r3, #0
 8009912:	d112      	bne.n	800993a <USB_EPStartXfer+0xbf0>
 8009914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800991e:	b29a      	uxth	r2, r3
 8009920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009932:	b29a      	uxth	r2, r3
 8009934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	e048      	b.n	80099cc <USB_EPStartXfer+0xc82>
 800993a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993e:	085b      	lsrs	r3, r3, #1
 8009940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <USB_EPStartXfer+0xc10>
 8009950:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009954:	3301      	adds	r3, #1
 8009956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800995a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800995e:	b29b      	uxth	r3, r3
 8009960:	029b      	lsls	r3, r3, #10
 8009962:	b29a      	uxth	r2, r3
 8009964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	e030      	b.n	80099cc <USB_EPStartXfer+0xc82>
 800996a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d128      	bne.n	80099cc <USB_EPStartXfer+0xc82>
 800997a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009996:	b29b      	uxth	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800999e:	4413      	add	r3, r2
 80099a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	00da      	lsls	r2, r3, #3
 80099b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099b6:	4413      	add	r3, r2
 80099b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	891b      	ldrh	r3, [r3, #8]
 80099d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6959      	ldr	r1, [r3, #20]
 80099e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80099f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80099fa:	6800      	ldr	r0, [r0, #0]
 80099fc:	f000 fe15 	bl	800a62a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a26:	817b      	strh	r3, [r7, #10]
 8009a28:	897b      	ldrh	r3, [r7, #10]
 8009a2a:	f083 0310 	eor.w	r3, r3, #16
 8009a2e:	817b      	strh	r3, [r7, #10]
 8009a30:	897b      	ldrh	r3, [r7, #10]
 8009a32:	f083 0320 	eor.w	r3, r3, #32
 8009a36:	817b      	strh	r3, [r7, #10]
 8009a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	897b      	ldrh	r3, [r7, #10]
 8009a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	8013      	strh	r3, [r2, #0]
 8009a68:	f000 bc9f 	b.w	800a3aa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	7b1b      	ldrb	r3, [r3, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f040 80ae 	bne.w	8009bda <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d917      	bls.n	8009aca <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aba:	1ad2      	subs	r2, r2, r3
 8009abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	619a      	str	r2, [r3, #24]
 8009ac8:	e00e      	b.n	8009ae8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	00da      	lsls	r2, r3, #3
 8009b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b24:	4413      	add	r3, r2
 8009b26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b32:	2b3e      	cmp	r3, #62	; 0x3e
 8009b34:	d91d      	bls.n	8009b72 <USB_EPStartXfer+0xe28>
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3a:	095b      	lsrs	r3, r3, #5
 8009b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b44:	f003 031f 	and.w	r3, r3, #31
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <USB_EPStartXfer+0xe0c>
 8009b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b50:	3b01      	subs	r3, #1
 8009b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	029b      	lsls	r3, r3, #10
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	e3e1      	b.n	800a336 <USB_EPStartXfer+0x15ec>
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d116      	bne.n	8009ba8 <USB_EPStartXfer+0xe5e>
 8009b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ba4:	801a      	strh	r2, [r3, #0]
 8009ba6:	e3c6      	b.n	800a336 <USB_EPStartXfer+0x15ec>
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bac:	085b      	lsrs	r3, r3, #1
 8009bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d004      	beq.n	8009bc8 <USB_EPStartXfer+0xe7e>
 8009bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	029b      	lsls	r3, r3, #10
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bd6:	801a      	strh	r2, [r3, #0]
 8009bd8:	e3ad      	b.n	800a336 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	78db      	ldrb	r3, [r3, #3]
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	f040 8200 	bne.w	8009fec <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 8091 	bne.w	8009d20 <USB_EPStartXfer+0xfd6>
 8009bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c22:	4413      	add	r3, r2
 8009c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	00da      	lsls	r2, r3, #3
 8009c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b3e      	cmp	r3, #62	; 0x3e
 8009c52:	d925      	bls.n	8009ca0 <USB_EPStartXfer+0xf56>
 8009c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f003 031f 	and.w	r3, r3, #31
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d104      	bne.n	8009c84 <USB_EPStartXfer+0xf3a>
 8009c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c9c:	801a      	strh	r2, [r3, #0]
 8009c9e:	e074      	b.n	8009d8a <USB_EPStartXfer+0x1040>
 8009ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d116      	bne.n	8009cde <USB_EPStartXfer+0xf94>
 8009cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cc2:	801a      	strh	r2, [r3, #0]
 8009cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cda:	801a      	strh	r2, [r3, #0]
 8009cdc:	e055      	b.n	8009d8a <USB_EPStartXfer+0x1040>
 8009cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <USB_EPStartXfer+0xfc4>
 8009d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d08:	3301      	adds	r3, #1
 8009d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	029b      	lsls	r3, r3, #10
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d1c:	801a      	strh	r2, [r3, #0]
 8009d1e:	e034      	b.n	8009d8a <USB_EPStartXfer+0x1040>
 8009d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	785b      	ldrb	r3, [r3, #1]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d12c      	bne.n	8009d8a <USB_EPStartXfer+0x1040>
 8009d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d54:	4413      	add	r3, r2
 8009d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	00da      	lsls	r2, r3, #3
 8009d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d88:	801a      	strh	r2, [r3, #0]
 8009d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	785b      	ldrb	r3, [r3, #1]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f040 8091 	bne.w	8009ecc <USB_EPStartXfer+0x1182>
 8009daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	461a      	mov	r2, r3
 8009dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dce:	4413      	add	r3, r2
 8009dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	00da      	lsls	r2, r3, #3
 8009de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009de6:	4413      	add	r3, r2
 8009de8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8009dfe:	d925      	bls.n	8009e4c <USB_EPStartXfer+0x1102>
 8009e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 031f 	and.w	r3, r3, #31
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d104      	bne.n	8009e30 <USB_EPStartXfer+0x10e6>
 8009e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	029b      	lsls	r3, r3, #10
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	e06d      	b.n	8009f28 <USB_EPStartXfer+0x11de>
 8009e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d116      	bne.n	8009e8a <USB_EPStartXfer+0x1140>
 8009e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e6e:	801a      	strh	r2, [r3, #0]
 8009e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	e04e      	b.n	8009f28 <USB_EPStartXfer+0x11de>
 8009e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d004      	beq.n	8009eba <USB_EPStartXfer+0x1170>
 8009eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	029b      	lsls	r3, r3, #10
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	e02d      	b.n	8009f28 <USB_EPStartXfer+0x11de>
 8009ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	785b      	ldrb	r3, [r3, #1]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d125      	bne.n	8009f28 <USB_EPStartXfer+0x11de>
 8009edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	461a      	mov	r2, r3
 8009eee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	00da      	lsls	r2, r3, #3
 8009f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f26:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 81fe 	beq.w	800a336 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d005      	beq.n	8009f72 <USB_EPStartXfer+0x1228>
 8009f66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10d      	bne.n	8009f8e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f040 81db 	bne.w	800a336 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 81d4 	bne.w	800a336 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	441a      	add	r2, r3
 8009fd2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	8013      	strh	r3, [r2, #0]
 8009fea:	e1a4      	b.n	800a336 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	78db      	ldrb	r3, [r3, #3]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	f040 819a 	bne.w	800a332 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d917      	bls.n	800a04a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699a      	ldr	r2, [r3, #24]
 800a036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a03a:	1ad2      	subs	r2, r2, r3
 800a03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	619a      	str	r2, [r3, #24]
 800a048:	e00e      	b.n	800a068 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2200      	movs	r2, #0
 800a066:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d178      	bne.n	800a16a <USB_EPStartXfer+0x1420>
 800a078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a07c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a094:	b29b      	uxth	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a09c:	4413      	add	r3, r2
 800a09e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	00da      	lsls	r2, r3, #3
 800a0b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c2:	2b3e      	cmp	r3, #62	; 0x3e
 800a0c4:	d91d      	bls.n	800a102 <USB_EPStartXfer+0x13b8>
 800a0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ca:	095b      	lsrs	r3, r3, #5
 800a0cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d4:	f003 031f 	and.w	r3, r3, #31
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d104      	bne.n	800a0e6 <USB_EPStartXfer+0x139c>
 800a0dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	029b      	lsls	r3, r3, #10
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0fe:	801a      	strh	r2, [r3, #0]
 800a100:	e064      	b.n	800a1cc <USB_EPStartXfer+0x1482>
 800a102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a106:	2b00      	cmp	r3, #0
 800a108:	d116      	bne.n	800a138 <USB_EPStartXfer+0x13ee>
 800a10a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a116:	b29a      	uxth	r2, r3
 800a118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a11c:	801a      	strh	r2, [r3, #0]
 800a11e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a12a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a12e:	b29a      	uxth	r2, r3
 800a130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a134:	801a      	strh	r2, [r3, #0]
 800a136:	e049      	b.n	800a1cc <USB_EPStartXfer+0x1482>
 800a138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13c:	085b      	lsrs	r3, r3, #1
 800a13e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d004      	beq.n	800a158 <USB_EPStartXfer+0x140e>
 800a14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a152:	3301      	adds	r3, #1
 800a154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	029b      	lsls	r3, r3, #10
 800a160:	b29a      	uxth	r2, r3
 800a162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a166:	801a      	strh	r2, [r3, #0]
 800a168:	e030      	b.n	800a1cc <USB_EPStartXfer+0x1482>
 800a16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	785b      	ldrb	r3, [r3, #1]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d128      	bne.n	800a1cc <USB_EPStartXfer+0x1482>
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a196:	b29b      	uxth	r3, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a19e:	4413      	add	r3, r2
 800a1a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	00da      	lsls	r2, r3, #3
 800a1b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a1ca:	801a      	strh	r2, [r3, #0]
 800a1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d178      	bne.n	800a2dc <USB_EPStartXfer+0x1592>
 800a1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a206:	b29b      	uxth	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a20e:	4413      	add	r3, r2
 800a210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	00da      	lsls	r2, r3, #3
 800a222:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a226:	4413      	add	r3, r2
 800a228:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a22c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a234:	2b3e      	cmp	r3, #62	; 0x3e
 800a236:	d91d      	bls.n	800a274 <USB_EPStartXfer+0x152a>
 800a238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23c:	095b      	lsrs	r3, r3, #5
 800a23e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a246:	f003 031f 	and.w	r3, r3, #31
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d104      	bne.n	800a258 <USB_EPStartXfer+0x150e>
 800a24e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a252:	3b01      	subs	r3, #1
 800a254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	029b      	lsls	r3, r3, #10
 800a260:	b29b      	uxth	r3, r3
 800a262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a270:	801a      	strh	r2, [r3, #0]
 800a272:	e060      	b.n	800a336 <USB_EPStartXfer+0x15ec>
 800a274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d116      	bne.n	800a2aa <USB_EPStartXfer+0x1560>
 800a27c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	b29b      	uxth	r3, r3
 800a284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a288:	b29a      	uxth	r2, r3
 800a28a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a29c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	e045      	b.n	800a336 <USB_EPStartXfer+0x15ec>
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d004      	beq.n	800a2ca <USB_EPStartXfer+0x1580>
 800a2c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a2ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	029b      	lsls	r3, r3, #10
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2d8:	801a      	strh	r2, [r3, #0]
 800a2da:	e02c      	b.n	800a336 <USB_EPStartXfer+0x15ec>
 800a2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	785b      	ldrb	r3, [r3, #1]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d124      	bne.n	800a336 <USB_EPStartXfer+0x15ec>
 800a2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a302:	4413      	add	r3, r2
 800a304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	00da      	lsls	r2, r3, #3
 800a316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a31a:	4413      	add	r3, r2
 800a31c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a328:	b29a      	uxth	r2, r3
 800a32a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	e001      	b.n	800a336 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e03a      	b.n	800a3ac <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a360:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a364:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a368:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a36c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a370:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a374:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a39a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a39e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b085      	sub	sp, #20
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	785b      	ldrb	r3, [r3, #1]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d020      	beq.n	800a40a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3de:	81bb      	strh	r3, [r7, #12]
 800a3e0:	89bb      	ldrh	r3, [r7, #12]
 800a3e2:	f083 0310 	eor.w	r3, r3, #16
 800a3e6:	81bb      	strh	r3, [r7, #12]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	441a      	add	r2, r3
 800a3f2:	89bb      	ldrh	r3, [r7, #12]
 800a3f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a404:	b29b      	uxth	r3, r3
 800a406:	8013      	strh	r3, [r2, #0]
 800a408:	e01f      	b.n	800a44a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a420:	81fb      	strh	r3, [r7, #14]
 800a422:	89fb      	ldrh	r3, [r7, #14]
 800a424:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a428:	81fb      	strh	r3, [r7, #14]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	441a      	add	r2, r3
 800a434:	89fb      	ldrh	r3, [r7, #14]
 800a436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a43a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a43e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a446:	b29b      	uxth	r3, r3
 800a448:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	7b1b      	ldrb	r3, [r3, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 809d 	bne.w	800a5a6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d04c      	beq.n	800a50e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	823b      	strh	r3, [r7, #16]
 800a482:	8a3b      	ldrh	r3, [r7, #16]
 800a484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01b      	beq.n	800a4c4 <USB_EPClearStall+0x6c>
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	81fb      	strh	r3, [r7, #14]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	441a      	add	r2, r3
 800a4ae:	89fb      	ldrh	r3, [r7, #14]
 800a4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	78db      	ldrb	r3, [r3, #3]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d06c      	beq.n	800a5a6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e2:	81bb      	strh	r3, [r7, #12]
 800a4e4:	89bb      	ldrh	r3, [r7, #12]
 800a4e6:	f083 0320 	eor.w	r3, r3, #32
 800a4ea:	81bb      	strh	r3, [r7, #12]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	441a      	add	r2, r3
 800a4f6:	89bb      	ldrh	r3, [r7, #12]
 800a4f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a508:	b29b      	uxth	r3, r3
 800a50a:	8013      	strh	r3, [r2, #0]
 800a50c:	e04b      	b.n	800a5a6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	82fb      	strh	r3, [r7, #22]
 800a51c:	8afb      	ldrh	r3, [r7, #22]
 800a51e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d01b      	beq.n	800a55e <USB_EPClearStall+0x106>
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a53c:	82bb      	strh	r3, [r7, #20]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	441a      	add	r2, r3
 800a548:	8abb      	ldrh	r3, [r7, #20]
 800a54a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a574:	827b      	strh	r3, [r7, #18]
 800a576:	8a7b      	ldrh	r3, [r7, #18]
 800a578:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a57c:	827b      	strh	r3, [r7, #18]
 800a57e:	8a7b      	ldrh	r3, [r7, #18]
 800a580:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a584:	827b      	strh	r3, [r7, #18]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	441a      	add	r2, r3
 800a590:	8a7b      	ldrh	r3, [r7, #18]
 800a592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a59a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2280      	movs	r2, #128	; 0x80
 800a5ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b085      	sub	sp, #20
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a618:	b29b      	uxth	r3, r3
 800a61a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a61c:	68fb      	ldr	r3, [r7, #12]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b08d      	sub	sp, #52	; 0x34
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	4611      	mov	r1, r2
 800a636:	461a      	mov	r2, r3
 800a638:	460b      	mov	r3, r1
 800a63a:	80fb      	strh	r3, [r7, #6]
 800a63c:	4613      	mov	r3, r2
 800a63e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a640:	88bb      	ldrh	r3, [r7, #4]
 800a642:	3301      	adds	r3, #1
 800a644:	085b      	lsrs	r3, r3, #1
 800a646:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a650:	88fa      	ldrh	r2, [r7, #6]
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a660:	e01b      	b.n	800a69a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	3301      	adds	r3, #1
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	021b      	lsls	r3, r3, #8
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	b29a      	uxth	r2, r3
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	3302      	adds	r3, #2
 800a68c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	3301      	adds	r3, #1
 800a692:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	3b01      	subs	r3, #1
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e0      	bne.n	800a662 <USB_WritePMA+0x38>
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	3734      	adds	r7, #52	; 0x34
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b08b      	sub	sp, #44	; 0x2c
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	460b      	mov	r3, r1
 800a6be:	80fb      	strh	r3, [r7, #6]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a6c4:	88bb      	ldrh	r3, [r7, #4]
 800a6c6:	085b      	lsrs	r3, r3, #1
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6d4:	88fa      	ldrh	r2, [r7, #6]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6de:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e4:	e018      	b.n	800a718 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	3302      	adds	r3, #2
 800a6f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	3301      	adds	r3, #1
 800a700:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	0a1b      	lsrs	r3, r3, #8
 800a706:	b2da      	uxtb	r2, r3
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	3301      	adds	r3, #1
 800a710:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	3b01      	subs	r3, #1
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e3      	bne.n	800a6e6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a71e:	88bb      	ldrh	r3, [r7, #4]
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	b29b      	uxth	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d007      	beq.n	800a73a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	b2da      	uxtb	r2, r3
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	701a      	strb	r2, [r3, #0]
  }
}
 800a73a:	bf00      	nop
 800a73c:	372c      	adds	r7, #44	; 0x2c
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	460b      	mov	r3, r1
 800a750:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a752:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a756:	f002 f901 	bl	800c95c <USBD_static_malloc>
 800a75a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d105      	bne.n	800a76e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a76a:	2302      	movs	r3, #2
 800a76c:	e066      	b.n	800a83c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	7c1b      	ldrb	r3, [r3, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d119      	bne.n	800a7b2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a77e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a782:	2202      	movs	r2, #2
 800a784:	2181      	movs	r1, #129	; 0x81
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 ff8d 	bl	800c6a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a796:	2202      	movs	r2, #2
 800a798:	2101      	movs	r1, #1
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f001 ff83 	bl	800c6a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2210      	movs	r2, #16
 800a7ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a7b0:	e016      	b.n	800a7e0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7b2:	2340      	movs	r3, #64	; 0x40
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	2181      	movs	r1, #129	; 0x81
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 ff74 	bl	800c6a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7c4:	2340      	movs	r3, #64	; 0x40
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f001 ff6b 	bl	800c6a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	2203      	movs	r2, #3
 800a7e4:	2182      	movs	r1, #130	; 0x82
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 ff5d 	bl	800c6a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	7c1b      	ldrb	r3, [r3, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d109      	bne.n	800a82a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a81c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a820:	2101      	movs	r1, #1
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f002 f82f 	bl	800c886 <USBD_LL_PrepareReceive>
 800a828:	e007      	b.n	800a83a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a830:	2340      	movs	r3, #64	; 0x40
 800a832:	2101      	movs	r1, #1
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f002 f826 	bl	800c886 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a850:	2181      	movs	r1, #129	; 0x81
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 ff4d 	bl	800c6f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a85e:	2101      	movs	r1, #1
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 ff46 	bl	800c6f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a86e:	2182      	movs	r1, #130	; 0x82
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f001 ff3e 	bl	800c6f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00e      	beq.n	800a8ae <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f002 f869 	bl	800c978 <USBD_static_free>
    pdev->pClassData = NULL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e0af      	b.n	800aa40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d03f      	beq.n	800a96c <USBD_CDC_Setup+0xb4>
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	f040 809f 	bne.w	800aa30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	88db      	ldrh	r3, [r3, #6]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d02e      	beq.n	800a958 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	b25b      	sxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	da16      	bge.n	800a932 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a910:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	88d2      	ldrh	r2, [r2, #6]
 800a916:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	88db      	ldrh	r3, [r3, #6]
 800a91c:	2b07      	cmp	r3, #7
 800a91e:	bf28      	it	cs
 800a920:	2307      	movcs	r3, #7
 800a922:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	89fa      	ldrh	r2, [r7, #14]
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f001 facf 	bl	800bece <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a930:	e085      	b.n	800aa3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	785a      	ldrb	r2, [r3, #1]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	88db      	ldrh	r3, [r3, #6]
 800a940:	b2da      	uxtb	r2, r3
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a948:	6939      	ldr	r1, [r7, #16]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	88db      	ldrh	r3, [r3, #6]
 800a94e:	461a      	mov	r2, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 fae8 	bl	800bf26 <USBD_CtlPrepareRx>
      break;
 800a956:	e072      	b.n	800aa3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	7850      	ldrb	r0, [r2, #1]
 800a964:	2200      	movs	r2, #0
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	4798      	blx	r3
      break;
 800a96a:	e068      	b.n	800aa3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	2b0b      	cmp	r3, #11
 800a972:	d852      	bhi.n	800aa1a <USBD_CDC_Setup+0x162>
 800a974:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <USBD_CDC_Setup+0xc4>)
 800a976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97a:	bf00      	nop
 800a97c:	0800a9ad 	.word	0x0800a9ad
 800a980:	0800aa29 	.word	0x0800aa29
 800a984:	0800aa1b 	.word	0x0800aa1b
 800a988:	0800aa1b 	.word	0x0800aa1b
 800a98c:	0800aa1b 	.word	0x0800aa1b
 800a990:	0800aa1b 	.word	0x0800aa1b
 800a994:	0800aa1b 	.word	0x0800aa1b
 800a998:	0800aa1b 	.word	0x0800aa1b
 800a99c:	0800aa1b 	.word	0x0800aa1b
 800a9a0:	0800aa1b 	.word	0x0800aa1b
 800a9a4:	0800a9d7 	.word	0x0800a9d7
 800a9a8:	0800aa01 	.word	0x0800aa01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d107      	bne.n	800a9c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9b8:	f107 030a 	add.w	r3, r7, #10
 800a9bc:	2202      	movs	r2, #2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 fa84 	bl	800bece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9c6:	e032      	b.n	800aa2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 fa0e 	bl	800bdec <USBD_CtlError>
            ret = USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d4:	e02b      	b.n	800aa2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d107      	bne.n	800a9f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9e2:	f107 030d 	add.w	r3, r7, #13
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fa6f 	bl	800bece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9f0:	e01d      	b.n	800aa2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 f9f9 	bl	800bdec <USBD_CtlError>
            ret = USBD_FAIL;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a9fe:	e016      	b.n	800aa2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d00f      	beq.n	800aa2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 f9ec 	bl	800bdec <USBD_CtlError>
            ret = USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa18:	e008      	b.n	800aa2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 f9e5 	bl	800bdec <USBD_CtlError>
          ret = USBD_FAIL;
 800aa22:	2303      	movs	r3, #3
 800aa24:	75fb      	strb	r3, [r7, #23]
          break;
 800aa26:	e002      	b.n	800aa2e <USBD_CDC_Setup+0x176>
          break;
 800aa28:	bf00      	nop
 800aa2a:	e008      	b.n	800aa3e <USBD_CDC_Setup+0x186>
          break;
 800aa2c:	bf00      	nop
      }
      break;
 800aa2e:	e006      	b.n	800aa3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f001 f9da 	bl	800bdec <USBD_CtlError>
      ret = USBD_FAIL;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e04f      	b.n	800ab0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aa72:	78fa      	ldrb	r2, [r7, #3]
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	4613      	mov	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	440b      	add	r3, r1
 800aa80:	3318      	adds	r3, #24
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d029      	beq.n	800aadc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa88:	78fa      	ldrb	r2, [r7, #3]
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	3318      	adds	r3, #24
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	78f9      	ldrb	r1, [r7, #3]
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	440b      	add	r3, r1
 800aaa4:	00db      	lsls	r3, r3, #3
 800aaa6:	4403      	add	r3, r0
 800aaa8:	3338      	adds	r3, #56	; 0x38
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	fbb2 f1f3 	udiv	r1, r2, r3
 800aab0:	fb01 f303 	mul.w	r3, r1, r3
 800aab4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d110      	bne.n	800aadc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	440b      	add	r3, r1
 800aac8:	3318      	adds	r3, #24
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aace:	78f9      	ldrb	r1, [r7, #3]
 800aad0:	2300      	movs	r3, #0
 800aad2:	2200      	movs	r2, #0
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 feb5 	bl	800c844 <USBD_LL_Transmit>
 800aada:	e015      	b.n	800ab08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ab04:	78fa      	ldrb	r2, [r7, #3]
 800ab06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e015      	b.n	800ab60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab34:	78fb      	ldrb	r3, [r7, #3]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 fec5 	bl	800c8c8 <USBD_LL_GetRxDataSize>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e01b      	b.n	800abba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d015      	beq.n	800abb8 <USBD_CDC_EP0_RxReady+0x50>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab92:	2bff      	cmp	r3, #255	; 0xff
 800ab94:	d010      	beq.n	800abb8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800aba4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800abac:	b292      	uxth	r2, r2
 800abae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	22ff      	movs	r2, #255	; 0xff
 800abb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2243      	movs	r2, #67	; 0x43
 800abd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800abd2:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	200000d8 	.word	0x200000d8

0800abe4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2243      	movs	r2, #67	; 0x43
 800abf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800abf2:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	20000094 	.word	0x20000094

0800ac04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2243      	movs	r2, #67	; 0x43
 800ac10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ac12:	4b03      	ldr	r3, [pc, #12]	; (800ac20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	2000011c 	.word	0x2000011c

0800ac24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	220a      	movs	r2, #10
 800ac30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000050 	.word	0x20000050

0800ac44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e004      	b.n	800ac62 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b087      	sub	sp, #28
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	60b9      	str	r1, [r7, #8]
 800ac78:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac80:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e008      	b.n	800ac9e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e004      	b.n	800acd0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800acec:	2301      	movs	r3, #1
 800acee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e01a      	b.n	800ad34 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d114      	bne.n	800ad32 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad26:	2181      	movs	r1, #129	; 0x81
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 fd8b 	bl	800c844 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e016      	b.n	800ad88 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7c1b      	ldrb	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 fd89 	bl	800c886 <USBD_LL_PrepareReceive>
 800ad74:	e007      	b.n	800ad86 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad7c:	2340      	movs	r3, #64	; 0x40
 800ad7e:	2101      	movs	r1, #1
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 fd80 	bl	800c886 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e01f      	b.n	800ade8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	79fa      	ldrb	r2, [r7, #7]
 800adda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f001 fbe7 	bl	800c5b0 <USBD_LL_Init>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d101      	bne.n	800ae08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e016      	b.n	800ae36 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00b      	beq.n	800ae34 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	f107 020e 	add.w	r2, r7, #14
 800ae28:	4610      	mov	r0, r2
 800ae2a:	4798      	blx	r3
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 fc12 	bl	800c670 <USBD_LL_Start>
 800ae4c:	4603      	mov	r3, r0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d009      	beq.n	800ae9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	78fa      	ldrb	r2, [r7, #3]
 800ae90:	4611      	mov	r1, r2
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	4798      	blx	r3
 800ae96:	4603      	mov	r3, r0
 800ae98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	4611      	mov	r1, r2
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
  }

  return USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 ff46 	bl	800bd78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aefa:	461a      	mov	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af08:	f003 031f 	and.w	r3, r3, #31
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d01a      	beq.n	800af46 <USBD_LL_SetupStage+0x72>
 800af10:	2b02      	cmp	r3, #2
 800af12:	d822      	bhi.n	800af5a <USBD_LL_SetupStage+0x86>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <USBD_LL_SetupStage+0x4a>
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d00a      	beq.n	800af32 <USBD_LL_SetupStage+0x5e>
 800af1c:	e01d      	b.n	800af5a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f9ee 	bl	800b308 <USBD_StdDevReq>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]
      break;
 800af30:	e020      	b.n	800af74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa52 	bl	800b3e4 <USBD_StdItfReq>
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]
      break;
 800af44:	e016      	b.n	800af74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa91 	bl	800b476 <USBD_StdEPReq>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]
      break;
 800af58:	e00c      	b.n	800af74 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af64:	b2db      	uxtb	r3, r3
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 fbe1 	bl	800c730 <USBD_LL_StallEP>
 800af6e:	4603      	mov	r3, r0
 800af70:	73fb      	strb	r3, [r7, #15]
      break;
 800af72:	bf00      	nop
  }

  return ret;
 800af74:	7bfb      	ldrb	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b086      	sub	sp, #24
 800af82:	af00      	add	r7, sp, #0
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	460b      	mov	r3, r1
 800af88:	607a      	str	r2, [r7, #4]
 800af8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af8c:	7afb      	ldrb	r3, [r7, #11]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d138      	bne.n	800b004 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d14a      	bne.n	800b03a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	429a      	cmp	r2, r3
 800afae:	d913      	bls.n	800afd8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	1ad2      	subs	r2, r2, r3
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	4293      	cmp	r3, r2
 800afc8:	bf28      	it	cs
 800afca:	4613      	movcs	r3, r2
 800afcc:	461a      	mov	r2, r3
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 ffc5 	bl	800bf60 <USBD_CtlContinueRx>
 800afd6:	e030      	b.n	800b03a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d10b      	bne.n	800affc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 ffc0 	bl	800bf82 <USBD_CtlSendStatus>
 800b002:	e01a      	b.n	800b03a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d114      	bne.n	800b03a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	7afa      	ldrb	r2, [r7, #11]
 800b026:	4611      	mov	r1, r2
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	4798      	blx	r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	e000      	b.n	800b03c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	460b      	mov	r3, r1
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b052:	7afb      	ldrb	r3, [r7, #11]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d16b      	bne.n	800b130 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3314      	adds	r3, #20
 800b05c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b064:	2b02      	cmp	r3, #2
 800b066:	d156      	bne.n	800b116 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	429a      	cmp	r2, r3
 800b072:	d914      	bls.n	800b09e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	1ad2      	subs	r2, r2, r3
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	461a      	mov	r2, r3
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 ff3a 	bl	800bf04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b090:	2300      	movs	r3, #0
 800b092:	2200      	movs	r2, #0
 800b094:	2100      	movs	r1, #0
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f001 fbf5 	bl	800c886 <USBD_LL_PrepareReceive>
 800b09c:	e03b      	b.n	800b116 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	68da      	ldr	r2, [r3, #12]
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d11c      	bne.n	800b0e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d316      	bcc.n	800b0e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d20f      	bcs.n	800b0e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 ff1b 	bl	800bf04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2100      	movs	r1, #0
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f001 fbd2 	bl	800c886 <USBD_LL_PrepareReceive>
 800b0e2:	e018      	b.n	800b116 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d10b      	bne.n	800b108 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d005      	beq.n	800b108 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b108:	2180      	movs	r1, #128	; 0x80
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f001 fb10 	bl	800c730 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 ff49 	bl	800bfa8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d122      	bne.n	800b166 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f7ff fe98 	bl	800ae56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b12e:	e01a      	b.n	800b166 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d114      	bne.n	800b166 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00e      	beq.n	800b166 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	7afa      	ldrb	r2, [r7, #11]
 800b152:	4611      	mov	r1, r2
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	4798      	blx	r3
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	e000      	b.n	800b168 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e02f      	b.n	800b204 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00f      	beq.n	800b1ce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d009      	beq.n	800b1ce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	6852      	ldr	r2, [r2, #4]
 800b1c6:	b2d2      	uxtb	r2, r2
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1ce:	2340      	movs	r3, #64	; 0x40
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 fa66 	bl	800c6a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2240      	movs	r2, #64	; 0x40
 800b1e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2180      	movs	r1, #128	; 0x80
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f001 fa58 	bl	800c6a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2240      	movs	r2, #64	; 0x40
 800b200:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2204      	movs	r2, #4
 800b246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d106      	bne.n	800b27a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b272:	b2da      	uxtb	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e012      	b.n	800b2c4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d10b      	bne.n	800b2c2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b2ea:	8a3b      	ldrh	r3, [r7, #16]
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	b21a      	sxth	r2, r3
 800b2f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	b21b      	sxth	r3, r3
 800b2f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b2fa:	89fb      	ldrh	r3, [r7, #14]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	371c      	adds	r7, #28
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	d005      	beq.n	800b32e <USBD_StdDevReq+0x26>
 800b322:	2b40      	cmp	r3, #64	; 0x40
 800b324:	d853      	bhi.n	800b3ce <USBD_StdDevReq+0xc6>
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00b      	beq.n	800b342 <USBD_StdDevReq+0x3a>
 800b32a:	2b20      	cmp	r3, #32
 800b32c:	d14f      	bne.n	800b3ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	4798      	blx	r3
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
      break;
 800b340:	e04a      	b.n	800b3d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	2b09      	cmp	r3, #9
 800b348:	d83b      	bhi.n	800b3c2 <USBD_StdDevReq+0xba>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <USBD_StdDevReq+0x48>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b3b9 	.word	0x0800b3b9
 800b358:	0800b3c3 	.word	0x0800b3c3
 800b35c:	0800b3af 	.word	0x0800b3af
 800b360:	0800b3c3 	.word	0x0800b3c3
 800b364:	0800b383 	.word	0x0800b383
 800b368:	0800b379 	.word	0x0800b379
 800b36c:	0800b3c3 	.word	0x0800b3c3
 800b370:	0800b39b 	.word	0x0800b39b
 800b374:	0800b38d 	.word	0x0800b38d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f9de 	bl	800b73c <USBD_GetDescriptor>
          break;
 800b380:	e024      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fb6d 	bl	800ba64 <USBD_SetAddress>
          break;
 800b38a:	e01f      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fbac 	bl	800baec <USBD_SetConfig>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]
          break;
 800b398:	e018      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fc4b 	bl	800bc38 <USBD_GetConfig>
          break;
 800b3a2:	e013      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fc7c 	bl	800bca4 <USBD_GetStatus>
          break;
 800b3ac:	e00e      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fcab 	bl	800bd0c <USBD_SetFeature>
          break;
 800b3b6:	e009      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fcba 	bl	800bd34 <USBD_ClrFeature>
          break;
 800b3c0:	e004      	b.n	800b3cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fd11 	bl	800bdec <USBD_CtlError>
          break;
 800b3ca:	bf00      	nop
      }
      break;
 800b3cc:	e004      	b.n	800b3d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fd0b 	bl	800bdec <USBD_CtlError>
      break;
 800b3d6:	bf00      	nop
  }

  return ret;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop

0800b3e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3fa:	2b40      	cmp	r3, #64	; 0x40
 800b3fc:	d005      	beq.n	800b40a <USBD_StdItfReq+0x26>
 800b3fe:	2b40      	cmp	r3, #64	; 0x40
 800b400:	d82f      	bhi.n	800b462 <USBD_StdItfReq+0x7e>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <USBD_StdItfReq+0x26>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d12b      	bne.n	800b462 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b410:	b2db      	uxtb	r3, r3
 800b412:	3b01      	subs	r3, #1
 800b414:	2b02      	cmp	r3, #2
 800b416:	d81d      	bhi.n	800b454 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	889b      	ldrh	r3, [r3, #4]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d813      	bhi.n	800b44a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	4798      	blx	r3
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	88db      	ldrh	r3, [r3, #6]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d110      	bne.n	800b45e <USBD_StdItfReq+0x7a>
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10d      	bne.n	800b45e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fd9d 	bl	800bf82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b448:	e009      	b.n	800b45e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fccd 	bl	800bdec <USBD_CtlError>
          break;
 800b452:	e004      	b.n	800b45e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fcc8 	bl	800bdec <USBD_CtlError>
          break;
 800b45c:	e000      	b.n	800b460 <USBD_StdItfReq+0x7c>
          break;
 800b45e:	bf00      	nop
      }
      break;
 800b460:	e004      	b.n	800b46c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fcc1 	bl	800bdec <USBD_CtlError>
      break;
 800b46a:	bf00      	nop
  }

  return ret;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	889b      	ldrh	r3, [r3, #4]
 800b488:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b492:	2b40      	cmp	r3, #64	; 0x40
 800b494:	d007      	beq.n	800b4a6 <USBD_StdEPReq+0x30>
 800b496:	2b40      	cmp	r3, #64	; 0x40
 800b498:	f200 8145 	bhi.w	800b726 <USBD_StdEPReq+0x2b0>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00c      	beq.n	800b4ba <USBD_StdEPReq+0x44>
 800b4a0:	2b20      	cmp	r3, #32
 800b4a2:	f040 8140 	bne.w	800b726 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	4798      	blx	r3
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4b8:	e13a      	b.n	800b730 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d007      	beq.n	800b4d2 <USBD_StdEPReq+0x5c>
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	f300 8129 	bgt.w	800b71a <USBD_StdEPReq+0x2a4>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d07f      	beq.n	800b5cc <USBD_StdEPReq+0x156>
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d03c      	beq.n	800b54a <USBD_StdEPReq+0xd4>
 800b4d0:	e123      	b.n	800b71a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d002      	beq.n	800b4e4 <USBD_StdEPReq+0x6e>
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d016      	beq.n	800b510 <USBD_StdEPReq+0x9a>
 800b4e2:	e02c      	b.n	800b53e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00d      	beq.n	800b506 <USBD_StdEPReq+0x90>
 800b4ea:	7bbb      	ldrb	r3, [r7, #14]
 800b4ec:	2b80      	cmp	r3, #128	; 0x80
 800b4ee:	d00a      	beq.n	800b506 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f001 f91b 	bl	800c730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4fa:	2180      	movs	r1, #128	; 0x80
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f001 f917 	bl	800c730 <USBD_LL_StallEP>
 800b502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b504:	e020      	b.n	800b548 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fc6f 	bl	800bdec <USBD_CtlError>
              break;
 800b50e:	e01b      	b.n	800b548 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	885b      	ldrh	r3, [r3, #2]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10e      	bne.n	800b536 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00b      	beq.n	800b536 <USBD_StdEPReq+0xc0>
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
 800b520:	2b80      	cmp	r3, #128	; 0x80
 800b522:	d008      	beq.n	800b536 <USBD_StdEPReq+0xc0>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	88db      	ldrh	r3, [r3, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f001 f8fd 	bl	800c730 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fd23 	bl	800bf82 <USBD_CtlSendStatus>

              break;
 800b53c:	e004      	b.n	800b548 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fc53 	bl	800bdec <USBD_CtlError>
              break;
 800b546:	bf00      	nop
          }
          break;
 800b548:	e0ec      	b.n	800b724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b550:	b2db      	uxtb	r3, r3
 800b552:	2b02      	cmp	r3, #2
 800b554:	d002      	beq.n	800b55c <USBD_StdEPReq+0xe6>
 800b556:	2b03      	cmp	r3, #3
 800b558:	d016      	beq.n	800b588 <USBD_StdEPReq+0x112>
 800b55a:	e030      	b.n	800b5be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00d      	beq.n	800b57e <USBD_StdEPReq+0x108>
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	2b80      	cmp	r3, #128	; 0x80
 800b566:	d00a      	beq.n	800b57e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 f8df 	bl	800c730 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b572:	2180      	movs	r1, #128	; 0x80
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f001 f8db 	bl	800c730 <USBD_LL_StallEP>
 800b57a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b57c:	e025      	b.n	800b5ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fc33 	bl	800bdec <USBD_CtlError>
              break;
 800b586:	e020      	b.n	800b5ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	885b      	ldrh	r3, [r3, #2]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d11b      	bne.n	800b5c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b596:	2b00      	cmp	r3, #0
 800b598:	d004      	beq.n	800b5a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 f8e5 	bl	800c76e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fcec 	bl	800bf82 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b5bc:	e004      	b.n	800b5c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fc13 	bl	800bdec <USBD_CtlError>
              break;
 800b5c6:	e000      	b.n	800b5ca <USBD_StdEPReq+0x154>
              break;
 800b5c8:	bf00      	nop
          }
          break;
 800b5ca:	e0ab      	b.n	800b724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d002      	beq.n	800b5de <USBD_StdEPReq+0x168>
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d032      	beq.n	800b642 <USBD_StdEPReq+0x1cc>
 800b5dc:	e097      	b.n	800b70e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5de:	7bbb      	ldrb	r3, [r7, #14]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d007      	beq.n	800b5f4 <USBD_StdEPReq+0x17e>
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	2b80      	cmp	r3, #128	; 0x80
 800b5e8:	d004      	beq.n	800b5f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fbfd 	bl	800bdec <USBD_CtlError>
                break;
 800b5f2:	e091      	b.n	800b718 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	da0b      	bge.n	800b614 <USBD_StdEPReq+0x19e>
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	3310      	adds	r3, #16
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4413      	add	r3, r2
 800b610:	3304      	adds	r3, #4
 800b612:	e00b      	b.n	800b62c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	3304      	adds	r3, #4
 800b62c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2202      	movs	r2, #2
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc47 	bl	800bece <USBD_CtlSendData>
              break;
 800b640:	e06a      	b.n	800b718 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b646:	2b00      	cmp	r3, #0
 800b648:	da11      	bge.n	800b66e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	f003 020f 	and.w	r2, r3, #15
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	3324      	adds	r3, #36	; 0x24
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d117      	bne.n	800b694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fbc0 	bl	800bdec <USBD_CtlError>
                  break;
 800b66c:	e054      	b.n	800b718 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	f003 020f 	and.w	r2, r3, #15
 800b674:	6879      	ldr	r1, [r7, #4]
 800b676:	4613      	mov	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	440b      	add	r3, r1
 800b680:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d104      	bne.n	800b694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fbad 	bl	800bdec <USBD_CtlError>
                  break;
 800b692:	e041      	b.n	800b718 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	da0b      	bge.n	800b6b4 <USBD_StdEPReq+0x23e>
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	3310      	adds	r3, #16
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	e00b      	b.n	800b6cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <USBD_StdEPReq+0x264>
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
 800b6d6:	2b80      	cmp	r3, #128	; 0x80
 800b6d8:	d103      	bne.n	800b6e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	e00e      	b.n	800b700 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 f860 	bl	800c7ac <USBD_LL_IsStallEP>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	e002      	b.n	800b700 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2202      	movs	r2, #2
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fbe1 	bl	800bece <USBD_CtlSendData>
              break;
 800b70c:	e004      	b.n	800b718 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b70e:	6839      	ldr	r1, [r7, #0]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fb6b 	bl	800bdec <USBD_CtlError>
              break;
 800b716:	bf00      	nop
          }
          break;
 800b718:	e004      	b.n	800b724 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fb65 	bl	800bdec <USBD_CtlError>
          break;
 800b722:	bf00      	nop
      }
      break;
 800b724:	e004      	b.n	800b730 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fb5f 	bl	800bdec <USBD_CtlError>
      break;
 800b72e:	bf00      	nop
  }

  return ret;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	885b      	ldrh	r3, [r3, #2]
 800b756:	0a1b      	lsrs	r3, r3, #8
 800b758:	b29b      	uxth	r3, r3
 800b75a:	3b01      	subs	r3, #1
 800b75c:	2b0e      	cmp	r3, #14
 800b75e:	f200 8152 	bhi.w	800ba06 <USBD_GetDescriptor+0x2ca>
 800b762:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <USBD_GetDescriptor+0x2c>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b7d9 	.word	0x0800b7d9
 800b76c:	0800b7f1 	.word	0x0800b7f1
 800b770:	0800b831 	.word	0x0800b831
 800b774:	0800ba07 	.word	0x0800ba07
 800b778:	0800ba07 	.word	0x0800ba07
 800b77c:	0800b9a7 	.word	0x0800b9a7
 800b780:	0800b9d3 	.word	0x0800b9d3
 800b784:	0800ba07 	.word	0x0800ba07
 800b788:	0800ba07 	.word	0x0800ba07
 800b78c:	0800ba07 	.word	0x0800ba07
 800b790:	0800ba07 	.word	0x0800ba07
 800b794:	0800ba07 	.word	0x0800ba07
 800b798:	0800ba07 	.word	0x0800ba07
 800b79c:	0800ba07 	.word	0x0800ba07
 800b7a0:	0800b7a5 	.word	0x0800b7a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7c6:	e126      	b.n	800ba16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fb0e 	bl	800bdec <USBD_CtlError>
        err++;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	72fb      	strb	r3, [r7, #11]
      break;
 800b7d6:	e11e      	b.n	800ba16 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	7c12      	ldrb	r2, [r2, #16]
 800b7e4:	f107 0108 	add.w	r1, r7, #8
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	4798      	blx	r3
 800b7ec:	60f8      	str	r0, [r7, #12]
      break;
 800b7ee:	e112      	b.n	800ba16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	7c1b      	ldrb	r3, [r3, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10d      	bne.n	800b814 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b800:	f107 0208 	add.w	r2, r7, #8
 800b804:	4610      	mov	r0, r2
 800b806:	4798      	blx	r3
 800b808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	3301      	adds	r3, #1
 800b80e:	2202      	movs	r2, #2
 800b810:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b812:	e100      	b.n	800ba16 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	f107 0208 	add.w	r2, r7, #8
 800b820:	4610      	mov	r0, r2
 800b822:	4798      	blx	r3
 800b824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	3301      	adds	r3, #1
 800b82a:	2202      	movs	r2, #2
 800b82c:	701a      	strb	r2, [r3, #0]
      break;
 800b82e:	e0f2      	b.n	800ba16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	885b      	ldrh	r3, [r3, #2]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b05      	cmp	r3, #5
 800b838:	f200 80ac 	bhi.w	800b994 <USBD_GetDescriptor+0x258>
 800b83c:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <USBD_GetDescriptor+0x108>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b85d 	.word	0x0800b85d
 800b848:	0800b891 	.word	0x0800b891
 800b84c:	0800b8c5 	.word	0x0800b8c5
 800b850:	0800b8f9 	.word	0x0800b8f9
 800b854:	0800b92d 	.word	0x0800b92d
 800b858:	0800b961 	.word	0x0800b961
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00b      	beq.n	800b880 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	7c12      	ldrb	r2, [r2, #16]
 800b874:	f107 0108 	add.w	r1, r7, #8
 800b878:	4610      	mov	r0, r2
 800b87a:	4798      	blx	r3
 800b87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b87e:	e091      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fab2 	bl	800bdec <USBD_CtlError>
            err++;
 800b888:	7afb      	ldrb	r3, [r7, #11]
 800b88a:	3301      	adds	r3, #1
 800b88c:	72fb      	strb	r3, [r7, #11]
          break;
 800b88e:	e089      	b.n	800b9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	7c12      	ldrb	r2, [r2, #16]
 800b8a8:	f107 0108 	add.w	r1, r7, #8
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
 800b8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b2:	e077      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fa98 	bl	800bdec <USBD_CtlError>
            err++;
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8c2:	e06f      	b.n	800b9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00b      	beq.n	800b8e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	7c12      	ldrb	r2, [r2, #16]
 800b8dc:	f107 0108 	add.w	r1, r7, #8
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4798      	blx	r3
 800b8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8e6:	e05d      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fa7e 	bl	800bdec <USBD_CtlError>
            err++;
 800b8f0:	7afb      	ldrb	r3, [r7, #11]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8f6:	e055      	b.n	800b9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7c12      	ldrb	r2, [r2, #16]
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91a:	e043      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa64 	bl	800bdec <USBD_CtlError>
            err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
          break;
 800b92a:	e03b      	b.n	800b9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7c12      	ldrb	r2, [r2, #16]
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94e:	e029      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa4a 	bl	800bdec <USBD_CtlError>
            err++;
 800b958:	7afb      	ldrb	r3, [r7, #11]
 800b95a:	3301      	adds	r3, #1
 800b95c:	72fb      	strb	r3, [r7, #11]
          break;
 800b95e:	e021      	b.n	800b9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7c12      	ldrb	r2, [r2, #16]
 800b978:	f107 0108 	add.w	r1, r7, #8
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b982:	e00f      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa30 	bl	800bdec <USBD_CtlError>
            err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
          break;
 800b992:	e007      	b.n	800b9a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fa28 	bl	800bdec <USBD_CtlError>
          err++;
 800b99c:	7afb      	ldrb	r3, [r7, #11]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b9a2:	bf00      	nop
      }
      break;
 800b9a4:	e037      	b.n	800ba16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7c1b      	ldrb	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d109      	bne.n	800b9c2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b6:	f107 0208 	add.w	r2, r7, #8
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	4798      	blx	r3
 800b9be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9c0:	e029      	b.n	800ba16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fa11 	bl	800bdec <USBD_CtlError>
        err++;
 800b9ca:	7afb      	ldrb	r3, [r7, #11]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b9d0:	e021      	b.n	800ba16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7c1b      	ldrb	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10d      	bne.n	800b9f6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e2:	f107 0208 	add.w	r2, r7, #8
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	4798      	blx	r3
 800b9ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9f4:	e00f      	b.n	800ba16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f9f7 	bl	800bdec <USBD_CtlError>
        err++;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	3301      	adds	r3, #1
 800ba02:	72fb      	strb	r3, [r7, #11]
      break;
 800ba04:	e007      	b.n	800ba16 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f9ef 	bl	800bdec <USBD_CtlError>
      err++;
 800ba0e:	7afb      	ldrb	r3, [r7, #11]
 800ba10:	3301      	adds	r3, #1
 800ba12:	72fb      	strb	r3, [r7, #11]
      break;
 800ba14:	bf00      	nop
  }

  if (err != 0U)
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d11e      	bne.n	800ba5a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	88db      	ldrh	r3, [r3, #6]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d016      	beq.n	800ba52 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ba24:	893b      	ldrh	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00e      	beq.n	800ba48 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	88da      	ldrh	r2, [r3, #6]
 800ba2e:	893b      	ldrh	r3, [r7, #8]
 800ba30:	4293      	cmp	r3, r2
 800ba32:	bf28      	it	cs
 800ba34:	4613      	movcs	r3, r2
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba3a:	893b      	ldrh	r3, [r7, #8]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	68f9      	ldr	r1, [r7, #12]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fa44 	bl	800bece <USBD_CtlSendData>
 800ba46:	e009      	b.n	800ba5c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f9ce 	bl	800bdec <USBD_CtlError>
 800ba50:	e004      	b.n	800ba5c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fa95 	bl	800bf82 <USBD_CtlSendStatus>
 800ba58:	e000      	b.n	800ba5c <USBD_GetDescriptor+0x320>
    return;
 800ba5a:	bf00      	nop
  }
}
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop

0800ba64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	889b      	ldrh	r3, [r3, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d131      	bne.n	800bada <USBD_SetAddress+0x76>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	88db      	ldrh	r3, [r3, #6]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d12d      	bne.n	800bada <USBD_SetAddress+0x76>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	885b      	ldrh	r3, [r3, #2]
 800ba82:	2b7f      	cmp	r3, #127	; 0x7f
 800ba84:	d829      	bhi.n	800bada <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	885b      	ldrh	r3, [r3, #2]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d104      	bne.n	800baa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f9a3 	bl	800bdec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa6:	e01d      	b.n	800bae4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7bfa      	ldrb	r2, [r7, #15]
 800baac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fea6 	bl	800c806 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fa61 	bl	800bf82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d004      	beq.n	800bad0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2202      	movs	r2, #2
 800baca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bace:	e009      	b.n	800bae4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad8:	e004      	b.n	800bae4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f985 	bl	800bdec <USBD_CtlError>
  }
}
 800bae2:	bf00      	nop
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	885b      	ldrh	r3, [r3, #2]
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	4b4c      	ldr	r3, [pc, #304]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb04:	4b4b      	ldr	r3, [pc, #300]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d905      	bls.n	800bb18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f96c 	bl	800bdec <USBD_CtlError>
    return USBD_FAIL;
 800bb14:	2303      	movs	r3, #3
 800bb16:	e088      	b.n	800bc2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d002      	beq.n	800bb2a <USBD_SetConfig+0x3e>
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d025      	beq.n	800bb74 <USBD_SetConfig+0x88>
 800bb28:	e071      	b.n	800bc0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb2a:	4b42      	ldr	r3, [pc, #264]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01c      	beq.n	800bb6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bb32:	4b40      	ldr	r3, [pc, #256]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb3c:	4b3d      	ldr	r3, [pc, #244]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff f992 	bl	800ae6c <USBD_SetClassConfig>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d004      	beq.n	800bb5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f949 	bl	800bdec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb5a:	e065      	b.n	800bc28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fa10 	bl	800bf82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2203      	movs	r2, #3
 800bb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb6a:	e05d      	b.n	800bc28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fa08 	bl	800bf82 <USBD_CtlSendStatus>
      break;
 800bb72:	e059      	b.n	800bc28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb74:	4b2f      	ldr	r3, [pc, #188]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d112      	bne.n	800bba2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2202      	movs	r2, #2
 800bb80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb84:	4b2b      	ldr	r3, [pc, #172]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb8e:	4b29      	ldr	r3, [pc, #164]	; (800bc34 <USBD_SetConfig+0x148>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff f985 	bl	800aea4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f9f1 	bl	800bf82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bba0:	e042      	b.n	800bc28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bba2:	4b24      	ldr	r3, [pc, #144]	; (800bc34 <USBD_SetConfig+0x148>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d02a      	beq.n	800bc06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff f973 	bl	800aea4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bbbe:	4b1d      	ldr	r3, [pc, #116]	; (800bc34 <USBD_SetConfig+0x148>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <USBD_SetConfig+0x148>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7ff f94c 	bl	800ae6c <USBD_SetClassConfig>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00f      	beq.n	800bbfe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f903 	bl	800bdec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	4619      	mov	r1, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff f958 	bl	800aea4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbfc:	e014      	b.n	800bc28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f9bf 	bl	800bf82 <USBD_CtlSendStatus>
      break;
 800bc04:	e010      	b.n	800bc28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f9bb 	bl	800bf82 <USBD_CtlSendStatus>
      break;
 800bc0c:	e00c      	b.n	800bc28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f8eb 	bl	800bdec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc16:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <USBD_SetConfig+0x148>)
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff f941 	bl	800aea4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc22:	2303      	movs	r3, #3
 800bc24:	73fb      	strb	r3, [r7, #15]
      break;
 800bc26:	bf00      	nop
  }

  return ret;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	200005e4 	.word	0x200005e4

0800bc38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	88db      	ldrh	r3, [r3, #6]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d004      	beq.n	800bc54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f8cd 	bl	800bdec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc52:	e023      	b.n	800bc9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	dc02      	bgt.n	800bc66 <USBD_GetConfig+0x2e>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	dc03      	bgt.n	800bc6c <USBD_GetConfig+0x34>
 800bc64:	e015      	b.n	800bc92 <USBD_GetConfig+0x5a>
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d00b      	beq.n	800bc82 <USBD_GetConfig+0x4a>
 800bc6a:	e012      	b.n	800bc92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	3308      	adds	r3, #8
 800bc76:	2201      	movs	r2, #1
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f927 	bl	800bece <USBD_CtlSendData>
        break;
 800bc80:	e00c      	b.n	800bc9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3304      	adds	r3, #4
 800bc86:	2201      	movs	r2, #1
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f91f 	bl	800bece <USBD_CtlSendData>
        break;
 800bc90:	e004      	b.n	800bc9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f8a9 	bl	800bdec <USBD_CtlError>
        break;
 800bc9a:	bf00      	nop
}
 800bc9c:	bf00      	nop
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d81e      	bhi.n	800bcfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	88db      	ldrh	r3, [r3, #6]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d004      	beq.n	800bcce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f890 	bl	800bdec <USBD_CtlError>
        break;
 800bccc:	e01a      	b.n	800bd04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d005      	beq.n	800bcea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	f043 0202 	orr.w	r2, r3, #2
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	330c      	adds	r3, #12
 800bcee:	2202      	movs	r2, #2
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f8eb 	bl	800bece <USBD_CtlSendData>
      break;
 800bcf8:	e004      	b.n	800bd04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 f875 	bl	800bdec <USBD_CtlError>
      break;
 800bd02:	bf00      	nop
  }
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	885b      	ldrh	r3, [r3, #2]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d106      	bne.n	800bd2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f92b 	bl	800bf82 <USBD_CtlSendStatus>
  }
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	3b01      	subs	r3, #1
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d80b      	bhi.n	800bd64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	885b      	ldrh	r3, [r3, #2]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d10c      	bne.n	800bd6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f910 	bl	800bf82 <USBD_CtlSendStatus>
      }
      break;
 800bd62:	e004      	b.n	800bd6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 f840 	bl	800bdec <USBD_CtlError>
      break;
 800bd6c:	e000      	b.n	800bd70 <USBD_ClrFeature+0x3c>
      break;
 800bd6e:	bf00      	nop
  }
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	781a      	ldrb	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff fa92 	bl	800b2cc <SWAPBYTE>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	461a      	mov	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7ff fa85 	bl	800b2cc <SWAPBYTE>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7ff fa78 	bl	800b2cc <SWAPBYTE>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	80da      	strh	r2, [r3, #6]
}
 800bde4:	bf00      	nop
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdf6:	2180      	movs	r1, #128	; 0x80
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fc99 	bl	800c730 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdfe:	2100      	movs	r1, #0
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fc95 	bl	800c730 <USBD_LL_StallEP>
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b086      	sub	sp, #24
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d036      	beq.n	800be92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be28:	6938      	ldr	r0, [r7, #16]
 800be2a:	f000 f836 	bl	800be9a <USBD_GetLen>
 800be2e:	4603      	mov	r3, r0
 800be30:	3301      	adds	r3, #1
 800be32:	b29b      	uxth	r3, r3
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	b29a      	uxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	4413      	add	r3, r2
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	7812      	ldrb	r2, [r2, #0]
 800be46:	701a      	strb	r2, [r3, #0]
  idx++;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	3301      	adds	r3, #1
 800be4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	4413      	add	r3, r2
 800be54:	2203      	movs	r2, #3
 800be56:	701a      	strb	r2, [r3, #0]
  idx++;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	3301      	adds	r3, #1
 800be5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be5e:	e013      	b.n	800be88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	4413      	add	r3, r2
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	3301      	adds	r3, #1
 800be70:	613b      	str	r3, [r7, #16]
    idx++;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	3301      	adds	r3, #1
 800be76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	701a      	strb	r2, [r3, #0]
    idx++;
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	3301      	adds	r3, #1
 800be86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e7      	bne.n	800be60 <USBD_GetString+0x52>
 800be90:	e000      	b.n	800be94 <USBD_GetString+0x86>
    return;
 800be92:	bf00      	nop
  }
}
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800beaa:	e005      	b.n	800beb8 <USBD_GetLen+0x1e>
  {
    len++;
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	3301      	adds	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	3301      	adds	r3, #1
 800beb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f5      	bne.n	800beac <USBD_GetLen+0x12>
  }

  return len;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2202      	movs	r2, #2
 800bede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	2100      	movs	r1, #0
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 fca5 	bl	800c844 <USBD_LL_Transmit>

  return USBD_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	2100      	movs	r1, #0
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 fc94 	bl	800c844 <USBD_LL_Transmit>

  return USBD_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2203      	movs	r2, #3
 800bf36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	2100      	movs	r1, #0
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f000 fc98 	bl	800c886 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 fc87 	bl	800c886 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2204      	movs	r2, #4
 800bf8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf92:	2300      	movs	r3, #0
 800bf94:	2200      	movs	r2, #0
 800bf96:	2100      	movs	r1, #0
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fc53 	bl	800c844 <USBD_LL_Transmit>

  return USBD_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2205      	movs	r2, #5
 800bfb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fc61 	bl	800c886 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4912      	ldr	r1, [pc, #72]	; (800c020 <MX_USB_Device_Init+0x50>)
 800bfd8:	4812      	ldr	r0, [pc, #72]	; (800c024 <MX_USB_Device_Init+0x54>)
 800bfda:	f7fe fed9 	bl	800ad90 <USBD_Init>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bfe4:	f7f5 f966 	bl	80012b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bfe8:	490f      	ldr	r1, [pc, #60]	; (800c028 <MX_USB_Device_Init+0x58>)
 800bfea:	480e      	ldr	r0, [pc, #56]	; (800c024 <MX_USB_Device_Init+0x54>)
 800bfec:	f7fe ff00 	bl	800adf0 <USBD_RegisterClass>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bff6:	f7f5 f95d 	bl	80012b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bffa:	490c      	ldr	r1, [pc, #48]	; (800c02c <MX_USB_Device_Init+0x5c>)
 800bffc:	4809      	ldr	r0, [pc, #36]	; (800c024 <MX_USB_Device_Init+0x54>)
 800bffe:	f7fe fe21 	bl	800ac44 <USBD_CDC_RegisterInterface>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c008:	f7f5 f954 	bl	80012b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c00c:	4805      	ldr	r0, [pc, #20]	; (800c024 <MX_USB_Device_Init+0x54>)
 800c00e:	f7fe ff16 	bl	800ae3e <USBD_Start>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d001      	beq.n	800c01c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c018:	f7f5 f94c 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c01c:	bf00      	nop
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20000174 	.word	0x20000174
 800c024:	200005e8 	.word	0x200005e8
 800c028:	2000005c 	.word	0x2000005c
 800c02c:	20000160 	.word	0x20000160

0800c030 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c034:	2200      	movs	r2, #0
 800c036:	4905      	ldr	r1, [pc, #20]	; (800c04c <CDC_Init_FS+0x1c>)
 800c038:	4805      	ldr	r0, [pc, #20]	; (800c050 <CDC_Init_FS+0x20>)
 800c03a:	f7fe fe18 	bl	800ac6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c03e:	4905      	ldr	r1, [pc, #20]	; (800c054 <CDC_Init_FS+0x24>)
 800c040:	4803      	ldr	r0, [pc, #12]	; (800c050 <CDC_Init_FS+0x20>)
 800c042:	f7fe fe32 	bl	800acaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c046:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c048:	4618      	mov	r0, r3
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	20000ca0 	.word	0x20000ca0
 800c050:	200005e8 	.word	0x200005e8
 800c054:	200008b8 	.word	0x200008b8

0800c058 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c058:	b480      	push	{r7}
 800c05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c05c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c05e:	4618      	mov	r0, r3
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	6039      	str	r1, [r7, #0]
 800c072:	71fb      	strb	r3, [r7, #7]
 800c074:	4613      	mov	r3, r2
 800c076:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	2b23      	cmp	r3, #35	; 0x23
 800c07c:	d84a      	bhi.n	800c114 <CDC_Control_FS+0xac>
 800c07e:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <CDC_Control_FS+0x1c>)
 800c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c084:	0800c115 	.word	0x0800c115
 800c088:	0800c115 	.word	0x0800c115
 800c08c:	0800c115 	.word	0x0800c115
 800c090:	0800c115 	.word	0x0800c115
 800c094:	0800c115 	.word	0x0800c115
 800c098:	0800c115 	.word	0x0800c115
 800c09c:	0800c115 	.word	0x0800c115
 800c0a0:	0800c115 	.word	0x0800c115
 800c0a4:	0800c115 	.word	0x0800c115
 800c0a8:	0800c115 	.word	0x0800c115
 800c0ac:	0800c115 	.word	0x0800c115
 800c0b0:	0800c115 	.word	0x0800c115
 800c0b4:	0800c115 	.word	0x0800c115
 800c0b8:	0800c115 	.word	0x0800c115
 800c0bc:	0800c115 	.word	0x0800c115
 800c0c0:	0800c115 	.word	0x0800c115
 800c0c4:	0800c115 	.word	0x0800c115
 800c0c8:	0800c115 	.word	0x0800c115
 800c0cc:	0800c115 	.word	0x0800c115
 800c0d0:	0800c115 	.word	0x0800c115
 800c0d4:	0800c115 	.word	0x0800c115
 800c0d8:	0800c115 	.word	0x0800c115
 800c0dc:	0800c115 	.word	0x0800c115
 800c0e0:	0800c115 	.word	0x0800c115
 800c0e4:	0800c115 	.word	0x0800c115
 800c0e8:	0800c115 	.word	0x0800c115
 800c0ec:	0800c115 	.word	0x0800c115
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c115 	.word	0x0800c115
 800c0f8:	0800c115 	.word	0x0800c115
 800c0fc:	0800c115 	.word	0x0800c115
 800c100:	0800c115 	.word	0x0800c115
 800c104:	0800c115 	.word	0x0800c115
 800c108:	0800c115 	.word	0x0800c115
 800c10c:	0800c115 	.word	0x0800c115
 800c110:	0800c115 	.word	0x0800c115
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c114:	bf00      	nop
  }

  return (USBD_OK);
 800c116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len); // (1)
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7f4 f88b 	bl	800024c <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	4805      	ldr	r0, [pc, #20]	; (800c150 <CDC_Receive_FS+0x2c>)
 800c13a:	f7fe fdb6 	bl	800acaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c13e:	4804      	ldr	r0, [pc, #16]	; (800c150 <CDC_Receive_FS+0x2c>)
 800c140:	f7fe fdfc 	bl	800ad3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c144:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	200005e8 	.word	0x200005e8

0800c154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c160:	2300      	movs	r3, #0
 800c162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <CDC_Transmit_FS+0x48>)
 800c166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c16a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c176:	2301      	movs	r3, #1
 800c178:	e00b      	b.n	800c192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c17a:	887b      	ldrh	r3, [r7, #2]
 800c17c:	461a      	mov	r2, r3
 800c17e:	6879      	ldr	r1, [r7, #4]
 800c180:	4806      	ldr	r0, [pc, #24]	; (800c19c <CDC_Transmit_FS+0x48>)
 800c182:	f7fe fd74 	bl	800ac6e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c186:	4805      	ldr	r0, [pc, #20]	; (800c19c <CDC_Transmit_FS+0x48>)
 800c188:	f7fe fda8 	bl	800acdc <USBD_CDC_TransmitPacket>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	200005e8 	.word	0x200005e8

0800c1a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	371c      	adds	r7, #28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
	...

0800c1c4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2212      	movs	r2, #18
 800c1d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c1d6:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	20000194 	.word	0x20000194

0800c1e8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	6039      	str	r1, [r7, #0]
 800c1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1fa:	4b03      	ldr	r3, [pc, #12]	; (800c208 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr
 800c208:	200001a8 	.word	0x200001a8

0800c20c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	6039      	str	r1, [r7, #0]
 800c216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d105      	bne.n	800c22a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	4907      	ldr	r1, [pc, #28]	; (800c240 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c222:	4808      	ldr	r0, [pc, #32]	; (800c244 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c224:	f7ff fdf3 	bl	800be0e <USBD_GetString>
 800c228:	e004      	b.n	800c234 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	4904      	ldr	r1, [pc, #16]	; (800c240 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c22e:	4805      	ldr	r0, [pc, #20]	; (800c244 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c230:	f7ff fded 	bl	800be0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c234:	4b02      	ldr	r3, [pc, #8]	; (800c240 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20001088 	.word	0x20001088
 800c244:	0800ca7c 	.word	0x0800ca7c

0800c248 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	6039      	str	r1, [r7, #0]
 800c252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	4904      	ldr	r1, [pc, #16]	; (800c268 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c258:	4804      	ldr	r0, [pc, #16]	; (800c26c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c25a:	f7ff fdd8 	bl	800be0e <USBD_GetString>
  return USBD_StrDesc;
 800c25e:	4b02      	ldr	r3, [pc, #8]	; (800c268 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	20001088 	.word	0x20001088
 800c26c:	0800ca94 	.word	0x0800ca94

0800c270 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	221a      	movs	r2, #26
 800c280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c282:	f000 f843 	bl	800c30c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c286:	4b02      	ldr	r3, [pc, #8]	; (800c290 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200001ac 	.word	0x200001ac

0800c294 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	4603      	mov	r3, r0
 800c29c:	6039      	str	r1, [r7, #0]
 800c29e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d105      	bne.n	800c2b2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	4907      	ldr	r1, [pc, #28]	; (800c2c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c2aa:	4808      	ldr	r0, [pc, #32]	; (800c2cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c2ac:	f7ff fdaf 	bl	800be0e <USBD_GetString>
 800c2b0:	e004      	b.n	800c2bc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	4904      	ldr	r1, [pc, #16]	; (800c2c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c2b6:	4805      	ldr	r0, [pc, #20]	; (800c2cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c2b8:	f7ff fda9 	bl	800be0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2bc:	4b02      	ldr	r3, [pc, #8]	; (800c2c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20001088 	.word	0x20001088
 800c2cc:	0800caa8 	.word	0x0800caa8

0800c2d0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	6039      	str	r1, [r7, #0]
 800c2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	4907      	ldr	r1, [pc, #28]	; (800c304 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c2e6:	4808      	ldr	r0, [pc, #32]	; (800c308 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c2e8:	f7ff fd91 	bl	800be0e <USBD_GetString>
 800c2ec:	e004      	b.n	800c2f8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	4904      	ldr	r1, [pc, #16]	; (800c304 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c2f2:	4805      	ldr	r0, [pc, #20]	; (800c308 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c2f4:	f7ff fd8b 	bl	800be0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20001088 	.word	0x20001088
 800c308:	0800cab4 	.word	0x0800cab4

0800c30c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <Get_SerialNum+0x44>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c318:	4b0e      	ldr	r3, [pc, #56]	; (800c354 <Get_SerialNum+0x48>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c31e:	4b0e      	ldr	r3, [pc, #56]	; (800c358 <Get_SerialNum+0x4c>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4413      	add	r3, r2
 800c32a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d009      	beq.n	800c346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c332:	2208      	movs	r2, #8
 800c334:	4909      	ldr	r1, [pc, #36]	; (800c35c <Get_SerialNum+0x50>)
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f000 f814 	bl	800c364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c33c:	2204      	movs	r2, #4
 800c33e:	4908      	ldr	r1, [pc, #32]	; (800c360 <Get_SerialNum+0x54>)
 800c340:	68b8      	ldr	r0, [r7, #8]
 800c342:	f000 f80f 	bl	800c364 <IntToUnicode>
  }
}
 800c346:	bf00      	nop
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	1fff7590 	.word	0x1fff7590
 800c354:	1fff7594 	.word	0x1fff7594
 800c358:	1fff7598 	.word	0x1fff7598
 800c35c:	200001ae 	.word	0x200001ae
 800c360:	200001be 	.word	0x200001be

0800c364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	4613      	mov	r3, r2
 800c370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
 800c37a:	e027      	b.n	800c3cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	0f1b      	lsrs	r3, r3, #28
 800c380:	2b09      	cmp	r3, #9
 800c382:	d80b      	bhi.n	800c39c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	0f1b      	lsrs	r3, r3, #28
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4619      	mov	r1, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	440b      	add	r3, r1
 800c394:	3230      	adds	r2, #48	; 0x30
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]
 800c39a:	e00a      	b.n	800c3b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	0f1b      	lsrs	r3, r3, #28
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3237      	adds	r2, #55	; 0x37
 800c3ae:	b2d2      	uxtb	r2, r2
 800c3b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	011b      	lsls	r3, r3, #4
 800c3b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	005b      	lsls	r3, r3, #1
 800c3bc:	3301      	adds	r3, #1
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	75fb      	strb	r3, [r7, #23]
 800c3cc:	7dfa      	ldrb	r2, [r7, #23]
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d3d3      	bcc.n	800c37c <IntToUnicode+0x18>
  }
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	371c      	adds	r7, #28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b094      	sub	sp, #80	; 0x50
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c3ec:	f107 030c 	add.w	r3, r7, #12
 800c3f0:	2244      	movs	r2, #68	; 0x44
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 fb2d 	bl	800ca54 <memset>
  if(pcdHandle->Instance==USB)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a15      	ldr	r2, [pc, #84]	; (800c454 <HAL_PCD_MspInit+0x70>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d123      	bne.n	800c44c <HAL_PCD_MspInit+0x68>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c408:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c40a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c40e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c410:	f107 030c 	add.w	r3, r7, #12
 800c414:	4618      	mov	r0, r3
 800c416:	f7f9 fd17 	bl	8005e48 <HAL_RCCEx_PeriphCLKConfig>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800c420:	f7f4 ff48 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c424:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <HAL_PCD_MspInit+0x74>)
 800c426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c428:	4a0b      	ldr	r2, [pc, #44]	; (800c458 <HAL_PCD_MspInit+0x74>)
 800c42a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c42e:	6593      	str	r3, [r2, #88]	; 0x58
 800c430:	4b09      	ldr	r3, [pc, #36]	; (800c458 <HAL_PCD_MspInit+0x74>)
 800c432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c438:	60bb      	str	r3, [r7, #8]
 800c43a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c43c:	2200      	movs	r2, #0
 800c43e:	2100      	movs	r1, #0
 800c440:	2014      	movs	r0, #20
 800c442:	f7f6 fc68 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c446:	2014      	movs	r0, #20
 800c448:	f7f6 fc7f 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c44c:	bf00      	nop
 800c44e:	3750      	adds	r7, #80	; 0x50
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	40005c00 	.word	0x40005c00
 800c458:	40021000 	.word	0x40021000

0800c45c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c470:	4619      	mov	r1, r3
 800c472:	4610      	mov	r0, r2
 800c474:	f7fe fd2e 	bl	800aed4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	4613      	mov	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	440b      	add	r3, r1
 800c4a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	f7fe fd68 	bl	800af7e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c4c8:	78fa      	ldrb	r2, [r7, #3]
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	440b      	add	r3, r1
 800c4d6:	333c      	adds	r3, #60	; 0x3c
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f7fe fdb1 	bl	800b044 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe fec5 	bl	800b288 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c50e:	2301      	movs	r3, #1
 800c510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d001      	beq.n	800c51e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c51a:	f7f4 fecb 	bl	80012b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c524:	7bfa      	ldrb	r2, [r7, #15]
 800c526:	4611      	mov	r1, r2
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe fe6f 	bl	800b20c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c534:	4618      	mov	r0, r3
 800c536:	f7fe fe1b 	bl	800b170 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c53a:	bf00      	nop
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fe6a 	bl	800b22c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d005      	beq.n	800c56c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c560:	4b04      	ldr	r3, [pc, #16]	; (800c574 <HAL_PCD_SuspendCallback+0x30>)
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	4a03      	ldr	r2, [pc, #12]	; (800c574 <HAL_PCD_SuspendCallback+0x30>)
 800c566:	f043 0306 	orr.w	r3, r3, #6
 800c56a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	e000ed00 	.word	0xe000ed00

0800c578 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d007      	beq.n	800c598 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c588:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <HAL_PCD_ResumeCallback+0x34>)
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	4a07      	ldr	r2, [pc, #28]	; (800c5ac <HAL_PCD_ResumeCallback+0x34>)
 800c58e:	f023 0306 	bic.w	r3, r3, #6
 800c592:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c594:	f000 f9fa 	bl	800c98c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe fe5a 	bl	800b258 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	e000ed00 	.word	0xe000ed00

0800c5b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c5b8:	4a2b      	ldr	r2, [pc, #172]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a29      	ldr	r2, [pc, #164]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c5c8:	4b27      	ldr	r3, [pc, #156]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5ca:	4a28      	ldr	r2, [pc, #160]	; (800c66c <USBD_LL_Init+0xbc>)
 800c5cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c5ce:	4b26      	ldr	r3, [pc, #152]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c5d4:	4b24      	ldr	r3, [pc, #144]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c5da:	4b23      	ldr	r3, [pc, #140]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5dc:	2202      	movs	r2, #2
 800c5de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c5e0:	4b21      	ldr	r3, [pc, #132]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c5e6:	4b20      	ldr	r3, [pc, #128]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c5ec:	4b1e      	ldr	r3, [pc, #120]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c5f2:	4b1d      	ldr	r3, [pc, #116]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c5f8:	481b      	ldr	r0, [pc, #108]	; (800c668 <USBD_LL_Init+0xb8>)
 800c5fa:	f7f7 f942 	bl	8003882 <HAL_PCD_Init>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c604:	f7f4 fe56 	bl	80012b4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c60e:	2318      	movs	r3, #24
 800c610:	2200      	movs	r2, #0
 800c612:	2100      	movs	r1, #0
 800c614:	f7f8 fdfb 	bl	800520e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c61e:	2358      	movs	r3, #88	; 0x58
 800c620:	2200      	movs	r2, #0
 800c622:	2180      	movs	r1, #128	; 0x80
 800c624:	f7f8 fdf3 	bl	800520e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c62e:	23c0      	movs	r3, #192	; 0xc0
 800c630:	2200      	movs	r2, #0
 800c632:	2181      	movs	r1, #129	; 0x81
 800c634:	f7f8 fdeb 	bl	800520e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c63e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c642:	2200      	movs	r2, #0
 800c644:	2101      	movs	r1, #1
 800c646:	f7f8 fde2 	bl	800520e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c650:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c654:	2200      	movs	r2, #0
 800c656:	2182      	movs	r1, #130	; 0x82
 800c658:	f7f8 fdd9 	bl	800520e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20001288 	.word	0x20001288
 800c66c:	40005c00 	.word	0x40005c00

0800c670 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c686:	4618      	mov	r0, r3
 800c688:	f7f7 f9e0 	bl	8003a4c <HAL_PCD_Start>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c690:	7bfb      	ldrb	r3, [r7, #15]
 800c692:	4618      	mov	r0, r3
 800c694:	f000 f980 	bl	800c998 <USBD_Get_USB_Status>
 800c698:	4603      	mov	r3, r0
 800c69a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	4608      	mov	r0, r1
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	70fb      	strb	r3, [r7, #3]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70bb      	strb	r3, [r7, #2]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6ce:	78bb      	ldrb	r3, [r7, #2]
 800c6d0:	883a      	ldrh	r2, [r7, #0]
 800c6d2:	78f9      	ldrb	r1, [r7, #3]
 800c6d4:	f7f7 fb28 	bl	8003d28 <HAL_PCD_EP_Open>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 f95a 	bl	800c998 <USBD_Get_USB_Status>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	4611      	mov	r1, r2
 800c710:	4618      	mov	r0, r3
 800c712:	f7f7 fb6f 	bl	8003df4 <HAL_PCD_EP_Close>
 800c716:	4603      	mov	r3, r0
 800c718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 f93b 	bl	800c998 <USBD_Get_USB_Status>
 800c722:	4603      	mov	r3, r0
 800c724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c726:	7bbb      	ldrb	r3, [r7, #14]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c74a:	78fa      	ldrb	r2, [r7, #3]
 800c74c:	4611      	mov	r1, r2
 800c74e:	4618      	mov	r0, r3
 800c750:	f7f7 fc30 	bl	8003fb4 <HAL_PCD_EP_SetStall>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 f91c 	bl	800c998 <USBD_Get_USB_Status>
 800c760:	4603      	mov	r3, r0
 800c762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c764:	7bbb      	ldrb	r3, [r7, #14]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b084      	sub	sp, #16
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
 800c776:	460b      	mov	r3, r1
 800c778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c788:	78fa      	ldrb	r2, [r7, #3]
 800c78a:	4611      	mov	r1, r2
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7f7 fc63 	bl	8004058 <HAL_PCD_EP_ClrStall>
 800c792:	4603      	mov	r3, r0
 800c794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 f8fd 	bl	800c998 <USBD_Get_USB_Status>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	da0c      	bge.n	800c7e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c7c8:	78fb      	ldrb	r3, [r7, #3]
 800c7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ce:	68f9      	ldr	r1, [r7, #12]
 800c7d0:	1c5a      	adds	r2, r3, #1
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	440b      	add	r3, r1
 800c7dc:	3302      	adds	r3, #2
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	e00b      	b.n	800c7fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c7e2:	78fb      	ldrb	r3, [r7, #3]
 800c7e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7e8:	68f9      	ldr	r1, [r7, #12]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	440b      	add	r3, r1
 800c7f4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c7f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	460b      	mov	r3, r1
 800c810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c816:	2300      	movs	r3, #0
 800c818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c820:	78fa      	ldrb	r2, [r7, #3]
 800c822:	4611      	mov	r1, r2
 800c824:	4618      	mov	r0, r3
 800c826:	f7f7 fa5a 	bl	8003cde <HAL_PCD_SetAddress>
 800c82a:	4603      	mov	r3, r0
 800c82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f8b1 	bl	800c998 <USBD_Get_USB_Status>
 800c836:	4603      	mov	r3, r0
 800c838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	607a      	str	r2, [r7, #4]
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	460b      	mov	r3, r1
 800c852:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c862:	7af9      	ldrb	r1, [r7, #11]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	f7f7 fb61 	bl	8003f2e <HAL_PCD_EP_Transmit>
 800c86c:	4603      	mov	r3, r0
 800c86e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c870:	7dfb      	ldrb	r3, [r7, #23]
 800c872:	4618      	mov	r0, r3
 800c874:	f000 f890 	bl	800c998 <USBD_Get_USB_Status>
 800c878:	4603      	mov	r3, r0
 800c87a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c87c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
 800c892:	460b      	mov	r3, r1
 800c894:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8a4:	7af9      	ldrb	r1, [r7, #11]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	f7f7 faeb 	bl	8003e84 <HAL_PCD_EP_Receive>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b2:	7dfb      	ldrb	r3, [r7, #23]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f86f 	bl	800c998 <USBD_Get_USB_Status>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8be:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7f7 fb0d 	bl	8003efe <HAL_PCD_EP_GetRxCount>
 800c8e4:	4603      	mov	r3, r0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <HAL_PCDEx_LPM_Callback+0x18>
 800c902:	2b01      	cmp	r3, #1
 800c904:	d013      	beq.n	800c92e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c906:	e023      	b.n	800c950 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d007      	beq.n	800c920 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c910:	f000 f83c 	bl	800c98c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c914:	4b10      	ldr	r3, [pc, #64]	; (800c958 <HAL_PCDEx_LPM_Callback+0x68>)
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	4a0f      	ldr	r2, [pc, #60]	; (800c958 <HAL_PCDEx_LPM_Callback+0x68>)
 800c91a:	f023 0306 	bic.w	r3, r3, #6
 800c91e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c926:	4618      	mov	r0, r3
 800c928:	f7fe fc96 	bl	800b258 <USBD_LL_Resume>
    break;
 800c92c:	e010      	b.n	800c950 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fc79 	bl	800b22c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d005      	beq.n	800c94e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c942:	4b05      	ldr	r3, [pc, #20]	; (800c958 <HAL_PCDEx_LPM_Callback+0x68>)
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	4a04      	ldr	r2, [pc, #16]	; (800c958 <HAL_PCDEx_LPM_Callback+0x68>)
 800c948:	f043 0306 	orr.w	r3, r3, #6
 800c94c:	6113      	str	r3, [r2, #16]
    break;
 800c94e:	bf00      	nop
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	e000ed00 	.word	0xe000ed00

0800c95c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c964:	4b03      	ldr	r3, [pc, #12]	; (800c974 <USBD_static_malloc+0x18>)
}
 800c966:	4618      	mov	r0, r3
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	2000157c 	.word	0x2000157c

0800c978 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]

}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c990:	f7f3 fef8 	bl	8000784 <SystemClock_Config>
}
 800c994:	bf00      	nop
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9a6:	79fb      	ldrb	r3, [r7, #7]
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d817      	bhi.n	800c9dc <USBD_Get_USB_Status+0x44>
 800c9ac:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <USBD_Get_USB_Status+0x1c>)
 800c9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b2:	bf00      	nop
 800c9b4:	0800c9c5 	.word	0x0800c9c5
 800c9b8:	0800c9cb 	.word	0x0800c9cb
 800c9bc:	0800c9d1 	.word	0x0800c9d1
 800c9c0:	0800c9d7 	.word	0x0800c9d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c8:	e00b      	b.n	800c9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ce:	e008      	b.n	800c9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d4:	e005      	b.n	800c9e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c9da:	e002      	b.n	800c9e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e0:	bf00      	nop
  }
  return usb_status;
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <__libc_init_array>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4d0d      	ldr	r5, [pc, #52]	; (800ca28 <__libc_init_array+0x38>)
 800c9f4:	4c0d      	ldr	r4, [pc, #52]	; (800ca2c <__libc_init_array+0x3c>)
 800c9f6:	1b64      	subs	r4, r4, r5
 800c9f8:	10a4      	asrs	r4, r4, #2
 800c9fa:	2600      	movs	r6, #0
 800c9fc:	42a6      	cmp	r6, r4
 800c9fe:	d109      	bne.n	800ca14 <__libc_init_array+0x24>
 800ca00:	4d0b      	ldr	r5, [pc, #44]	; (800ca30 <__libc_init_array+0x40>)
 800ca02:	4c0c      	ldr	r4, [pc, #48]	; (800ca34 <__libc_init_array+0x44>)
 800ca04:	f000 f82e 	bl	800ca64 <_init>
 800ca08:	1b64      	subs	r4, r4, r5
 800ca0a:	10a4      	asrs	r4, r4, #2
 800ca0c:	2600      	movs	r6, #0
 800ca0e:	42a6      	cmp	r6, r4
 800ca10:	d105      	bne.n	800ca1e <__libc_init_array+0x2e>
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca18:	4798      	blx	r3
 800ca1a:	3601      	adds	r6, #1
 800ca1c:	e7ee      	b.n	800c9fc <__libc_init_array+0xc>
 800ca1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca22:	4798      	blx	r3
 800ca24:	3601      	adds	r6, #1
 800ca26:	e7f2      	b.n	800ca0e <__libc_init_array+0x1e>
 800ca28:	0800cad4 	.word	0x0800cad4
 800ca2c:	0800cad4 	.word	0x0800cad4
 800ca30:	0800cad4 	.word	0x0800cad4
 800ca34:	0800cad8 	.word	0x0800cad8

0800ca38 <memcpy>:
 800ca38:	440a      	add	r2, r1
 800ca3a:	4291      	cmp	r1, r2
 800ca3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca40:	d100      	bne.n	800ca44 <memcpy+0xc>
 800ca42:	4770      	bx	lr
 800ca44:	b510      	push	{r4, lr}
 800ca46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	d1f9      	bne.n	800ca46 <memcpy+0xe>
 800ca52:	bd10      	pop	{r4, pc}

0800ca54 <memset>:
 800ca54:	4402      	add	r2, r0
 800ca56:	4603      	mov	r3, r0
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d100      	bne.n	800ca5e <memset+0xa>
 800ca5c:	4770      	bx	lr
 800ca5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca62:	e7f9      	b.n	800ca58 <memset+0x4>

0800ca64 <_init>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	bf00      	nop
 800ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6a:	bc08      	pop	{r3}
 800ca6c:	469e      	mov	lr, r3
 800ca6e:	4770      	bx	lr

0800ca70 <_fini>:
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	bf00      	nop
 800ca74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca76:	bc08      	pop	{r3}
 800ca78:	469e      	mov	lr, r3
 800ca7a:	4770      	bx	lr
